// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdVastRequestTemplate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AdVastRequestTemplate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* VastRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VastRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VastRequest_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VastRequest_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* VastRequest_Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VastRequest_Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* VastRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VastRequest_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* VastRequest_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VastRequest_User_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AdVastRequestTemplate_2eproto() {
  protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AdVastRequestTemplate.proto");
  GOOGLE_CHECK(file != NULL);
  VastRequest_descriptor_ = file->message_type(0);
  static const int VastRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, ssl_),
  };
  VastRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VastRequest_descriptor_,
      VastRequest::default_instance_,
      VastRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VastRequest));
  VastRequest_Video_descriptor_ = VastRequest_descriptor_->nested_type(0);
  static const int VastRequest_Video_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, videoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, videotitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, videodesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, pageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, videoasseturl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, videowidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, videoheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, startdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, maxadduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, minadduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, maxadnum_),
  };
  VastRequest_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VastRequest_Video_descriptor_,
      VastRequest_Video::default_instance_,
      VastRequest_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VastRequest_Video));
  VastRequest_Site_descriptor_ = VastRequest_descriptor_->nested_type(1);
  static const int VastRequest_Site_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, publisherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, sitecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, vast20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, vast30_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, vpaid10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, failover_),
  };
  VastRequest_Site_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VastRequest_Site_descriptor_,
      VastRequest_Site::default_instance_,
      VastRequest_Site_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Site, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VastRequest_Site));
  VastRequest_Device_descriptor_ = VastRequest_descriptor_->nested_type(2);
  static const int VastRequest_Device_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Device, dnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Device, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Device, browser_),
  };
  VastRequest_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VastRequest_Device_descriptor_,
      VastRequest_Device::default_instance_,
      VastRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VastRequest_Device));
  VastRequest_User_descriptor_ = VastRequest_descriptor_->nested_type(3);
  static const int VastRequest_User_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, regionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, cityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, isp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, mcc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, mnc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, mobile_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, usagetype_),
  };
  VastRequest_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VastRequest_User_descriptor_,
      VastRequest_User::default_instance_,
      VastRequest_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VastRequest_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VastRequest_User));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AdVastRequestTemplate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VastRequest_descriptor_, &VastRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VastRequest_Video_descriptor_, &VastRequest_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VastRequest_Site_descriptor_, &VastRequest_Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VastRequest_Device_descriptor_, &VastRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VastRequest_User_descriptor_, &VastRequest_User::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AdVastRequestTemplate_2eproto() {
  delete VastRequest::default_instance_;
  delete VastRequest_reflection_;
  delete VastRequest_Video::default_instance_;
  delete VastRequest_Video_reflection_;
  delete VastRequest_Site::default_instance_;
  delete VastRequest_Site_reflection_;
  delete VastRequest_Device::default_instance_;
  delete VastRequest_Device_reflection_;
  delete VastRequest_User::default_instance_;
  delete VastRequest_User_reflection_;
}

void protobuf_AddDesc_AdVastRequestTemplate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033AdVastRequestTemplate.proto\022\021com.rj.pr"
    "otos.msg\"\327\007\n\013VastRequest\022\n\n\002id\030\001 \001(\t\022\016\n\006"
    "player\030\002 \001(\t\0223\n\005video\030\003 \001(\0132$.com.rj.pro"
    "tos.msg.VastRequest.Video\0221\n\004site\030\004 \001(\0132"
    "#.com.rj.protos.msg.VastRequest.Site\0225\n\006"
    "device\030\005 \001(\0132%.com.rj.protos.msg.VastReq"
    "uest.Device\0221\n\004user\030\006 \001(\0132#.com.rj.proto"
    "s.msg.VastRequest.User\022\013\n\003ssl\030\007 \001(\t\032\344\001\n\005"
    "Video\022\017\n\007videoId\030\001 \001(\t\022\022\n\nvideoTitle\030\002 \001"
    "(\t\022\021\n\tvideoDesc\030\003 \001(\t\022\017\n\007pageUrl\030\004 \001(\t\022\025"
    "\n\rvideoAssetUrl\030\005 \001(\t\022\022\n\nvideoWidth\030\006 \001("
    "\t\022\023\n\013videoHeight\030\007 \001(\t\022\022\n\nstartdelay\030\010 \001"
    "(\t\022\025\n\rmaxAdDuration\030\t \001(\t\022\025\n\rminAdDurati"
    "on\030\n \001(\t\022\020\n\010maxAdNum\030\013 \001(\t\032\265\001\n\004Site\022\013\n\003s"
    "id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\023"
    "\n\013publisherId\030\004 \001(\t\022\017\n\007sitecat\030\005 \001(\t\022\014\n\004"
    "page\030\006 \001(\t\022\013\n\003ref\030\007 \001(\t\022\016\n\006vast20\030\010 \001(\010\022"
    "\016\n\006vast30\030\t \001(\010\022\017\n\007vpaid10\030\n \001(\010\022\020\n\010fail"
    "over\030\013 \001(\010\032X\n\006Device\022\013\n\003dnt\030\001 \001(\t\022\n\n\002ua\030"
    "\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n\004lang\030\004 \001(\t\022\n\n\002os\030\005 "
    "\001(\t\022\017\n\007browser\030\006 \001(\t\032\323\001\n\004User\022\013\n\003uid\030\001 \001"
    "(\t\022\023\n\013countryCode\030\002 \001(\t\022\022\n\nregionName\030\003 "
    "\001(\t\022\020\n\010cityName\030\004 \001(\t\022\020\n\010latitude\030\005 \001(\t\022"
    "\021\n\tlongitude\030\006 \001(\t\022\013\n\003isp\030\007 \001(\t\022\016\n\006domai"
    "n\030\010 \001(\t\022\013\n\003mcc\030\t \001(\t\022\013\n\003mnc\030\n \001(\t\022\024\n\014mob"
    "ile_brand\030\013 \001(\t\022\021\n\tusageType\030\014 \001(\t", 1034);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AdVastRequestTemplate.proto", &protobuf_RegisterTypes);
  VastRequest::default_instance_ = new VastRequest();
  VastRequest_Video::default_instance_ = new VastRequest_Video();
  VastRequest_Site::default_instance_ = new VastRequest_Site();
  VastRequest_Device::default_instance_ = new VastRequest_Device();
  VastRequest_User::default_instance_ = new VastRequest_User();
  VastRequest::default_instance_->InitAsDefaultInstance();
  VastRequest_Video::default_instance_->InitAsDefaultInstance();
  VastRequest_Site::default_instance_->InitAsDefaultInstance();
  VastRequest_Device::default_instance_->InitAsDefaultInstance();
  VastRequest_User::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AdVastRequestTemplate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AdVastRequestTemplate_2eproto {
  StaticDescriptorInitializer_AdVastRequestTemplate_2eproto() {
    protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  }
} static_descriptor_initializer_AdVastRequestTemplate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VastRequest_Video::kVideoIdFieldNumber;
const int VastRequest_Video::kVideoTitleFieldNumber;
const int VastRequest_Video::kVideoDescFieldNumber;
const int VastRequest_Video::kPageUrlFieldNumber;
const int VastRequest_Video::kVideoAssetUrlFieldNumber;
const int VastRequest_Video::kVideoWidthFieldNumber;
const int VastRequest_Video::kVideoHeightFieldNumber;
const int VastRequest_Video::kStartdelayFieldNumber;
const int VastRequest_Video::kMaxAdDurationFieldNumber;
const int VastRequest_Video::kMinAdDurationFieldNumber;
const int VastRequest_Video::kMaxAdNumFieldNumber;
#endif  // !_MSC_VER

VastRequest_Video::VastRequest_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VastRequest_Video::InitAsDefaultInstance() {
}

VastRequest_Video::VastRequest_Video(const VastRequest_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VastRequest_Video::SharedCtor() {
  _cached_size_ = 0;
  videoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videotitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videoasseturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videowidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videoheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startdelay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxadduration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minadduration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxadnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VastRequest_Video::~VastRequest_Video() {
  SharedDtor();
}

void VastRequest_Video::SharedDtor() {
  if (videoid_ != &::google::protobuf::internal::kEmptyString) {
    delete videoid_;
  }
  if (videotitle_ != &::google::protobuf::internal::kEmptyString) {
    delete videotitle_;
  }
  if (videodesc_ != &::google::protobuf::internal::kEmptyString) {
    delete videodesc_;
  }
  if (pageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete pageurl_;
  }
  if (videoasseturl_ != &::google::protobuf::internal::kEmptyString) {
    delete videoasseturl_;
  }
  if (videowidth_ != &::google::protobuf::internal::kEmptyString) {
    delete videowidth_;
  }
  if (videoheight_ != &::google::protobuf::internal::kEmptyString) {
    delete videoheight_;
  }
  if (startdelay_ != &::google::protobuf::internal::kEmptyString) {
    delete startdelay_;
  }
  if (maxadduration_ != &::google::protobuf::internal::kEmptyString) {
    delete maxadduration_;
  }
  if (minadduration_ != &::google::protobuf::internal::kEmptyString) {
    delete minadduration_;
  }
  if (maxadnum_ != &::google::protobuf::internal::kEmptyString) {
    delete maxadnum_;
  }
  if (this != default_instance_) {
  }
}

void VastRequest_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VastRequest_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VastRequest_Video_descriptor_;
}

const VastRequest_Video& VastRequest_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  return *default_instance_;
}

VastRequest_Video* VastRequest_Video::default_instance_ = NULL;

VastRequest_Video* VastRequest_Video::New() const {
  return new VastRequest_Video;
}

void VastRequest_Video::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_videoid()) {
      if (videoid_ != &::google::protobuf::internal::kEmptyString) {
        videoid_->clear();
      }
    }
    if (has_videotitle()) {
      if (videotitle_ != &::google::protobuf::internal::kEmptyString) {
        videotitle_->clear();
      }
    }
    if (has_videodesc()) {
      if (videodesc_ != &::google::protobuf::internal::kEmptyString) {
        videodesc_->clear();
      }
    }
    if (has_pageurl()) {
      if (pageurl_ != &::google::protobuf::internal::kEmptyString) {
        pageurl_->clear();
      }
    }
    if (has_videoasseturl()) {
      if (videoasseturl_ != &::google::protobuf::internal::kEmptyString) {
        videoasseturl_->clear();
      }
    }
    if (has_videowidth()) {
      if (videowidth_ != &::google::protobuf::internal::kEmptyString) {
        videowidth_->clear();
      }
    }
    if (has_videoheight()) {
      if (videoheight_ != &::google::protobuf::internal::kEmptyString) {
        videoheight_->clear();
      }
    }
    if (has_startdelay()) {
      if (startdelay_ != &::google::protobuf::internal::kEmptyString) {
        startdelay_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_maxadduration()) {
      if (maxadduration_ != &::google::protobuf::internal::kEmptyString) {
        maxadduration_->clear();
      }
    }
    if (has_minadduration()) {
      if (minadduration_ != &::google::protobuf::internal::kEmptyString) {
        minadduration_->clear();
      }
    }
    if (has_maxadnum()) {
      if (maxadnum_ != &::google::protobuf::internal::kEmptyString) {
        maxadnum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VastRequest_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string videoId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videoid().data(), this->videoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_videoTitle;
        break;
      }

      // optional string videoTitle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videotitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videotitle().data(), this->videotitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_videoDesc;
        break;
      }

      // optional string videoDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videodesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videodesc().data(), this->videodesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pageUrl;
        break;
      }

      // optional string pageUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pageUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pageurl().data(), this->pageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_videoAssetUrl;
        break;
      }

      // optional string videoAssetUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoAssetUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videoasseturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videoasseturl().data(), this->videoasseturl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_videoWidth;
        break;
      }

      // optional string videoWidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoWidth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videowidth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videowidth().data(), this->videowidth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_videoHeight;
        break;
      }

      // optional string videoHeight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoHeight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videoheight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videoheight().data(), this->videoheight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_startdelay;
        break;
      }

      // optional string startdelay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startdelay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdelay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->startdelay().data(), this->startdelay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_maxAdDuration;
        break;
      }

      // optional string maxAdDuration = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxAdDuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxadduration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maxadduration().data(), this->maxadduration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_minAdDuration;
        break;
      }

      // optional string minAdDuration = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minAdDuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minadduration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->minadduration().data(), this->minadduration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_maxAdNum;
        break;
      }

      // optional string maxAdNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxAdNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxadnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maxadnum().data(), this->maxadnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VastRequest_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string videoId = 1;
  if (has_videoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videoid().data(), this->videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->videoid(), output);
  }

  // optional string videoTitle = 2;
  if (has_videotitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videotitle().data(), this->videotitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->videotitle(), output);
  }

  // optional string videoDesc = 3;
  if (has_videodesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videodesc().data(), this->videodesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->videodesc(), output);
  }

  // optional string pageUrl = 4;
  if (has_pageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pageurl().data(), this->pageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pageurl(), output);
  }

  // optional string videoAssetUrl = 5;
  if (has_videoasseturl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videoasseturl().data(), this->videoasseturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->videoasseturl(), output);
  }

  // optional string videoWidth = 6;
  if (has_videowidth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videowidth().data(), this->videowidth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->videowidth(), output);
  }

  // optional string videoHeight = 7;
  if (has_videoheight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videoheight().data(), this->videoheight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->videoheight(), output);
  }

  // optional string startdelay = 8;
  if (has_startdelay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startdelay().data(), this->startdelay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->startdelay(), output);
  }

  // optional string maxAdDuration = 9;
  if (has_maxadduration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxadduration().data(), this->maxadduration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->maxadduration(), output);
  }

  // optional string minAdDuration = 10;
  if (has_minadduration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minadduration().data(), this->minadduration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->minadduration(), output);
  }

  // optional string maxAdNum = 11;
  if (has_maxadnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxadnum().data(), this->maxadnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->maxadnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VastRequest_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string videoId = 1;
  if (has_videoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videoid().data(), this->videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->videoid(), target);
  }

  // optional string videoTitle = 2;
  if (has_videotitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videotitle().data(), this->videotitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->videotitle(), target);
  }

  // optional string videoDesc = 3;
  if (has_videodesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videodesc().data(), this->videodesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->videodesc(), target);
  }

  // optional string pageUrl = 4;
  if (has_pageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pageurl().data(), this->pageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pageurl(), target);
  }

  // optional string videoAssetUrl = 5;
  if (has_videoasseturl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videoasseturl().data(), this->videoasseturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->videoasseturl(), target);
  }

  // optional string videoWidth = 6;
  if (has_videowidth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videowidth().data(), this->videowidth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->videowidth(), target);
  }

  // optional string videoHeight = 7;
  if (has_videoheight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videoheight().data(), this->videoheight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->videoheight(), target);
  }

  // optional string startdelay = 8;
  if (has_startdelay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startdelay().data(), this->startdelay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->startdelay(), target);
  }

  // optional string maxAdDuration = 9;
  if (has_maxadduration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxadduration().data(), this->maxadduration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->maxadduration(), target);
  }

  // optional string minAdDuration = 10;
  if (has_minadduration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minadduration().data(), this->minadduration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->minadduration(), target);
  }

  // optional string maxAdNum = 11;
  if (has_maxadnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxadnum().data(), this->maxadnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->maxadnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VastRequest_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string videoId = 1;
    if (has_videoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videoid());
    }

    // optional string videoTitle = 2;
    if (has_videotitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videotitle());
    }

    // optional string videoDesc = 3;
    if (has_videodesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videodesc());
    }

    // optional string pageUrl = 4;
    if (has_pageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pageurl());
    }

    // optional string videoAssetUrl = 5;
    if (has_videoasseturl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videoasseturl());
    }

    // optional string videoWidth = 6;
    if (has_videowidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videowidth());
    }

    // optional string videoHeight = 7;
    if (has_videoheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videoheight());
    }

    // optional string startdelay = 8;
    if (has_startdelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdelay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string maxAdDuration = 9;
    if (has_maxadduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maxadduration());
    }

    // optional string minAdDuration = 10;
    if (has_minadduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minadduration());
    }

    // optional string maxAdNum = 11;
    if (has_maxadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maxadnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VastRequest_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VastRequest_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VastRequest_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VastRequest_Video::MergeFrom(const VastRequest_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_videoid()) {
      set_videoid(from.videoid());
    }
    if (from.has_videotitle()) {
      set_videotitle(from.videotitle());
    }
    if (from.has_videodesc()) {
      set_videodesc(from.videodesc());
    }
    if (from.has_pageurl()) {
      set_pageurl(from.pageurl());
    }
    if (from.has_videoasseturl()) {
      set_videoasseturl(from.videoasseturl());
    }
    if (from.has_videowidth()) {
      set_videowidth(from.videowidth());
    }
    if (from.has_videoheight()) {
      set_videoheight(from.videoheight());
    }
    if (from.has_startdelay()) {
      set_startdelay(from.startdelay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxadduration()) {
      set_maxadduration(from.maxadduration());
    }
    if (from.has_minadduration()) {
      set_minadduration(from.minadduration());
    }
    if (from.has_maxadnum()) {
      set_maxadnum(from.maxadnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VastRequest_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VastRequest_Video::CopyFrom(const VastRequest_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VastRequest_Video::IsInitialized() const {

  return true;
}

void VastRequest_Video::Swap(VastRequest_Video* other) {
  if (other != this) {
    std::swap(videoid_, other->videoid_);
    std::swap(videotitle_, other->videotitle_);
    std::swap(videodesc_, other->videodesc_);
    std::swap(pageurl_, other->pageurl_);
    std::swap(videoasseturl_, other->videoasseturl_);
    std::swap(videowidth_, other->videowidth_);
    std::swap(videoheight_, other->videoheight_);
    std::swap(startdelay_, other->startdelay_);
    std::swap(maxadduration_, other->maxadduration_);
    std::swap(minadduration_, other->minadduration_);
    std::swap(maxadnum_, other->maxadnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VastRequest_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VastRequest_Video_descriptor_;
  metadata.reflection = VastRequest_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VastRequest_Site::kSidFieldNumber;
const int VastRequest_Site::kNameFieldNumber;
const int VastRequest_Site::kDomainFieldNumber;
const int VastRequest_Site::kPublisherIdFieldNumber;
const int VastRequest_Site::kSitecatFieldNumber;
const int VastRequest_Site::kPageFieldNumber;
const int VastRequest_Site::kRefFieldNumber;
const int VastRequest_Site::kVast20FieldNumber;
const int VastRequest_Site::kVast30FieldNumber;
const int VastRequest_Site::kVpaid10FieldNumber;
const int VastRequest_Site::kFailoverFieldNumber;
#endif  // !_MSC_VER

VastRequest_Site::VastRequest_Site()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VastRequest_Site::InitAsDefaultInstance() {
}

VastRequest_Site::VastRequest_Site(const VastRequest_Site& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VastRequest_Site::SharedCtor() {
  _cached_size_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publisherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sitecat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vast20_ = false;
  vast30_ = false;
  vpaid10_ = false;
  failover_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VastRequest_Site::~VastRequest_Site() {
  SharedDtor();
}

void VastRequest_Site::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (publisherid_ != &::google::protobuf::internal::kEmptyString) {
    delete publisherid_;
  }
  if (sitecat_ != &::google::protobuf::internal::kEmptyString) {
    delete sitecat_;
  }
  if (page_ != &::google::protobuf::internal::kEmptyString) {
    delete page_;
  }
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (this != default_instance_) {
  }
}

void VastRequest_Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VastRequest_Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VastRequest_Site_descriptor_;
}

const VastRequest_Site& VastRequest_Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  return *default_instance_;
}

VastRequest_Site* VastRequest_Site::default_instance_ = NULL;

VastRequest_Site* VastRequest_Site::New() const {
  return new VastRequest_Site;
}

void VastRequest_Site::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    if (has_publisherid()) {
      if (publisherid_ != &::google::protobuf::internal::kEmptyString) {
        publisherid_->clear();
      }
    }
    if (has_sitecat()) {
      if (sitecat_ != &::google::protobuf::internal::kEmptyString) {
        sitecat_->clear();
      }
    }
    if (has_page()) {
      if (page_ != &::google::protobuf::internal::kEmptyString) {
        page_->clear();
      }
    }
    if (has_ref()) {
      if (ref_ != &::google::protobuf::internal::kEmptyString) {
        ref_->clear();
      }
    }
    vast20_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vast30_ = false;
    vpaid10_ = false;
    failover_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VastRequest_Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_publisherId;
        break;
      }

      // optional string publisherId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisherId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisherid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisherid().data(), this->publisherid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sitecat;
        break;
      }

      // optional string sitecat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sitecat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sitecat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sitecat().data(), this->sitecat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_page;
        break;
      }

      // optional string page = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page().data(), this->page().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ref;
        break;
      }

      // optional string ref = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vast20;
        break;
      }

      // optional bool vast20 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vast20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vast20_)));
          set_has_vast20();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vast30;
        break;
      }

      // optional bool vast30 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vast30:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vast30_)));
          set_has_vast30();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vpaid10;
        break;
      }

      // optional bool vpaid10 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vpaid10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vpaid10_)));
          set_has_vpaid10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_failover;
        break;
      }

      // optional bool failover = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failover_)));
          set_has_failover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VastRequest_Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->domain(), output);
  }

  // optional string publisherId = 4;
  if (has_publisherid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisherid().data(), this->publisherid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->publisherid(), output);
  }

  // optional string sitecat = 5;
  if (has_sitecat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sitecat().data(), this->sitecat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sitecat(), output);
  }

  // optional string page = 6;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->page(), output);
  }

  // optional string ref = 7;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ref(), output);
  }

  // optional bool vast20 = 8;
  if (has_vast20()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->vast20(), output);
  }

  // optional bool vast30 = 9;
  if (has_vast30()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->vast30(), output);
  }

  // optional bool vpaid10 = 10;
  if (has_vpaid10()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->vpaid10(), output);
  }

  // optional bool failover = 11;
  if (has_failover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->failover(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VastRequest_Site::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // optional string publisherId = 4;
  if (has_publisherid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisherid().data(), this->publisherid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->publisherid(), target);
  }

  // optional string sitecat = 5;
  if (has_sitecat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sitecat().data(), this->sitecat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sitecat(), target);
  }

  // optional string page = 6;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->page(), target);
  }

  // optional string ref = 7;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ref(), target);
  }

  // optional bool vast20 = 8;
  if (has_vast20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->vast20(), target);
  }

  // optional bool vast30 = 9;
  if (has_vast30()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->vast30(), target);
  }

  // optional bool vpaid10 = 10;
  if (has_vpaid10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->vpaid10(), target);
  }

  // optional bool failover = 11;
  if (has_failover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->failover(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VastRequest_Site::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string publisherId = 4;
    if (has_publisherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisherid());
    }

    // optional string sitecat = 5;
    if (has_sitecat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sitecat());
    }

    // optional string page = 6;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page());
    }

    // optional string ref = 7;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional bool vast20 = 8;
    if (has_vast20()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool vast30 = 9;
    if (has_vast30()) {
      total_size += 1 + 1;
    }

    // optional bool vpaid10 = 10;
    if (has_vpaid10()) {
      total_size += 1 + 1;
    }

    // optional bool failover = 11;
    if (has_failover()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VastRequest_Site::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VastRequest_Site* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VastRequest_Site*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VastRequest_Site::MergeFrom(const VastRequest_Site& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_publisherid()) {
      set_publisherid(from.publisherid());
    }
    if (from.has_sitecat()) {
      set_sitecat(from.sitecat());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_vast20()) {
      set_vast20(from.vast20());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vast30()) {
      set_vast30(from.vast30());
    }
    if (from.has_vpaid10()) {
      set_vpaid10(from.vpaid10());
    }
    if (from.has_failover()) {
      set_failover(from.failover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VastRequest_Site::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VastRequest_Site::CopyFrom(const VastRequest_Site& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VastRequest_Site::IsInitialized() const {

  return true;
}

void VastRequest_Site::Swap(VastRequest_Site* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(name_, other->name_);
    std::swap(domain_, other->domain_);
    std::swap(publisherid_, other->publisherid_);
    std::swap(sitecat_, other->sitecat_);
    std::swap(page_, other->page_);
    std::swap(ref_, other->ref_);
    std::swap(vast20_, other->vast20_);
    std::swap(vast30_, other->vast30_);
    std::swap(vpaid10_, other->vpaid10_);
    std::swap(failover_, other->failover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VastRequest_Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VastRequest_Site_descriptor_;
  metadata.reflection = VastRequest_Site_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VastRequest_Device::kDntFieldNumber;
const int VastRequest_Device::kUaFieldNumber;
const int VastRequest_Device::kIpFieldNumber;
const int VastRequest_Device::kLangFieldNumber;
const int VastRequest_Device::kOsFieldNumber;
const int VastRequest_Device::kBrowserFieldNumber;
#endif  // !_MSC_VER

VastRequest_Device::VastRequest_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VastRequest_Device::InitAsDefaultInstance() {
}

VastRequest_Device::VastRequest_Device(const VastRequest_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VastRequest_Device::SharedCtor() {
  _cached_size_ = 0;
  dnt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  browser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VastRequest_Device::~VastRequest_Device() {
  SharedDtor();
}

void VastRequest_Device::SharedDtor() {
  if (dnt_ != &::google::protobuf::internal::kEmptyString) {
    delete dnt_;
  }
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    delete ua_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (lang_ != &::google::protobuf::internal::kEmptyString) {
    delete lang_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (browser_ != &::google::protobuf::internal::kEmptyString) {
    delete browser_;
  }
  if (this != default_instance_) {
  }
}

void VastRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VastRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VastRequest_Device_descriptor_;
}

const VastRequest_Device& VastRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  return *default_instance_;
}

VastRequest_Device* VastRequest_Device::default_instance_ = NULL;

VastRequest_Device* VastRequest_Device::New() const {
  return new VastRequest_Device;
}

void VastRequest_Device::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dnt()) {
      if (dnt_ != &::google::protobuf::internal::kEmptyString) {
        dnt_->clear();
      }
    }
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::kEmptyString) {
        ua_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::kEmptyString) {
        lang_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_browser()) {
      if (browser_ != &::google::protobuf::internal::kEmptyString) {
        browser_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VastRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dnt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dnt().data(), this->dnt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ua;
        break;
      }

      // optional string ua = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lang;
        break;
      }

      // optional string lang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_os;
        break;
      }

      // optional string os = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_browser;
        break;
      }

      // optional string browser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->browser().data(), this->browser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VastRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dnt = 1;
  if (has_dnt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dnt().data(), this->dnt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dnt(), output);
  }

  // optional string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ua(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional string lang = 4;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lang(), output);
  }

  // optional string os = 5;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->os(), output);
  }

  // optional string browser = 6;
  if (has_browser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browser().data(), this->browser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->browser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VastRequest_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dnt = 1;
  if (has_dnt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dnt().data(), this->dnt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dnt(), target);
  }

  // optional string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ua(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string lang = 4;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lang(), target);
  }

  // optional string os = 5;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->os(), target);
  }

  // optional string browser = 6;
  if (has_browser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browser().data(), this->browser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->browser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VastRequest_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dnt = 1;
    if (has_dnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dnt());
    }

    // optional string ua = 2;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string lang = 4;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // optional string os = 5;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string browser = 6;
    if (has_browser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browser());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VastRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VastRequest_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VastRequest_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VastRequest_Device::MergeFrom(const VastRequest_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dnt()) {
      set_dnt(from.dnt());
    }
    if (from.has_ua()) {
      set_ua(from.ua());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_browser()) {
      set_browser(from.browser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VastRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VastRequest_Device::CopyFrom(const VastRequest_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VastRequest_Device::IsInitialized() const {

  return true;
}

void VastRequest_Device::Swap(VastRequest_Device* other) {
  if (other != this) {
    std::swap(dnt_, other->dnt_);
    std::swap(ua_, other->ua_);
    std::swap(ip_, other->ip_);
    std::swap(lang_, other->lang_);
    std::swap(os_, other->os_);
    std::swap(browser_, other->browser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VastRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VastRequest_Device_descriptor_;
  metadata.reflection = VastRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VastRequest_User::kUidFieldNumber;
const int VastRequest_User::kCountryCodeFieldNumber;
const int VastRequest_User::kRegionNameFieldNumber;
const int VastRequest_User::kCityNameFieldNumber;
const int VastRequest_User::kLatitudeFieldNumber;
const int VastRequest_User::kLongitudeFieldNumber;
const int VastRequest_User::kIspFieldNumber;
const int VastRequest_User::kDomainFieldNumber;
const int VastRequest_User::kMccFieldNumber;
const int VastRequest_User::kMncFieldNumber;
const int VastRequest_User::kMobileBrandFieldNumber;
const int VastRequest_User::kUsageTypeFieldNumber;
#endif  // !_MSC_VER

VastRequest_User::VastRequest_User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VastRequest_User::InitAsDefaultInstance() {
}

VastRequest_User::VastRequest_User(const VastRequest_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VastRequest_User::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mnc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VastRequest_User::~VastRequest_User() {
  SharedDtor();
}

void VastRequest_User::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete countrycode_;
  }
  if (regionname_ != &::google::protobuf::internal::kEmptyString) {
    delete regionname_;
  }
  if (cityname_ != &::google::protobuf::internal::kEmptyString) {
    delete cityname_;
  }
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    delete latitude_;
  }
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    delete longitude_;
  }
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (mcc_ != &::google::protobuf::internal::kEmptyString) {
    delete mcc_;
  }
  if (mnc_ != &::google::protobuf::internal::kEmptyString) {
    delete mnc_;
  }
  if (mobile_brand_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_brand_;
  }
  if (usagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete usagetype_;
  }
  if (this != default_instance_) {
  }
}

void VastRequest_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VastRequest_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VastRequest_User_descriptor_;
}

const VastRequest_User& VastRequest_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  return *default_instance_;
}

VastRequest_User* VastRequest_User::default_instance_ = NULL;

VastRequest_User* VastRequest_User::New() const {
  return new VastRequest_User;
}

void VastRequest_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_countrycode()) {
      if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
        countrycode_->clear();
      }
    }
    if (has_regionname()) {
      if (regionname_ != &::google::protobuf::internal::kEmptyString) {
        regionname_->clear();
      }
    }
    if (has_cityname()) {
      if (cityname_ != &::google::protobuf::internal::kEmptyString) {
        cityname_->clear();
      }
    }
    if (has_latitude()) {
      if (latitude_ != &::google::protobuf::internal::kEmptyString) {
        latitude_->clear();
      }
    }
    if (has_longitude()) {
      if (longitude_ != &::google::protobuf::internal::kEmptyString) {
        longitude_->clear();
      }
    }
    if (has_isp()) {
      if (isp_ != &::google::protobuf::internal::kEmptyString) {
        isp_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mcc()) {
      if (mcc_ != &::google::protobuf::internal::kEmptyString) {
        mcc_->clear();
      }
    }
    if (has_mnc()) {
      if (mnc_ != &::google::protobuf::internal::kEmptyString) {
        mnc_->clear();
      }
    }
    if (has_mobile_brand()) {
      if (mobile_brand_ != &::google::protobuf::internal::kEmptyString) {
        mobile_brand_->clear();
      }
    }
    if (has_usagetype()) {
      if (usagetype_ != &::google::protobuf::internal::kEmptyString) {
        usagetype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VastRequest_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_countryCode;
        break;
      }

      // optional string countryCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_regionName;
        break;
      }

      // optional string regionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regionname().data(), this->regionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cityName;
        break;
      }

      // optional string cityName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cityName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cityname().data(), this->cityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_latitude;
        break;
      }

      // optional string latitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latitude().data(), this->latitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_longitude;
        break;
      }

      // optional string longitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_longitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->longitude().data(), this->longitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_isp;
        break;
      }

      // optional string isp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isp().data(), this->isp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_domain;
        break;
      }

      // optional string domain = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mcc;
        break;
      }

      // optional string mcc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mcc().data(), this->mcc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mnc;
        break;
      }

      // optional string mnc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mnc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mnc().data(), this->mnc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_mobile_brand;
        break;
      }

      // optional string mobile_brand = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile_brand().data(), this->mobile_brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_usageType;
        break;
      }

      // optional string usageType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usageType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usagetype().data(), this->usagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VastRequest_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional string countryCode = 2;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->countrycode(), output);
  }

  // optional string regionName = 3;
  if (has_regionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regionname().data(), this->regionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->regionname(), output);
  }

  // optional string cityName = 4;
  if (has_cityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cityname().data(), this->cityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cityname(), output);
  }

  // optional string latitude = 5;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->latitude(), output);
  }

  // optional string longitude = 6;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->longitude(), output);
  }

  // optional string isp = 7;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp().data(), this->isp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->isp(), output);
  }

  // optional string domain = 8;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->domain(), output);
  }

  // optional string mcc = 9;
  if (has_mcc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mcc().data(), this->mcc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->mcc(), output);
  }

  // optional string mnc = 10;
  if (has_mnc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mnc().data(), this->mnc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mnc(), output);
  }

  // optional string mobile_brand = 11;
  if (has_mobile_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_brand().data(), this->mobile_brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->mobile_brand(), output);
  }

  // optional string usageType = 12;
  if (has_usagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usagetype().data(), this->usagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->usagetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VastRequest_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string countryCode = 2;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countrycode(), target);
  }

  // optional string regionName = 3;
  if (has_regionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regionname().data(), this->regionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->regionname(), target);
  }

  // optional string cityName = 4;
  if (has_cityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cityname().data(), this->cityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cityname(), target);
  }

  // optional string latitude = 5;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->latitude(), target);
  }

  // optional string longitude = 6;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->longitude(), target);
  }

  // optional string isp = 7;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp().data(), this->isp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->isp(), target);
  }

  // optional string domain = 8;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->domain(), target);
  }

  // optional string mcc = 9;
  if (has_mcc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mcc().data(), this->mcc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->mcc(), target);
  }

  // optional string mnc = 10;
  if (has_mnc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mnc().data(), this->mnc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mnc(), target);
  }

  // optional string mobile_brand = 11;
  if (has_mobile_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_brand().data(), this->mobile_brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->mobile_brand(), target);
  }

  // optional string usageType = 12;
  if (has_usagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usagetype().data(), this->usagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->usagetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VastRequest_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string countryCode = 2;
    if (has_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }

    // optional string regionName = 3;
    if (has_regionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regionname());
    }

    // optional string cityName = 4;
    if (has_cityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cityname());
    }

    // optional string latitude = 5;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude());
    }

    // optional string longitude = 6;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude());
    }

    // optional string isp = 7;
    if (has_isp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp());
    }

    // optional string domain = 8;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string mcc = 9;
    if (has_mcc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mcc());
    }

    // optional string mnc = 10;
    if (has_mnc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mnc());
    }

    // optional string mobile_brand = 11;
    if (has_mobile_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_brand());
    }

    // optional string usageType = 12;
    if (has_usagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usagetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VastRequest_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VastRequest_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VastRequest_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VastRequest_User::MergeFrom(const VastRequest_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_countrycode()) {
      set_countrycode(from.countrycode());
    }
    if (from.has_regionname()) {
      set_regionname(from.regionname());
    }
    if (from.has_cityname()) {
      set_cityname(from.cityname());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_isp()) {
      set_isp(from.isp());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mcc()) {
      set_mcc(from.mcc());
    }
    if (from.has_mnc()) {
      set_mnc(from.mnc());
    }
    if (from.has_mobile_brand()) {
      set_mobile_brand(from.mobile_brand());
    }
    if (from.has_usagetype()) {
      set_usagetype(from.usagetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VastRequest_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VastRequest_User::CopyFrom(const VastRequest_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VastRequest_User::IsInitialized() const {

  return true;
}

void VastRequest_User::Swap(VastRequest_User* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(countrycode_, other->countrycode_);
    std::swap(regionname_, other->regionname_);
    std::swap(cityname_, other->cityname_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(isp_, other->isp_);
    std::swap(domain_, other->domain_);
    std::swap(mcc_, other->mcc_);
    std::swap(mnc_, other->mnc_);
    std::swap(mobile_brand_, other->mobile_brand_);
    std::swap(usagetype_, other->usagetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VastRequest_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VastRequest_User_descriptor_;
  metadata.reflection = VastRequest_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VastRequest::kIdFieldNumber;
const int VastRequest::kPlayerFieldNumber;
const int VastRequest::kVideoFieldNumber;
const int VastRequest::kSiteFieldNumber;
const int VastRequest::kDeviceFieldNumber;
const int VastRequest::kUserFieldNumber;
const int VastRequest::kSslFieldNumber;
#endif  // !_MSC_VER

VastRequest::VastRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VastRequest::InitAsDefaultInstance() {
  video_ = const_cast< ::com::rj::protos::msg::VastRequest_Video*>(&::com::rj::protos::msg::VastRequest_Video::default_instance());
  site_ = const_cast< ::com::rj::protos::msg::VastRequest_Site*>(&::com::rj::protos::msg::VastRequest_Site::default_instance());
  device_ = const_cast< ::com::rj::protos::msg::VastRequest_Device*>(&::com::rj::protos::msg::VastRequest_Device::default_instance());
  user_ = const_cast< ::com::rj::protos::msg::VastRequest_User*>(&::com::rj::protos::msg::VastRequest_User::default_instance());
}

VastRequest::VastRequest(const VastRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VastRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  video_ = NULL;
  site_ = NULL;
  device_ = NULL;
  user_ = NULL;
  ssl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VastRequest::~VastRequest() {
  SharedDtor();
}

void VastRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (player_ != &::google::protobuf::internal::kEmptyString) {
    delete player_;
  }
  if (ssl_ != &::google::protobuf::internal::kEmptyString) {
    delete ssl_;
  }
  if (this != default_instance_) {
    delete video_;
    delete site_;
    delete device_;
    delete user_;
  }
}

void VastRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VastRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VastRequest_descriptor_;
}

const VastRequest& VastRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  return *default_instance_;
}

VastRequest* VastRequest::default_instance_ = NULL;

VastRequest* VastRequest::New() const {
  return new VastRequest;
}

void VastRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_player()) {
      if (player_ != &::google::protobuf::internal::kEmptyString) {
        player_->clear();
      }
    }
    if (has_video()) {
      if (video_ != NULL) video_->::com::rj::protos::msg::VastRequest_Video::Clear();
    }
    if (has_site()) {
      if (site_ != NULL) site_->::com::rj::protos::msg::VastRequest_Site::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::com::rj::protos::msg::VastRequest_Device::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::com::rj::protos::msg::VastRequest_User::Clear();
    }
    if (has_ssl()) {
      if (ssl_ != &::google::protobuf::internal::kEmptyString) {
        ssl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VastRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional string player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player().data(), this->player().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_video;
        break;
      }

      // optional .com.rj.protos.msg.VastRequest.Video video = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_site;
        break;
      }

      // optional .com.rj.protos.msg.VastRequest.Site site = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device;
        break;
      }

      // optional .com.rj.protos.msg.VastRequest.Device device = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user;
        break;
      }

      // optional .com.rj.protos.msg.VastRequest.User user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ssl;
        break;
      }

      // optional string ssl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ssl().data(), this->ssl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VastRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player().data(), this->player().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player(), output);
  }

  // optional .com.rj.protos.msg.VastRequest.Video video = 3;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->video(), output);
  }

  // optional .com.rj.protos.msg.VastRequest.Site site = 4;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->site(), output);
  }

  // optional .com.rj.protos.msg.VastRequest.Device device = 5;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device(), output);
  }

  // optional .com.rj.protos.msg.VastRequest.User user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->user(), output);
  }

  // optional string ssl = 7;
  if (has_ssl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ssl().data(), this->ssl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ssl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VastRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player().data(), this->player().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player(), target);
  }

  // optional .com.rj.protos.msg.VastRequest.Video video = 3;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->video(), target);
  }

  // optional .com.rj.protos.msg.VastRequest.Site site = 4;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->site(), target);
  }

  // optional .com.rj.protos.msg.VastRequest.Device device = 5;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device(), target);
  }

  // optional .com.rj.protos.msg.VastRequest.User user = 6;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->user(), target);
  }

  // optional string ssl = 7;
  if (has_ssl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ssl().data(), this->ssl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ssl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VastRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player());
    }

    // optional .com.rj.protos.msg.VastRequest.Video video = 3;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional .com.rj.protos.msg.VastRequest.Site site = 4;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site());
    }

    // optional .com.rj.protos.msg.VastRequest.Device device = 5;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .com.rj.protos.msg.VastRequest.User user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional string ssl = 7;
    if (has_ssl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ssl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VastRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VastRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VastRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VastRequest::MergeFrom(const VastRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_video()) {
      mutable_video()->::com::rj::protos::msg::VastRequest_Video::MergeFrom(from.video());
    }
    if (from.has_site()) {
      mutable_site()->::com::rj::protos::msg::VastRequest_Site::MergeFrom(from.site());
    }
    if (from.has_device()) {
      mutable_device()->::com::rj::protos::msg::VastRequest_Device::MergeFrom(from.device());
    }
    if (from.has_user()) {
      mutable_user()->::com::rj::protos::msg::VastRequest_User::MergeFrom(from.user());
    }
    if (from.has_ssl()) {
      set_ssl(from.ssl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VastRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VastRequest::CopyFrom(const VastRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VastRequest::IsInitialized() const {

  return true;
}

void VastRequest::Swap(VastRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(player_, other->player_);
    std::swap(video_, other->video_);
    std::swap(site_, other->site_);
    std::swap(device_, other->device_);
    std::swap(user_, other->user_);
    std::swap(ssl_, other->ssl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VastRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VastRequest_descriptor_;
  metadata.reflection = VastRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace protos
}  // namespace rj
}  // namespace com

// @@protoc_insertion_point(global_scope)
