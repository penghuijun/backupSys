// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MobileAdRequest.proto

#ifndef PROTOBUF_MobileAdRequest_2eproto__INCLUDED
#define PROTOBUF_MobileAdRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace mobile {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MobileAdRequest_2eproto();
void protobuf_AssignDesc_MobileAdRequest_2eproto();
void protobuf_ShutdownFile_MobileAdRequest_2eproto();

class MobileAdRequest;
class MobileAdRequest_Aid;
class MobileAdRequest_AppSession;
class MobileAdRequest_Frequency;
class MobileAdRequest_Frequency_FrequencyValue;
class MobileAdRequest_AdInsight;
class MobileAdRequest_User;
class MobileAdRequest_Device;
class MobileAdRequest_GeoInfo;

enum MobileAdRequest_TestFlag {
  MobileAdRequest_TestFlag_TRUE = 0,
  MobileAdRequest_TestFlag_FALSE = 1
};
bool MobileAdRequest_TestFlag_IsValid(int value);
const MobileAdRequest_TestFlag MobileAdRequest_TestFlag_TestFlag_MIN = MobileAdRequest_TestFlag_TRUE;
const MobileAdRequest_TestFlag MobileAdRequest_TestFlag_TestFlag_MAX = MobileAdRequest_TestFlag_FALSE;
const int MobileAdRequest_TestFlag_TestFlag_ARRAYSIZE = MobileAdRequest_TestFlag_TestFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_TestFlag_descriptor();
inline const ::std::string& MobileAdRequest_TestFlag_Name(MobileAdRequest_TestFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_TestFlag_descriptor(), value);
}
inline bool MobileAdRequest_TestFlag_Parse(
    const ::std::string& name, MobileAdRequest_TestFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_TestFlag>(
    MobileAdRequest_TestFlag_descriptor(), name, value);
}
enum MobileAdRequest_Gender {
  MobileAdRequest_Gender_UNKNOWN_GENDER = 0,
  MobileAdRequest_Gender_MALE = 1,
  MobileAdRequest_Gender_FEMALE = 2
};
bool MobileAdRequest_Gender_IsValid(int value);
const MobileAdRequest_Gender MobileAdRequest_Gender_Gender_MIN = MobileAdRequest_Gender_UNKNOWN_GENDER;
const MobileAdRequest_Gender MobileAdRequest_Gender_Gender_MAX = MobileAdRequest_Gender_FEMALE;
const int MobileAdRequest_Gender_Gender_ARRAYSIZE = MobileAdRequest_Gender_Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_Gender_descriptor();
inline const ::std::string& MobileAdRequest_Gender_Name(MobileAdRequest_Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_Gender_descriptor(), value);
}
inline bool MobileAdRequest_Gender_Parse(
    const ::std::string& name, MobileAdRequest_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_Gender>(
    MobileAdRequest_Gender_descriptor(), name, value);
}
enum MobileAdRequest_Orientation {
  MobileAdRequest_Orientation_LANDSCAPE = 0,
  MobileAdRequest_Orientation_PORTRAIT = 1
};
bool MobileAdRequest_Orientation_IsValid(int value);
const MobileAdRequest_Orientation MobileAdRequest_Orientation_Orientation_MIN = MobileAdRequest_Orientation_LANDSCAPE;
const MobileAdRequest_Orientation MobileAdRequest_Orientation_Orientation_MAX = MobileAdRequest_Orientation_PORTRAIT;
const int MobileAdRequest_Orientation_Orientation_ARRAYSIZE = MobileAdRequest_Orientation_Orientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_Orientation_descriptor();
inline const ::std::string& MobileAdRequest_Orientation_Name(MobileAdRequest_Orientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_Orientation_descriptor(), value);
}
inline bool MobileAdRequest_Orientation_Parse(
    const ::std::string& name, MobileAdRequest_Orientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_Orientation>(
    MobileAdRequest_Orientation_descriptor(), name, value);
}
enum MobileAdRequest_AdType {
  MobileAdRequest_AdType_BANNER = 0,
  MobileAdRequest_AdType_INTERSTITIAL = 1,
  MobileAdRequest_AdType_NATIVE = 2
};
bool MobileAdRequest_AdType_IsValid(int value);
const MobileAdRequest_AdType MobileAdRequest_AdType_AdType_MIN = MobileAdRequest_AdType_BANNER;
const MobileAdRequest_AdType MobileAdRequest_AdType_AdType_MAX = MobileAdRequest_AdType_NATIVE;
const int MobileAdRequest_AdType_AdType_ARRAYSIZE = MobileAdRequest_AdType_AdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_AdType_descriptor();
inline const ::std::string& MobileAdRequest_AdType_Name(MobileAdRequest_AdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_AdType_descriptor(), value);
}
inline bool MobileAdRequest_AdType_Parse(
    const ::std::string& name, MobileAdRequest_AdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_AdType>(
    MobileAdRequest_AdType_descriptor(), name, value);
}
// ===================================================================

class MobileAdRequest_Aid : public ::google::protobuf::Message {
 public:
  MobileAdRequest_Aid();
  virtual ~MobileAdRequest_Aid();

  MobileAdRequest_Aid(const MobileAdRequest_Aid& from);

  inline MobileAdRequest_Aid& operator=(const MobileAdRequest_Aid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_Aid& default_instance();

  void Swap(MobileAdRequest_Aid* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_Aid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_Aid& from);
  void MergeFrom(const MobileAdRequest_Aid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // optional string networkId = 3;
  inline bool has_networkid() const;
  inline void clear_networkid();
  static const int kNetworkIdFieldNumber = 3;
  inline const ::std::string& networkid() const;
  inline void set_networkid(const ::std::string& value);
  inline void set_networkid(const char* value);
  inline void set_networkid(const char* value, size_t size);
  inline ::std::string* mutable_networkid();
  inline ::std::string* release_networkid();
  inline void set_allocated_networkid(::std::string* networkid);

  // optional string network_reselling = 4;
  inline bool has_network_reselling() const;
  inline void clear_network_reselling();
  static const int kNetworkResellingFieldNumber = 4;
  inline const ::std::string& network_reselling() const;
  inline void set_network_reselling(const ::std::string& value);
  inline void set_network_reselling(const char* value);
  inline void set_network_reselling(const char* value, size_t size);
  inline ::std::string* mutable_network_reselling();
  inline ::std::string* release_network_reselling();
  inline void set_allocated_network_reselling(::std::string* network_reselling);

  // optional string network_reselling_share = 5;
  inline bool has_network_reselling_share() const;
  inline void clear_network_reselling_share();
  static const int kNetworkResellingShareFieldNumber = 5;
  inline const ::std::string& network_reselling_share() const;
  inline void set_network_reselling_share(const ::std::string& value);
  inline void set_network_reselling_share(const char* value);
  inline void set_network_reselling_share(const char* value, size_t size);
  inline ::std::string* mutable_network_reselling_share();
  inline ::std::string* release_network_reselling_share();
  inline void set_allocated_network_reselling_share(::std::string* network_reselling_share);

  // optional string publisher_id = 6;
  inline bool has_publisher_id() const;
  inline void clear_publisher_id();
  static const int kPublisherIdFieldNumber = 6;
  inline const ::std::string& publisher_id() const;
  inline void set_publisher_id(const ::std::string& value);
  inline void set_publisher_id(const char* value);
  inline void set_publisher_id(const char* value, size_t size);
  inline ::std::string* mutable_publisher_id();
  inline ::std::string* release_publisher_id();
  inline void set_allocated_publisher_id(::std::string* publisher_id);

  // optional string app_currency = 7;
  inline bool has_app_currency() const;
  inline void clear_app_currency();
  static const int kAppCurrencyFieldNumber = 7;
  inline const ::std::string& app_currency() const;
  inline void set_app_currency(const ::std::string& value);
  inline void set_app_currency(const char* value);
  inline void set_app_currency(const char* value, size_t size);
  inline ::std::string* mutable_app_currency();
  inline ::std::string* release_app_currency();
  inline void set_allocated_app_currency(::std::string* app_currency);

  // optional string app_resell = 8;
  inline bool has_app_resell() const;
  inline void clear_app_resell();
  static const int kAppResellFieldNumber = 8;
  inline const ::std::string& app_resell() const;
  inline void set_app_resell(const ::std::string& value);
  inline void set_app_resell(const char* value);
  inline void set_app_resell(const char* value, size_t size);
  inline ::std::string* mutable_app_resell();
  inline ::std::string* release_app_resell();
  inline void set_allocated_app_resell(::std::string* app_resell);

  // optional string app_direct_payment_model = 9;
  inline bool has_app_direct_payment_model() const;
  inline void clear_app_direct_payment_model();
  static const int kAppDirectPaymentModelFieldNumber = 9;
  inline const ::std::string& app_direct_payment_model() const;
  inline void set_app_direct_payment_model(const ::std::string& value);
  inline void set_app_direct_payment_model(const char* value);
  inline void set_app_direct_payment_model(const char* value, size_t size);
  inline ::std::string* mutable_app_direct_payment_model();
  inline ::std::string* release_app_direct_payment_model();
  inline void set_allocated_app_direct_payment_model(::std::string* app_direct_payment_model);

  // optional string app_direct_payment_value = 10;
  inline bool has_app_direct_payment_value() const;
  inline void clear_app_direct_payment_value();
  static const int kAppDirectPaymentValueFieldNumber = 10;
  inline const ::std::string& app_direct_payment_value() const;
  inline void set_app_direct_payment_value(const ::std::string& value);
  inline void set_app_direct_payment_value(const char* value);
  inline void set_app_direct_payment_value(const char* value, size_t size);
  inline ::std::string* mutable_app_direct_payment_value();
  inline ::std::string* release_app_direct_payment_value();
  inline void set_allocated_app_direct_payment_value(::std::string* app_direct_payment_value);

  // optional string app_indrect_payment_model = 11;
  inline bool has_app_indrect_payment_model() const;
  inline void clear_app_indrect_payment_model();
  static const int kAppIndrectPaymentModelFieldNumber = 11;
  inline const ::std::string& app_indrect_payment_model() const;
  inline void set_app_indrect_payment_model(const ::std::string& value);
  inline void set_app_indrect_payment_model(const char* value);
  inline void set_app_indrect_payment_model(const char* value, size_t size);
  inline ::std::string* mutable_app_indrect_payment_model();
  inline ::std::string* release_app_indrect_payment_model();
  inline void set_allocated_app_indrect_payment_model(::std::string* app_indrect_payment_model);

  // optional string app_indrect_payment_value = 12;
  inline bool has_app_indrect_payment_value() const;
  inline void clear_app_indrect_payment_value();
  static const int kAppIndrectPaymentValueFieldNumber = 12;
  inline const ::std::string& app_indrect_payment_value() const;
  inline void set_app_indrect_payment_value(const ::std::string& value);
  inline void set_app_indrect_payment_value(const char* value);
  inline void set_app_indrect_payment_value(const char* value, size_t size);
  inline ::std::string* mutable_app_indrect_payment_value();
  inline ::std::string* release_app_indrect_payment_value();
  inline void set_allocated_app_indrect_payment_value(::std::string* app_indrect_payment_value);

  // repeated string app_keywords = 13;
  inline int app_keywords_size() const;
  inline void clear_app_keywords();
  static const int kAppKeywordsFieldNumber = 13;
  inline const ::std::string& app_keywords(int index) const;
  inline ::std::string* mutable_app_keywords(int index);
  inline void set_app_keywords(int index, const ::std::string& value);
  inline void set_app_keywords(int index, const char* value);
  inline void set_app_keywords(int index, const char* value, size_t size);
  inline ::std::string* add_app_keywords();
  inline void add_app_keywords(const ::std::string& value);
  inline void add_app_keywords(const char* value);
  inline void add_app_keywords(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& app_keywords() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_app_keywords();

  // repeated string app_support_language = 14;
  inline int app_support_language_size() const;
  inline void clear_app_support_language();
  static const int kAppSupportLanguageFieldNumber = 14;
  inline const ::std::string& app_support_language(int index) const;
  inline ::std::string* mutable_app_support_language(int index);
  inline void set_app_support_language(int index, const ::std::string& value);
  inline void set_app_support_language(int index, const char* value);
  inline void set_app_support_language(int index, const char* value, size_t size);
  inline ::std::string* add_app_support_language();
  inline void add_app_support_language(const ::std::string& value);
  inline void add_app_support_language(const char* value);
  inline void add_app_support_language(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& app_support_language() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_app_support_language();

  // optional string app_category = 15;
  inline bool has_app_category() const;
  inline void clear_app_category();
  static const int kAppCategoryFieldNumber = 15;
  inline const ::std::string& app_category() const;
  inline void set_app_category(const ::std::string& value);
  inline void set_app_category(const char* value);
  inline void set_app_category(const char* value, size_t size);
  inline ::std::string* mutable_app_category();
  inline ::std::string* release_app_category();
  inline void set_allocated_app_category(::std::string* app_category);

  // optional string app_package_name = 16;
  inline bool has_app_package_name() const;
  inline void clear_app_package_name();
  static const int kAppPackageNameFieldNumber = 16;
  inline const ::std::string& app_package_name() const;
  inline void set_app_package_name(const ::std::string& value);
  inline void set_app_package_name(const char* value);
  inline void set_app_package_name(const char* value, size_t size);
  inline ::std::string* mutable_app_package_name();
  inline ::std::string* release_app_package_name();
  inline void set_allocated_app_package_name(::std::string* app_package_name);

  // optional string app_name = 17;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 17;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // repeated string app_store_url = 18;
  inline int app_store_url_size() const;
  inline void clear_app_store_url();
  static const int kAppStoreUrlFieldNumber = 18;
  inline const ::std::string& app_store_url(int index) const;
  inline ::std::string* mutable_app_store_url(int index);
  inline void set_app_store_url(int index, const ::std::string& value);
  inline void set_app_store_url(int index, const char* value);
  inline void set_app_store_url(int index, const char* value, size_t size);
  inline ::std::string* add_app_store_url();
  inline void add_app_store_url(const ::std::string& value);
  inline void add_app_store_url(const char* value);
  inline void add_app_store_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& app_store_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_app_store_url();

  // optional string app_reviewed = 19;
  inline bool has_app_reviewed() const;
  inline void clear_app_reviewed();
  static const int kAppReviewedFieldNumber = 19;
  inline const ::std::string& app_reviewed() const;
  inline void set_app_reviewed(const ::std::string& value);
  inline void set_app_reviewed(const char* value);
  inline void set_app_reviewed(const char* value, size_t size);
  inline ::std::string* mutable_app_reviewed();
  inline ::std::string* release_app_reviewed();
  inline void set_allocated_app_reviewed(::std::string* app_reviewed);

  // repeated string app_exclude_network = 20;
  inline int app_exclude_network_size() const;
  inline void clear_app_exclude_network();
  static const int kAppExcludeNetworkFieldNumber = 20;
  inline const ::std::string& app_exclude_network(int index) const;
  inline ::std::string* mutable_app_exclude_network(int index);
  inline void set_app_exclude_network(int index, const ::std::string& value);
  inline void set_app_exclude_network(int index, const char* value);
  inline void set_app_exclude_network(int index, const char* value, size_t size);
  inline ::std::string* add_app_exclude_network();
  inline void add_app_exclude_network(const ::std::string& value);
  inline void add_app_exclude_network(const char* value);
  inline void add_app_exclude_network(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& app_exclude_network() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_app_exclude_network();

  // repeated string app_exclude_advertiser = 21;
  inline int app_exclude_advertiser_size() const;
  inline void clear_app_exclude_advertiser();
  static const int kAppExcludeAdvertiserFieldNumber = 21;
  inline const ::std::string& app_exclude_advertiser(int index) const;
  inline ::std::string* mutable_app_exclude_advertiser(int index);
  inline void set_app_exclude_advertiser(int index, const ::std::string& value);
  inline void set_app_exclude_advertiser(int index, const char* value);
  inline void set_app_exclude_advertiser(int index, const char* value, size_t size);
  inline ::std::string* add_app_exclude_advertiser();
  inline void add_app_exclude_advertiser(const ::std::string& value);
  inline void add_app_exclude_advertiser(const char* value);
  inline void add_app_exclude_advertiser(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& app_exclude_advertiser() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_app_exclude_advertiser();

  // repeated string app_exclude_campaign = 22;
  inline int app_exclude_campaign_size() const;
  inline void clear_app_exclude_campaign();
  static const int kAppExcludeCampaignFieldNumber = 22;
  inline const ::std::string& app_exclude_campaign(int index) const;
  inline ::std::string* mutable_app_exclude_campaign(int index);
  inline void set_app_exclude_campaign(int index, const ::std::string& value);
  inline void set_app_exclude_campaign(int index, const char* value);
  inline void set_app_exclude_campaign(int index, const char* value, size_t size);
  inline ::std::string* add_app_exclude_campaign();
  inline void add_app_exclude_campaign(const ::std::string& value);
  inline void add_app_exclude_campaign(const char* value);
  inline void add_app_exclude_campaign(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& app_exclude_campaign() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_app_exclude_campaign();

  // repeated string app_exclude_creative = 23;
  inline int app_exclude_creative_size() const;
  inline void clear_app_exclude_creative();
  static const int kAppExcludeCreativeFieldNumber = 23;
  inline const ::std::string& app_exclude_creative(int index) const;
  inline ::std::string* mutable_app_exclude_creative(int index);
  inline void set_app_exclude_creative(int index, const ::std::string& value);
  inline void set_app_exclude_creative(int index, const char* value);
  inline void set_app_exclude_creative(int index, const char* value, size_t size);
  inline ::std::string* add_app_exclude_creative();
  inline void add_app_exclude_creative(const ::std::string& value);
  inline void add_app_exclude_creative(const char* value);
  inline void add_app_exclude_creative(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& app_exclude_creative() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_app_exclude_creative();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.Aid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_networkid();
  inline void clear_has_networkid();
  inline void set_has_network_reselling();
  inline void clear_has_network_reselling();
  inline void set_has_network_reselling_share();
  inline void clear_has_network_reselling_share();
  inline void set_has_publisher_id();
  inline void clear_has_publisher_id();
  inline void set_has_app_currency();
  inline void clear_has_app_currency();
  inline void set_has_app_resell();
  inline void clear_has_app_resell();
  inline void set_has_app_direct_payment_model();
  inline void clear_has_app_direct_payment_model();
  inline void set_has_app_direct_payment_value();
  inline void clear_has_app_direct_payment_value();
  inline void set_has_app_indrect_payment_model();
  inline void clear_has_app_indrect_payment_model();
  inline void set_has_app_indrect_payment_value();
  inline void clear_has_app_indrect_payment_value();
  inline void set_has_app_category();
  inline void clear_has_app_category();
  inline void set_has_app_package_name();
  inline void clear_has_app_package_name();
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_app_reviewed();
  inline void clear_has_app_reviewed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* status_;
  ::std::string* networkid_;
  ::std::string* network_reselling_;
  ::std::string* network_reselling_share_;
  ::std::string* publisher_id_;
  ::std::string* app_currency_;
  ::std::string* app_resell_;
  ::std::string* app_direct_payment_model_;
  ::std::string* app_direct_payment_value_;
  ::std::string* app_indrect_payment_model_;
  ::std::string* app_indrect_payment_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> app_keywords_;
  ::google::protobuf::RepeatedPtrField< ::std::string> app_support_language_;
  ::std::string* app_category_;
  ::std::string* app_package_name_;
  ::std::string* app_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> app_store_url_;
  ::std::string* app_reviewed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> app_exclude_network_;
  ::google::protobuf::RepeatedPtrField< ::std::string> app_exclude_advertiser_;
  ::google::protobuf::RepeatedPtrField< ::std::string> app_exclude_campaign_;
  ::google::protobuf::RepeatedPtrField< ::std::string> app_exclude_creative_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_Aid* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest_AppSession : public ::google::protobuf::Message {
 public:
  MobileAdRequest_AppSession();
  virtual ~MobileAdRequest_AppSession();

  MobileAdRequest_AppSession(const MobileAdRequest_AppSession& from);

  inline MobileAdRequest_AppSession& operator=(const MobileAdRequest_AppSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_AppSession& default_instance();

  void Swap(MobileAdRequest_AppSession* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_AppSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_AppSession& from);
  void MergeFrom(const MobileAdRequest_AppSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string property = 1;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 1;
  inline const ::std::string& property() const;
  inline void set_property(const ::std::string& value);
  inline void set_property(const char* value);
  inline void set_property(const char* value, size_t size);
  inline ::std::string* mutable_property();
  inline ::std::string* release_property();
  inline void set_allocated_property(::std::string* property);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline const ::std::string& times() const;
  inline void set_times(const ::std::string& value);
  inline void set_times(const char* value);
  inline void set_times(const char* value, size_t size);
  inline ::std::string* mutable_times();
  inline ::std::string* release_times();
  inline void set_allocated_times(::std::string* times);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.AppSession)
 private:
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* property_;
  ::std::string* id_;
  ::std::string* times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_AppSession* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest_Frequency_FrequencyValue : public ::google::protobuf::Message {
 public:
  MobileAdRequest_Frequency_FrequencyValue();
  virtual ~MobileAdRequest_Frequency_FrequencyValue();

  MobileAdRequest_Frequency_FrequencyValue(const MobileAdRequest_Frequency_FrequencyValue& from);

  inline MobileAdRequest_Frequency_FrequencyValue& operator=(const MobileAdRequest_Frequency_FrequencyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_Frequency_FrequencyValue& default_instance();

  void Swap(MobileAdRequest_Frequency_FrequencyValue* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_Frequency_FrequencyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_Frequency_FrequencyValue& from);
  void MergeFrom(const MobileAdRequest_Frequency_FrequencyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string frequencyType = 1;
  inline bool has_frequencytype() const;
  inline void clear_frequencytype();
  static const int kFrequencyTypeFieldNumber = 1;
  inline const ::std::string& frequencytype() const;
  inline void set_frequencytype(const ::std::string& value);
  inline void set_frequencytype(const char* value);
  inline void set_frequencytype(const char* value, size_t size);
  inline ::std::string* mutable_frequencytype();
  inline ::std::string* release_frequencytype();
  inline void set_allocated_frequencytype(::std::string* frequencytype);

  // optional string times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline const ::std::string& times() const;
  inline void set_times(const ::std::string& value);
  inline void set_times(const char* value);
  inline void set_times(const char* value, size_t size);
  inline ::std::string* mutable_times();
  inline ::std::string* release_times();
  inline void set_allocated_times(::std::string* times);

  // optional string dueDate = 3;
  inline bool has_duedate() const;
  inline void clear_duedate();
  static const int kDueDateFieldNumber = 3;
  inline const ::std::string& duedate() const;
  inline void set_duedate(const ::std::string& value);
  inline void set_duedate(const char* value);
  inline void set_duedate(const char* value, size_t size);
  inline ::std::string* mutable_duedate();
  inline ::std::string* release_duedate();
  inline void set_allocated_duedate(::std::string* duedate);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.Frequency.FrequencyValue)
 private:
  inline void set_has_frequencytype();
  inline void clear_has_frequencytype();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_duedate();
  inline void clear_has_duedate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* frequencytype_;
  ::std::string* times_;
  ::std::string* duedate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_Frequency_FrequencyValue* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest_Frequency : public ::google::protobuf::Message {
 public:
  MobileAdRequest_Frequency();
  virtual ~MobileAdRequest_Frequency();

  MobileAdRequest_Frequency(const MobileAdRequest_Frequency& from);

  inline MobileAdRequest_Frequency& operator=(const MobileAdRequest_Frequency& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_Frequency& default_instance();

  void Swap(MobileAdRequest_Frequency* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_Frequency* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_Frequency& from);
  void MergeFrom(const MobileAdRequest_Frequency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdRequest_Frequency_FrequencyValue FrequencyValue;

  // accessors -------------------------------------------------------

  // optional string property = 1;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 1;
  inline const ::std::string& property() const;
  inline void set_property(const ::std::string& value);
  inline void set_property(const char* value);
  inline void set_property(const char* value, size_t size);
  inline ::std::string* mutable_property();
  inline ::std::string* release_property();
  inline void set_allocated_property(::std::string* property);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .com.rj.protos.mobile.MobileAdRequest.Frequency.FrequencyValue frequencyValue = 3;
  inline int frequencyvalue_size() const;
  inline void clear_frequencyvalue();
  static const int kFrequencyValueFieldNumber = 3;
  inline const ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue& frequencyvalue(int index) const;
  inline ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue* mutable_frequencyvalue(int index);
  inline ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue* add_frequencyvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue >&
      frequencyvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue >*
      mutable_frequencyvalue();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.Frequency)
 private:
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* property_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue > frequencyvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_Frequency* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest_AdInsight : public ::google::protobuf::Message {
 public:
  MobileAdRequest_AdInsight();
  virtual ~MobileAdRequest_AdInsight();

  MobileAdRequest_AdInsight(const MobileAdRequest_AdInsight& from);

  inline MobileAdRequest_AdInsight& operator=(const MobileAdRequest_AdInsight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_AdInsight& default_instance();

  void Swap(MobileAdRequest_AdInsight* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_AdInsight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_AdInsight& from);
  void MergeFrom(const MobileAdRequest_AdInsight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string property = 1;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 1;
  inline const ::std::string& property() const;
  inline void set_property(const ::std::string& value);
  inline void set_property(const char* value);
  inline void set_property(const char* value, size_t size);
  inline ::std::string* mutable_property();
  inline ::std::string* release_property();
  inline void set_allocated_property(::std::string* property);

  // repeated string ids = 2;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 2;
  inline const ::std::string& ids(int index) const;
  inline ::std::string* mutable_ids(int index);
  inline void set_ids(int index, const ::std::string& value);
  inline void set_ids(int index, const char* value);
  inline void set_ids(int index, const char* value, size_t size);
  inline ::std::string* add_ids();
  inline void add_ids(const ::std::string& value);
  inline void add_ids(const char* value);
  inline void add_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.AdInsight)
 private:
  inline void set_has_property();
  inline void clear_has_property();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* property_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_AdInsight* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest_User : public ::google::protobuf::Message {
 public:
  MobileAdRequest_User();
  virtual ~MobileAdRequest_User();

  MobileAdRequest_User(const MobileAdRequest_User& from);

  inline MobileAdRequest_User& operator=(const MobileAdRequest_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_User& default_instance();

  void Swap(MobileAdRequest_User* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_User& from);
  void MergeFrom(const MobileAdRequest_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional .com.rj.protos.mobile.MobileAdRequest.Gender gender = 2;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 2;
  inline ::com::rj::protos::mobile::MobileAdRequest_Gender gender() const;
  inline void set_gender(::com::rj::protos::mobile::MobileAdRequest_Gender value);

  // optional string Age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline const ::std::string& age() const;
  inline void set_age(const ::std::string& value);
  inline void set_age(const char* value);
  inline void set_age(const char* value, size_t size);
  inline ::std::string* mutable_age();
  inline ::std::string* release_age();
  inline void set_allocated_age(::std::string* age);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age();
  inline void clear_has_age();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::std::string* age_;
  int gender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_User* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest_Device : public ::google::protobuf::Message {
 public:
  MobileAdRequest_Device();
  virtual ~MobileAdRequest_Device();

  MobileAdRequest_Device(const MobileAdRequest_Device& from);

  inline MobileAdRequest_Device& operator=(const MobileAdRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_Device& default_instance();

  void Swap(MobileAdRequest_Device* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_Device& from);
  void MergeFrom(const MobileAdRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ipAddress = 1;
  inline bool has_ipaddress() const;
  inline void clear_ipaddress();
  static const int kIpAddressFieldNumber = 1;
  inline const ::std::string& ipaddress() const;
  inline void set_ipaddress(const ::std::string& value);
  inline void set_ipaddress(const char* value);
  inline void set_ipaddress(const char* value, size_t size);
  inline ::std::string* mutable_ipaddress();
  inline ::std::string* release_ipaddress();
  inline void set_allocated_ipaddress(::std::string* ipaddress);

  // optional string connectionType = 2;
  inline bool has_connectiontype() const;
  inline void clear_connectiontype();
  static const int kConnectionTypeFieldNumber = 2;
  inline const ::std::string& connectiontype() const;
  inline void set_connectiontype(const ::std::string& value);
  inline void set_connectiontype(const char* value);
  inline void set_connectiontype(const char* value, size_t size);
  inline ::std::string* mutable_connectiontype();
  inline ::std::string* release_connectiontype();
  inline void set_allocated_connectiontype(::std::string* connectiontype);

  // optional string ua = 3;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 3;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // optional string udid = 4;
  inline bool has_udid() const;
  inline void clear_udid();
  static const int kUdidFieldNumber = 4;
  inline const ::std::string& udid() const;
  inline void set_udid(const ::std::string& value);
  inline void set_udid(const char* value);
  inline void set_udid(const char* value, size_t size);
  inline ::std::string* mutable_udid();
  inline ::std::string* release_udid();
  inline void set_allocated_udid(::std::string* udid);

  // optional string hidMd5 = 5;
  inline bool has_hidmd5() const;
  inline void clear_hidmd5();
  static const int kHidMd5FieldNumber = 5;
  inline const ::std::string& hidmd5() const;
  inline void set_hidmd5(const ::std::string& value);
  inline void set_hidmd5(const char* value);
  inline void set_hidmd5(const char* value, size_t size);
  inline ::std::string* mutable_hidmd5();
  inline ::std::string* release_hidmd5();
  inline void set_allocated_hidmd5(::std::string* hidmd5);

  // optional string hidSha1 = 6;
  inline bool has_hidsha1() const;
  inline void clear_hidsha1();
  static const int kHidSha1FieldNumber = 6;
  inline const ::std::string& hidsha1() const;
  inline void set_hidsha1(const ::std::string& value);
  inline void set_hidsha1(const char* value);
  inline void set_hidsha1(const char* value, size_t size);
  inline ::std::string* mutable_hidsha1();
  inline ::std::string* release_hidsha1();
  inline void set_allocated_hidsha1(::std::string* hidsha1);

  // optional string deviceType = 7;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 7;
  inline const ::std::string& devicetype() const;
  inline void set_devicetype(const ::std::string& value);
  inline void set_devicetype(const char* value);
  inline void set_devicetype(const char* value, size_t size);
  inline ::std::string* mutable_devicetype();
  inline ::std::string* release_devicetype();
  inline void set_allocated_devicetype(::std::string* devicetype);

  // optional string platform = 8;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 8;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string platformVersion = 9;
  inline bool has_platformversion() const;
  inline void clear_platformversion();
  static const int kPlatformVersionFieldNumber = 9;
  inline const ::std::string& platformversion() const;
  inline void set_platformversion(const ::std::string& value);
  inline void set_platformversion(const char* value);
  inline void set_platformversion(const char* value, size_t size);
  inline ::std::string* mutable_platformversion();
  inline ::std::string* release_platformversion();
  inline void set_allocated_platformversion(::std::string* platformversion);

  // optional string language = 10;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 10;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string vender = 11;
  inline bool has_vender() const;
  inline void clear_vender();
  static const int kVenderFieldNumber = 11;
  inline const ::std::string& vender() const;
  inline void set_vender(const ::std::string& value);
  inline void set_vender(const char* value);
  inline void set_vender(const char* value, size_t size);
  inline ::std::string* mutable_vender();
  inline ::std::string* release_vender();
  inline void set_allocated_vender(::std::string* vender);

  // optional string modelName = 12;
  inline bool has_modelname() const;
  inline void clear_modelname();
  static const int kModelNameFieldNumber = 12;
  inline const ::std::string& modelname() const;
  inline void set_modelname(const ::std::string& value);
  inline void set_modelname(const char* value);
  inline void set_modelname(const char* value, size_t size);
  inline ::std::string* mutable_modelname();
  inline ::std::string* release_modelname();
  inline void set_allocated_modelname(::std::string* modelname);

  // optional string marketingName = 13;
  inline bool has_marketingname() const;
  inline void clear_marketingname();
  static const int kMarketingNameFieldNumber = 13;
  inline const ::std::string& marketingname() const;
  inline void set_marketingname(const ::std::string& value);
  inline void set_marketingname(const char* value);
  inline void set_marketingname(const char* value, size_t size);
  inline ::std::string* mutable_marketingname();
  inline ::std::string* release_marketingname();
  inline void set_allocated_marketingname(::std::string* marketingname);

  // optional string screenWidth = 14;
  inline bool has_screenwidth() const;
  inline void clear_screenwidth();
  static const int kScreenWidthFieldNumber = 14;
  inline const ::std::string& screenwidth() const;
  inline void set_screenwidth(const ::std::string& value);
  inline void set_screenwidth(const char* value);
  inline void set_screenwidth(const char* value, size_t size);
  inline ::std::string* mutable_screenwidth();
  inline ::std::string* release_screenwidth();
  inline void set_allocated_screenwidth(::std::string* screenwidth);

  // optional string screenHeight = 15;
  inline bool has_screenheight() const;
  inline void clear_screenheight();
  static const int kScreenHeightFieldNumber = 15;
  inline const ::std::string& screenheight() const;
  inline void set_screenheight(const ::std::string& value);
  inline void set_screenheight(const char* value);
  inline void set_screenheight(const char* value, size_t size);
  inline ::std::string* mutable_screenheight();
  inline ::std::string* release_screenheight();
  inline void set_allocated_screenheight(::std::string* screenheight);

  // optional string density = 16;
  inline bool has_density() const;
  inline void clear_density();
  static const int kDensityFieldNumber = 16;
  inline const ::std::string& density() const;
  inline void set_density(const ::std::string& value);
  inline void set_density(const char* value);
  inline void set_density(const char* value, size_t size);
  inline ::std::string* mutable_density();
  inline ::std::string* release_density();
  inline void set_allocated_density(::std::string* density);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.Device)
 private:
  inline void set_has_ipaddress();
  inline void clear_has_ipaddress();
  inline void set_has_connectiontype();
  inline void clear_has_connectiontype();
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_udid();
  inline void clear_has_udid();
  inline void set_has_hidmd5();
  inline void clear_has_hidmd5();
  inline void set_has_hidsha1();
  inline void clear_has_hidsha1();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_platformversion();
  inline void clear_has_platformversion();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_vender();
  inline void clear_has_vender();
  inline void set_has_modelname();
  inline void clear_has_modelname();
  inline void set_has_marketingname();
  inline void clear_has_marketingname();
  inline void set_has_screenwidth();
  inline void clear_has_screenwidth();
  inline void set_has_screenheight();
  inline void clear_has_screenheight();
  inline void set_has_density();
  inline void clear_has_density();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ipaddress_;
  ::std::string* connectiontype_;
  ::std::string* ua_;
  ::std::string* udid_;
  ::std::string* hidmd5_;
  ::std::string* hidsha1_;
  ::std::string* devicetype_;
  ::std::string* platform_;
  ::std::string* platformversion_;
  ::std::string* language_;
  ::std::string* vender_;
  ::std::string* modelname_;
  ::std::string* marketingname_;
  ::std::string* screenwidth_;
  ::std::string* screenheight_;
  ::std::string* density_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest_GeoInfo : public ::google::protobuf::Message {
 public:
  MobileAdRequest_GeoInfo();
  virtual ~MobileAdRequest_GeoInfo();

  MobileAdRequest_GeoInfo(const MobileAdRequest_GeoInfo& from);

  inline MobileAdRequest_GeoInfo& operator=(const MobileAdRequest_GeoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_GeoInfo& default_instance();

  void Swap(MobileAdRequest_GeoInfo* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_GeoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_GeoInfo& from);
  void MergeFrom(const MobileAdRequest_GeoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline const ::std::string& region() const;
  inline void set_region(const ::std::string& value);
  inline void set_region(const char* value);
  inline void set_region(const char* value, size_t size);
  inline ::std::string* mutable_region();
  inline ::std::string* release_region();
  inline void set_allocated_region(::std::string* region);

  // optional string city = 3;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 3;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string latitude = 4;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  inline const ::std::string& latitude() const;
  inline void set_latitude(const ::std::string& value);
  inline void set_latitude(const char* value);
  inline void set_latitude(const char* value, size_t size);
  inline ::std::string* mutable_latitude();
  inline ::std::string* release_latitude();
  inline void set_allocated_latitude(::std::string* latitude);

  // optional string longitude = 5;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 5;
  inline const ::std::string& longitude() const;
  inline void set_longitude(const ::std::string& value);
  inline void set_longitude(const char* value);
  inline void set_longitude(const char* value, size_t size);
  inline ::std::string* mutable_longitude();
  inline ::std::string* release_longitude();
  inline void set_allocated_longitude(::std::string* longitude);

  // optional string isp = 6;
  inline bool has_isp() const;
  inline void clear_isp();
  static const int kIspFieldNumber = 6;
  inline const ::std::string& isp() const;
  inline void set_isp(const ::std::string& value);
  inline void set_isp(const char* value);
  inline void set_isp(const char* value, size_t size);
  inline ::std::string* mutable_isp();
  inline ::std::string* release_isp();
  inline void set_allocated_isp(::std::string* isp);

  // optional string domain = 7;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 7;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional string mcc = 8;
  inline bool has_mcc() const;
  inline void clear_mcc();
  static const int kMccFieldNumber = 8;
  inline const ::std::string& mcc() const;
  inline void set_mcc(const ::std::string& value);
  inline void set_mcc(const char* value);
  inline void set_mcc(const char* value, size_t size);
  inline ::std::string* mutable_mcc();
  inline ::std::string* release_mcc();
  inline void set_allocated_mcc(::std::string* mcc);

  // optional string mnc = 9;
  inline bool has_mnc() const;
  inline void clear_mnc();
  static const int kMncFieldNumber = 9;
  inline const ::std::string& mnc() const;
  inline void set_mnc(const ::std::string& value);
  inline void set_mnc(const char* value);
  inline void set_mnc(const char* value, size_t size);
  inline ::std::string* mutable_mnc();
  inline ::std::string* release_mnc();
  inline void set_allocated_mnc(::std::string* mnc);

  // optional string usage_type = 10;
  inline bool has_usage_type() const;
  inline void clear_usage_type();
  static const int kUsageTypeFieldNumber = 10;
  inline const ::std::string& usage_type() const;
  inline void set_usage_type(const ::std::string& value);
  inline void set_usage_type(const char* value);
  inline void set_usage_type(const char* value, size_t size);
  inline ::std::string* mutable_usage_type();
  inline ::std::string* release_usage_type();
  inline void set_allocated_usage_type(::std::string* usage_type);

  // optional string carrier = 11;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 11;
  inline const ::std::string& carrier() const;
  inline void set_carrier(const ::std::string& value);
  inline void set_carrier(const char* value);
  inline void set_carrier(const char* value, size_t size);
  inline ::std::string* mutable_carrier();
  inline ::std::string* release_carrier();
  inline void set_allocated_carrier(::std::string* carrier);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.GeoInfo)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_isp();
  inline void clear_has_isp();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_mcc();
  inline void clear_has_mcc();
  inline void set_has_mnc();
  inline void clear_has_mnc();
  inline void set_has_usage_type();
  inline void clear_has_usage_type();
  inline void set_has_carrier();
  inline void clear_has_carrier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* country_;
  ::std::string* region_;
  ::std::string* city_;
  ::std::string* latitude_;
  ::std::string* longitude_;
  ::std::string* isp_;
  ::std::string* domain_;
  ::std::string* mcc_;
  ::std::string* mnc_;
  ::std::string* usage_type_;
  ::std::string* carrier_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_GeoInfo* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest : public ::google::protobuf::Message {
 public:
  MobileAdRequest();
  virtual ~MobileAdRequest();

  MobileAdRequest(const MobileAdRequest& from);

  inline MobileAdRequest& operator=(const MobileAdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest& default_instance();

  void Swap(MobileAdRequest* other);

  // implements Message ----------------------------------------------

  MobileAdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest& from);
  void MergeFrom(const MobileAdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdRequest_Aid Aid;
  typedef MobileAdRequest_AppSession AppSession;
  typedef MobileAdRequest_Frequency Frequency;
  typedef MobileAdRequest_AdInsight AdInsight;
  typedef MobileAdRequest_User User;
  typedef MobileAdRequest_Device Device;
  typedef MobileAdRequest_GeoInfo GeoInfo;

  typedef MobileAdRequest_TestFlag TestFlag;
  static const TestFlag TRUE = MobileAdRequest_TestFlag_TRUE;
  static const TestFlag FALSE = MobileAdRequest_TestFlag_FALSE;
  static inline bool TestFlag_IsValid(int value) {
    return MobileAdRequest_TestFlag_IsValid(value);
  }
  static const TestFlag TestFlag_MIN =
    MobileAdRequest_TestFlag_TestFlag_MIN;
  static const TestFlag TestFlag_MAX =
    MobileAdRequest_TestFlag_TestFlag_MAX;
  static const int TestFlag_ARRAYSIZE =
    MobileAdRequest_TestFlag_TestFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TestFlag_descriptor() {
    return MobileAdRequest_TestFlag_descriptor();
  }
  static inline const ::std::string& TestFlag_Name(TestFlag value) {
    return MobileAdRequest_TestFlag_Name(value);
  }
  static inline bool TestFlag_Parse(const ::std::string& name,
      TestFlag* value) {
    return MobileAdRequest_TestFlag_Parse(name, value);
  }

  typedef MobileAdRequest_Gender Gender;
  static const Gender UNKNOWN_GENDER = MobileAdRequest_Gender_UNKNOWN_GENDER;
  static const Gender MALE = MobileAdRequest_Gender_MALE;
  static const Gender FEMALE = MobileAdRequest_Gender_FEMALE;
  static inline bool Gender_IsValid(int value) {
    return MobileAdRequest_Gender_IsValid(value);
  }
  static const Gender Gender_MIN =
    MobileAdRequest_Gender_Gender_MIN;
  static const Gender Gender_MAX =
    MobileAdRequest_Gender_Gender_MAX;
  static const int Gender_ARRAYSIZE =
    MobileAdRequest_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gender_descriptor() {
    return MobileAdRequest_Gender_descriptor();
  }
  static inline const ::std::string& Gender_Name(Gender value) {
    return MobileAdRequest_Gender_Name(value);
  }
  static inline bool Gender_Parse(const ::std::string& name,
      Gender* value) {
    return MobileAdRequest_Gender_Parse(name, value);
  }

  typedef MobileAdRequest_Orientation Orientation;
  static const Orientation LANDSCAPE = MobileAdRequest_Orientation_LANDSCAPE;
  static const Orientation PORTRAIT = MobileAdRequest_Orientation_PORTRAIT;
  static inline bool Orientation_IsValid(int value) {
    return MobileAdRequest_Orientation_IsValid(value);
  }
  static const Orientation Orientation_MIN =
    MobileAdRequest_Orientation_Orientation_MIN;
  static const Orientation Orientation_MAX =
    MobileAdRequest_Orientation_Orientation_MAX;
  static const int Orientation_ARRAYSIZE =
    MobileAdRequest_Orientation_Orientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Orientation_descriptor() {
    return MobileAdRequest_Orientation_descriptor();
  }
  static inline const ::std::string& Orientation_Name(Orientation value) {
    return MobileAdRequest_Orientation_Name(value);
  }
  static inline bool Orientation_Parse(const ::std::string& name,
      Orientation* value) {
    return MobileAdRequest_Orientation_Parse(name, value);
  }

  typedef MobileAdRequest_AdType AdType;
  static const AdType BANNER = MobileAdRequest_AdType_BANNER;
  static const AdType INTERSTITIAL = MobileAdRequest_AdType_INTERSTITIAL;
  static const AdType NATIVE = MobileAdRequest_AdType_NATIVE;
  static inline bool AdType_IsValid(int value) {
    return MobileAdRequest_AdType_IsValid(value);
  }
  static const AdType AdType_MIN =
    MobileAdRequest_AdType_AdType_MIN;
  static const AdType AdType_MAX =
    MobileAdRequest_AdType_AdType_MAX;
  static const int AdType_ARRAYSIZE =
    MobileAdRequest_AdType_AdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdType_descriptor() {
    return MobileAdRequest_AdType_descriptor();
  }
  static inline const ::std::string& AdType_Name(AdType value) {
    return MobileAdRequest_AdType_Name(value);
  }
  static inline bool AdType_Parse(const ::std::string& name,
      AdType* value) {
    return MobileAdRequest_AdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string publishId = 2;
  inline bool has_publishid() const;
  inline void clear_publishid();
  static const int kPublishIdFieldNumber = 2;
  inline const ::std::string& publishid() const;
  inline void set_publishid(const ::std::string& value);
  inline void set_publishid(const char* value);
  inline void set_publishid(const char* value, size_t size);
  inline ::std::string* mutable_publishid();
  inline ::std::string* release_publishid();
  inline void set_allocated_publishid(::std::string* publishid);

  // optional string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional .com.rj.protos.mobile.MobileAdRequest.AdType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::com::rj::protos::mobile::MobileAdRequest_AdType type() const;
  inline void set_type(::com::rj::protos::mobile::MobileAdRequest_AdType value);

  // optional string timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional string adspaceWidth = 6;
  inline bool has_adspacewidth() const;
  inline void clear_adspacewidth();
  static const int kAdspaceWidthFieldNumber = 6;
  inline const ::std::string& adspacewidth() const;
  inline void set_adspacewidth(const ::std::string& value);
  inline void set_adspacewidth(const char* value);
  inline void set_adspacewidth(const char* value, size_t size);
  inline ::std::string* mutable_adspacewidth();
  inline ::std::string* release_adspacewidth();
  inline void set_allocated_adspacewidth(::std::string* adspacewidth);

  // optional string adspaceHeight = 7;
  inline bool has_adspaceheight() const;
  inline void clear_adspaceheight();
  static const int kAdspaceHeightFieldNumber = 7;
  inline const ::std::string& adspaceheight() const;
  inline void set_adspaceheight(const ::std::string& value);
  inline void set_adspaceheight(const char* value);
  inline void set_adspaceheight(const char* value, size_t size);
  inline ::std::string* mutable_adspaceheight();
  inline ::std::string* release_adspaceheight();
  inline void set_allocated_adspaceheight(::std::string* adspaceheight);

  // optional .com.rj.protos.mobile.MobileAdRequest.Orientation orientation = 8;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 8;
  inline ::com::rj::protos::mobile::MobileAdRequest_Orientation orientation() const;
  inline void set_orientation(::com::rj::protos::mobile::MobileAdRequest_Orientation value);

  // optional string packageName = 9;
  inline bool has_packagename() const;
  inline void clear_packagename();
  static const int kPackageNameFieldNumber = 9;
  inline const ::std::string& packagename() const;
  inline void set_packagename(const ::std::string& value);
  inline void set_packagename(const char* value);
  inline void set_packagename(const char* value, size_t size);
  inline ::std::string* mutable_packagename();
  inline ::std::string* release_packagename();
  inline void set_allocated_packagename(::std::string* packagename);

  // optional string schema = 10;
  inline bool has_schema() const;
  inline void clear_schema();
  static const int kSchemaFieldNumber = 10;
  inline const ::std::string& schema() const;
  inline void set_schema(const ::std::string& value);
  inline void set_schema(const char* value);
  inline void set_schema(const char* value, size_t size);
  inline ::std::string* mutable_schema();
  inline ::std::string* release_schema();
  inline void set_allocated_schema(::std::string* schema);

  // optional string section = 11;
  inline bool has_section() const;
  inline void clear_section();
  static const int kSectionFieldNumber = 11;
  inline const ::std::string& section() const;
  inline void set_section(const ::std::string& value);
  inline void set_section(const char* value);
  inline void set_section(const char* value, size_t size);
  inline ::std::string* mutable_section();
  inline ::std::string* release_section();
  inline void set_allocated_section(::std::string* section);

  // optional string session = 12;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 12;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  inline void set_allocated_session(::std::string* session);

  // optional string dnsIp = 13;
  inline bool has_dnsip() const;
  inline void clear_dnsip();
  static const int kDnsIpFieldNumber = 13;
  inline const ::std::string& dnsip() const;
  inline void set_dnsip(const ::std::string& value);
  inline void set_dnsip(const char* value);
  inline void set_dnsip(const char* value, size_t size);
  inline ::std::string* mutable_dnsip();
  inline ::std::string* release_dnsip();
  inline void set_allocated_dnsip(::std::string* dnsip);

  // optional .com.rj.protos.mobile.MobileAdRequest.Device device = 14;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 14;
  inline const ::com::rj::protos::mobile::MobileAdRequest_Device& device() const;
  inline ::com::rj::protos::mobile::MobileAdRequest_Device* mutable_device();
  inline ::com::rj::protos::mobile::MobileAdRequest_Device* release_device();
  inline void set_allocated_device(::com::rj::protos::mobile::MobileAdRequest_Device* device);

  // optional .com.rj.protos.mobile.MobileAdRequest.User user = 15;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 15;
  inline const ::com::rj::protos::mobile::MobileAdRequest_User& user() const;
  inline ::com::rj::protos::mobile::MobileAdRequest_User* mutable_user();
  inline ::com::rj::protos::mobile::MobileAdRequest_User* release_user();
  inline void set_allocated_user(::com::rj::protos::mobile::MobileAdRequest_User* user);

  // optional .com.rj.protos.mobile.MobileAdRequest.GeoInfo geoInfo = 16;
  inline bool has_geoinfo() const;
  inline void clear_geoinfo();
  static const int kGeoInfoFieldNumber = 16;
  inline const ::com::rj::protos::mobile::MobileAdRequest_GeoInfo& geoinfo() const;
  inline ::com::rj::protos::mobile::MobileAdRequest_GeoInfo* mutable_geoinfo();
  inline ::com::rj::protos::mobile::MobileAdRequest_GeoInfo* release_geoinfo();
  inline void set_allocated_geoinfo(::com::rj::protos::mobile::MobileAdRequest_GeoInfo* geoinfo);

  // repeated .com.rj.protos.mobile.MobileAdRequest.Frequency frequency = 17;
  inline int frequency_size() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 17;
  inline const ::com::rj::protos::mobile::MobileAdRequest_Frequency& frequency(int index) const;
  inline ::com::rj::protos::mobile::MobileAdRequest_Frequency* mutable_frequency(int index);
  inline ::com::rj::protos::mobile::MobileAdRequest_Frequency* add_frequency();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency >&
      frequency() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency >*
      mutable_frequency();

  // repeated .com.rj.protos.mobile.MobileAdRequest.AppSession appSession = 18;
  inline int appsession_size() const;
  inline void clear_appsession();
  static const int kAppSessionFieldNumber = 18;
  inline const ::com::rj::protos::mobile::MobileAdRequest_AppSession& appsession(int index) const;
  inline ::com::rj::protos::mobile::MobileAdRequest_AppSession* mutable_appsession(int index);
  inline ::com::rj::protos::mobile::MobileAdRequest_AppSession* add_appsession();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AppSession >&
      appsession() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AppSession >*
      mutable_appsession();

  // repeated .com.rj.protos.mobile.MobileAdRequest.AdInsight adInsight = 19;
  inline int adinsight_size() const;
  inline void clear_adinsight();
  static const int kAdInsightFieldNumber = 19;
  inline const ::com::rj::protos::mobile::MobileAdRequest_AdInsight& adinsight(int index) const;
  inline ::com::rj::protos::mobile::MobileAdRequest_AdInsight* mutable_adinsight(int index);
  inline ::com::rj::protos::mobile::MobileAdRequest_AdInsight* add_adinsight();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AdInsight >&
      adinsight() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AdInsight >*
      mutable_adinsight();

  // optional string appType = 20;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kAppTypeFieldNumber = 20;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // optional string trafficQuality = 21;
  inline bool has_trafficquality() const;
  inline void clear_trafficquality();
  static const int kTrafficQualityFieldNumber = 21;
  inline const ::std::string& trafficquality() const;
  inline void set_trafficquality(const ::std::string& value);
  inline void set_trafficquality(const char* value);
  inline void set_trafficquality(const char* value, size_t size);
  inline ::std::string* mutable_trafficquality();
  inline ::std::string* release_trafficquality();
  inline void set_allocated_trafficquality(::std::string* trafficquality);

  // optional string inventoryQuality = 22;
  inline bool has_inventoryquality() const;
  inline void clear_inventoryquality();
  static const int kInventoryQualityFieldNumber = 22;
  inline const ::std::string& inventoryquality() const;
  inline void set_inventoryquality(const ::std::string& value);
  inline void set_inventoryquality(const char* value);
  inline void set_inventoryquality(const char* value, size_t size);
  inline ::std::string* mutable_inventoryquality();
  inline ::std::string* release_inventoryquality();
  inline void set_allocated_inventoryquality(::std::string* inventoryquality);

  // optional .com.rj.protos.mobile.MobileAdRequest.TestFlag test = 23;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 23;
  inline ::com::rj::protos::mobile::MobileAdRequest_TestFlag test() const;
  inline void set_test(::com::rj::protos::mobile::MobileAdRequest_TestFlag value);

  // optional string appID = 24;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppIDFieldNumber = 24;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // optional string appCategory = 25;
  inline bool has_appcategory() const;
  inline void clear_appcategory();
  static const int kAppCategoryFieldNumber = 25;
  inline const ::std::string& appcategory() const;
  inline void set_appcategory(const ::std::string& value);
  inline void set_appcategory(const char* value);
  inline void set_appcategory(const char* value, size_t size);
  inline ::std::string* mutable_appcategory();
  inline ::std::string* release_appcategory();
  inline void set_allocated_appcategory(::std::string* appcategory);

  // optional .com.rj.protos.mobile.MobileAdRequest.Aid aid = 26;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 26;
  inline const ::com::rj::protos::mobile::MobileAdRequest_Aid& aid() const;
  inline ::com::rj::protos::mobile::MobileAdRequest_Aid* mutable_aid();
  inline ::com::rj::protos::mobile::MobileAdRequest_Aid* release_aid();
  inline void set_allocated_aid(::com::rj::protos::mobile::MobileAdRequest_Aid* aid);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_publishid();
  inline void clear_has_publishid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_adspacewidth();
  inline void clear_has_adspacewidth();
  inline void set_has_adspaceheight();
  inline void clear_has_adspaceheight();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_packagename();
  inline void clear_has_packagename();
  inline void set_has_schema();
  inline void clear_has_schema();
  inline void set_has_section();
  inline void clear_has_section();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_dnsip();
  inline void clear_has_dnsip();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_geoinfo();
  inline void clear_has_geoinfo();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_trafficquality();
  inline void clear_has_trafficquality();
  inline void set_has_inventoryquality();
  inline void clear_has_inventoryquality();
  inline void set_has_test();
  inline void clear_has_test();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appcategory();
  inline void clear_has_appcategory();
  inline void set_has_aid();
  inline void clear_has_aid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* publishid_;
  ::std::string* version_;
  ::std::string* timestamp_;
  ::std::string* adspacewidth_;
  int type_;
  int orientation_;
  ::std::string* adspaceheight_;
  ::std::string* packagename_;
  ::std::string* schema_;
  ::std::string* section_;
  ::std::string* session_;
  ::std::string* dnsip_;
  ::com::rj::protos::mobile::MobileAdRequest_Device* device_;
  ::com::rj::protos::mobile::MobileAdRequest_User* user_;
  ::com::rj::protos::mobile::MobileAdRequest_GeoInfo* geoinfo_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency > frequency_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AppSession > appsession_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AdInsight > adinsight_;
  ::std::string* apptype_;
  ::std::string* trafficquality_;
  ::std::string* inventoryquality_;
  ::std::string* appid_;
  ::std::string* appcategory_;
  ::com::rj::protos::mobile::MobileAdRequest_Aid* aid_;
  int test_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdRequest_2eproto();
  friend void protobuf_AssignDesc_MobileAdRequest_2eproto();
  friend void protobuf_ShutdownFile_MobileAdRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// MobileAdRequest_Aid

// optional string id = 1;
inline bool MobileAdRequest_Aid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_Aid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_Aid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_Aid::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdRequest_Aid::id() const {
  return *id_;
}
inline void MobileAdRequest_Aid::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest_Aid::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest_Aid::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdRequest_Aid::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string status = 2;
inline bool MobileAdRequest_Aid::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_Aid::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_Aid::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_Aid::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& MobileAdRequest_Aid::status() const {
  return *status_;
}
inline void MobileAdRequest_Aid::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void MobileAdRequest_Aid::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void MobileAdRequest_Aid::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* MobileAdRequest_Aid::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string networkId = 3;
inline bool MobileAdRequest_Aid::has_networkid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest_Aid::set_has_networkid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest_Aid::clear_has_networkid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest_Aid::clear_networkid() {
  if (networkid_ != &::google::protobuf::internal::kEmptyString) {
    networkid_->clear();
  }
  clear_has_networkid();
}
inline const ::std::string& MobileAdRequest_Aid::networkid() const {
  return *networkid_;
}
inline void MobileAdRequest_Aid::set_networkid(const ::std::string& value) {
  set_has_networkid();
  if (networkid_ == &::google::protobuf::internal::kEmptyString) {
    networkid_ = new ::std::string;
  }
  networkid_->assign(value);
}
inline void MobileAdRequest_Aid::set_networkid(const char* value) {
  set_has_networkid();
  if (networkid_ == &::google::protobuf::internal::kEmptyString) {
    networkid_ = new ::std::string;
  }
  networkid_->assign(value);
}
inline void MobileAdRequest_Aid::set_networkid(const char* value, size_t size) {
  set_has_networkid();
  if (networkid_ == &::google::protobuf::internal::kEmptyString) {
    networkid_ = new ::std::string;
  }
  networkid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_networkid() {
  set_has_networkid();
  if (networkid_ == &::google::protobuf::internal::kEmptyString) {
    networkid_ = new ::std::string;
  }
  return networkid_;
}
inline ::std::string* MobileAdRequest_Aid::release_networkid() {
  clear_has_networkid();
  if (networkid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = networkid_;
    networkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_networkid(::std::string* networkid) {
  if (networkid_ != &::google::protobuf::internal::kEmptyString) {
    delete networkid_;
  }
  if (networkid) {
    set_has_networkid();
    networkid_ = networkid;
  } else {
    clear_has_networkid();
    networkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string network_reselling = 4;
inline bool MobileAdRequest_Aid::has_network_reselling() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdRequest_Aid::set_has_network_reselling() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdRequest_Aid::clear_has_network_reselling() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdRequest_Aid::clear_network_reselling() {
  if (network_reselling_ != &::google::protobuf::internal::kEmptyString) {
    network_reselling_->clear();
  }
  clear_has_network_reselling();
}
inline const ::std::string& MobileAdRequest_Aid::network_reselling() const {
  return *network_reselling_;
}
inline void MobileAdRequest_Aid::set_network_reselling(const ::std::string& value) {
  set_has_network_reselling();
  if (network_reselling_ == &::google::protobuf::internal::kEmptyString) {
    network_reselling_ = new ::std::string;
  }
  network_reselling_->assign(value);
}
inline void MobileAdRequest_Aid::set_network_reselling(const char* value) {
  set_has_network_reselling();
  if (network_reselling_ == &::google::protobuf::internal::kEmptyString) {
    network_reselling_ = new ::std::string;
  }
  network_reselling_->assign(value);
}
inline void MobileAdRequest_Aid::set_network_reselling(const char* value, size_t size) {
  set_has_network_reselling();
  if (network_reselling_ == &::google::protobuf::internal::kEmptyString) {
    network_reselling_ = new ::std::string;
  }
  network_reselling_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_network_reselling() {
  set_has_network_reselling();
  if (network_reselling_ == &::google::protobuf::internal::kEmptyString) {
    network_reselling_ = new ::std::string;
  }
  return network_reselling_;
}
inline ::std::string* MobileAdRequest_Aid::release_network_reselling() {
  clear_has_network_reselling();
  if (network_reselling_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = network_reselling_;
    network_reselling_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_network_reselling(::std::string* network_reselling) {
  if (network_reselling_ != &::google::protobuf::internal::kEmptyString) {
    delete network_reselling_;
  }
  if (network_reselling) {
    set_has_network_reselling();
    network_reselling_ = network_reselling;
  } else {
    clear_has_network_reselling();
    network_reselling_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string network_reselling_share = 5;
inline bool MobileAdRequest_Aid::has_network_reselling_share() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdRequest_Aid::set_has_network_reselling_share() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdRequest_Aid::clear_has_network_reselling_share() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdRequest_Aid::clear_network_reselling_share() {
  if (network_reselling_share_ != &::google::protobuf::internal::kEmptyString) {
    network_reselling_share_->clear();
  }
  clear_has_network_reselling_share();
}
inline const ::std::string& MobileAdRequest_Aid::network_reselling_share() const {
  return *network_reselling_share_;
}
inline void MobileAdRequest_Aid::set_network_reselling_share(const ::std::string& value) {
  set_has_network_reselling_share();
  if (network_reselling_share_ == &::google::protobuf::internal::kEmptyString) {
    network_reselling_share_ = new ::std::string;
  }
  network_reselling_share_->assign(value);
}
inline void MobileAdRequest_Aid::set_network_reselling_share(const char* value) {
  set_has_network_reselling_share();
  if (network_reselling_share_ == &::google::protobuf::internal::kEmptyString) {
    network_reselling_share_ = new ::std::string;
  }
  network_reselling_share_->assign(value);
}
inline void MobileAdRequest_Aid::set_network_reselling_share(const char* value, size_t size) {
  set_has_network_reselling_share();
  if (network_reselling_share_ == &::google::protobuf::internal::kEmptyString) {
    network_reselling_share_ = new ::std::string;
  }
  network_reselling_share_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_network_reselling_share() {
  set_has_network_reselling_share();
  if (network_reselling_share_ == &::google::protobuf::internal::kEmptyString) {
    network_reselling_share_ = new ::std::string;
  }
  return network_reselling_share_;
}
inline ::std::string* MobileAdRequest_Aid::release_network_reselling_share() {
  clear_has_network_reselling_share();
  if (network_reselling_share_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = network_reselling_share_;
    network_reselling_share_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_network_reselling_share(::std::string* network_reselling_share) {
  if (network_reselling_share_ != &::google::protobuf::internal::kEmptyString) {
    delete network_reselling_share_;
  }
  if (network_reselling_share) {
    set_has_network_reselling_share();
    network_reselling_share_ = network_reselling_share;
  } else {
    clear_has_network_reselling_share();
    network_reselling_share_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string publisher_id = 6;
inline bool MobileAdRequest_Aid::has_publisher_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdRequest_Aid::set_has_publisher_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdRequest_Aid::clear_has_publisher_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdRequest_Aid::clear_publisher_id() {
  if (publisher_id_ != &::google::protobuf::internal::kEmptyString) {
    publisher_id_->clear();
  }
  clear_has_publisher_id();
}
inline const ::std::string& MobileAdRequest_Aid::publisher_id() const {
  return *publisher_id_;
}
inline void MobileAdRequest_Aid::set_publisher_id(const ::std::string& value) {
  set_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::kEmptyString) {
    publisher_id_ = new ::std::string;
  }
  publisher_id_->assign(value);
}
inline void MobileAdRequest_Aid::set_publisher_id(const char* value) {
  set_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::kEmptyString) {
    publisher_id_ = new ::std::string;
  }
  publisher_id_->assign(value);
}
inline void MobileAdRequest_Aid::set_publisher_id(const char* value, size_t size) {
  set_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::kEmptyString) {
    publisher_id_ = new ::std::string;
  }
  publisher_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_publisher_id() {
  set_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::kEmptyString) {
    publisher_id_ = new ::std::string;
  }
  return publisher_id_;
}
inline ::std::string* MobileAdRequest_Aid::release_publisher_id() {
  clear_has_publisher_id();
  if (publisher_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = publisher_id_;
    publisher_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_publisher_id(::std::string* publisher_id) {
  if (publisher_id_ != &::google::protobuf::internal::kEmptyString) {
    delete publisher_id_;
  }
  if (publisher_id) {
    set_has_publisher_id();
    publisher_id_ = publisher_id;
  } else {
    clear_has_publisher_id();
    publisher_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_currency = 7;
inline bool MobileAdRequest_Aid::has_app_currency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_currency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdRequest_Aid::clear_has_app_currency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdRequest_Aid::clear_app_currency() {
  if (app_currency_ != &::google::protobuf::internal::kEmptyString) {
    app_currency_->clear();
  }
  clear_has_app_currency();
}
inline const ::std::string& MobileAdRequest_Aid::app_currency() const {
  return *app_currency_;
}
inline void MobileAdRequest_Aid::set_app_currency(const ::std::string& value) {
  set_has_app_currency();
  if (app_currency_ == &::google::protobuf::internal::kEmptyString) {
    app_currency_ = new ::std::string;
  }
  app_currency_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_currency(const char* value) {
  set_has_app_currency();
  if (app_currency_ == &::google::protobuf::internal::kEmptyString) {
    app_currency_ = new ::std::string;
  }
  app_currency_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_currency(const char* value, size_t size) {
  set_has_app_currency();
  if (app_currency_ == &::google::protobuf::internal::kEmptyString) {
    app_currency_ = new ::std::string;
  }
  app_currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_currency() {
  set_has_app_currency();
  if (app_currency_ == &::google::protobuf::internal::kEmptyString) {
    app_currency_ = new ::std::string;
  }
  return app_currency_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_currency() {
  clear_has_app_currency();
  if (app_currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_currency_;
    app_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_currency(::std::string* app_currency) {
  if (app_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete app_currency_;
  }
  if (app_currency) {
    set_has_app_currency();
    app_currency_ = app_currency;
  } else {
    clear_has_app_currency();
    app_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_resell = 8;
inline bool MobileAdRequest_Aid::has_app_resell() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_resell() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdRequest_Aid::clear_has_app_resell() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdRequest_Aid::clear_app_resell() {
  if (app_resell_ != &::google::protobuf::internal::kEmptyString) {
    app_resell_->clear();
  }
  clear_has_app_resell();
}
inline const ::std::string& MobileAdRequest_Aid::app_resell() const {
  return *app_resell_;
}
inline void MobileAdRequest_Aid::set_app_resell(const ::std::string& value) {
  set_has_app_resell();
  if (app_resell_ == &::google::protobuf::internal::kEmptyString) {
    app_resell_ = new ::std::string;
  }
  app_resell_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_resell(const char* value) {
  set_has_app_resell();
  if (app_resell_ == &::google::protobuf::internal::kEmptyString) {
    app_resell_ = new ::std::string;
  }
  app_resell_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_resell(const char* value, size_t size) {
  set_has_app_resell();
  if (app_resell_ == &::google::protobuf::internal::kEmptyString) {
    app_resell_ = new ::std::string;
  }
  app_resell_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_resell() {
  set_has_app_resell();
  if (app_resell_ == &::google::protobuf::internal::kEmptyString) {
    app_resell_ = new ::std::string;
  }
  return app_resell_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_resell() {
  clear_has_app_resell();
  if (app_resell_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_resell_;
    app_resell_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_resell(::std::string* app_resell) {
  if (app_resell_ != &::google::protobuf::internal::kEmptyString) {
    delete app_resell_;
  }
  if (app_resell) {
    set_has_app_resell();
    app_resell_ = app_resell;
  } else {
    clear_has_app_resell();
    app_resell_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_direct_payment_model = 9;
inline bool MobileAdRequest_Aid::has_app_direct_payment_model() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_direct_payment_model() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdRequest_Aid::clear_has_app_direct_payment_model() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdRequest_Aid::clear_app_direct_payment_model() {
  if (app_direct_payment_model_ != &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_model_->clear();
  }
  clear_has_app_direct_payment_model();
}
inline const ::std::string& MobileAdRequest_Aid::app_direct_payment_model() const {
  return *app_direct_payment_model_;
}
inline void MobileAdRequest_Aid::set_app_direct_payment_model(const ::std::string& value) {
  set_has_app_direct_payment_model();
  if (app_direct_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_model_ = new ::std::string;
  }
  app_direct_payment_model_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_direct_payment_model(const char* value) {
  set_has_app_direct_payment_model();
  if (app_direct_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_model_ = new ::std::string;
  }
  app_direct_payment_model_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_direct_payment_model(const char* value, size_t size) {
  set_has_app_direct_payment_model();
  if (app_direct_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_model_ = new ::std::string;
  }
  app_direct_payment_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_direct_payment_model() {
  set_has_app_direct_payment_model();
  if (app_direct_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_model_ = new ::std::string;
  }
  return app_direct_payment_model_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_direct_payment_model() {
  clear_has_app_direct_payment_model();
  if (app_direct_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_direct_payment_model_;
    app_direct_payment_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_direct_payment_model(::std::string* app_direct_payment_model) {
  if (app_direct_payment_model_ != &::google::protobuf::internal::kEmptyString) {
    delete app_direct_payment_model_;
  }
  if (app_direct_payment_model) {
    set_has_app_direct_payment_model();
    app_direct_payment_model_ = app_direct_payment_model;
  } else {
    clear_has_app_direct_payment_model();
    app_direct_payment_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_direct_payment_value = 10;
inline bool MobileAdRequest_Aid::has_app_direct_payment_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_direct_payment_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdRequest_Aid::clear_has_app_direct_payment_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdRequest_Aid::clear_app_direct_payment_value() {
  if (app_direct_payment_value_ != &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_value_->clear();
  }
  clear_has_app_direct_payment_value();
}
inline const ::std::string& MobileAdRequest_Aid::app_direct_payment_value() const {
  return *app_direct_payment_value_;
}
inline void MobileAdRequest_Aid::set_app_direct_payment_value(const ::std::string& value) {
  set_has_app_direct_payment_value();
  if (app_direct_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_value_ = new ::std::string;
  }
  app_direct_payment_value_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_direct_payment_value(const char* value) {
  set_has_app_direct_payment_value();
  if (app_direct_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_value_ = new ::std::string;
  }
  app_direct_payment_value_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_direct_payment_value(const char* value, size_t size) {
  set_has_app_direct_payment_value();
  if (app_direct_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_value_ = new ::std::string;
  }
  app_direct_payment_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_direct_payment_value() {
  set_has_app_direct_payment_value();
  if (app_direct_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    app_direct_payment_value_ = new ::std::string;
  }
  return app_direct_payment_value_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_direct_payment_value() {
  clear_has_app_direct_payment_value();
  if (app_direct_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_direct_payment_value_;
    app_direct_payment_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_direct_payment_value(::std::string* app_direct_payment_value) {
  if (app_direct_payment_value_ != &::google::protobuf::internal::kEmptyString) {
    delete app_direct_payment_value_;
  }
  if (app_direct_payment_value) {
    set_has_app_direct_payment_value();
    app_direct_payment_value_ = app_direct_payment_value;
  } else {
    clear_has_app_direct_payment_value();
    app_direct_payment_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_indrect_payment_model = 11;
inline bool MobileAdRequest_Aid::has_app_indrect_payment_model() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_indrect_payment_model() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdRequest_Aid::clear_has_app_indrect_payment_model() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdRequest_Aid::clear_app_indrect_payment_model() {
  if (app_indrect_payment_model_ != &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_model_->clear();
  }
  clear_has_app_indrect_payment_model();
}
inline const ::std::string& MobileAdRequest_Aid::app_indrect_payment_model() const {
  return *app_indrect_payment_model_;
}
inline void MobileAdRequest_Aid::set_app_indrect_payment_model(const ::std::string& value) {
  set_has_app_indrect_payment_model();
  if (app_indrect_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_model_ = new ::std::string;
  }
  app_indrect_payment_model_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_indrect_payment_model(const char* value) {
  set_has_app_indrect_payment_model();
  if (app_indrect_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_model_ = new ::std::string;
  }
  app_indrect_payment_model_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_indrect_payment_model(const char* value, size_t size) {
  set_has_app_indrect_payment_model();
  if (app_indrect_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_model_ = new ::std::string;
  }
  app_indrect_payment_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_indrect_payment_model() {
  set_has_app_indrect_payment_model();
  if (app_indrect_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_model_ = new ::std::string;
  }
  return app_indrect_payment_model_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_indrect_payment_model() {
  clear_has_app_indrect_payment_model();
  if (app_indrect_payment_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_indrect_payment_model_;
    app_indrect_payment_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_indrect_payment_model(::std::string* app_indrect_payment_model) {
  if (app_indrect_payment_model_ != &::google::protobuf::internal::kEmptyString) {
    delete app_indrect_payment_model_;
  }
  if (app_indrect_payment_model) {
    set_has_app_indrect_payment_model();
    app_indrect_payment_model_ = app_indrect_payment_model;
  } else {
    clear_has_app_indrect_payment_model();
    app_indrect_payment_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_indrect_payment_value = 12;
inline bool MobileAdRequest_Aid::has_app_indrect_payment_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_indrect_payment_value() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileAdRequest_Aid::clear_has_app_indrect_payment_value() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileAdRequest_Aid::clear_app_indrect_payment_value() {
  if (app_indrect_payment_value_ != &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_value_->clear();
  }
  clear_has_app_indrect_payment_value();
}
inline const ::std::string& MobileAdRequest_Aid::app_indrect_payment_value() const {
  return *app_indrect_payment_value_;
}
inline void MobileAdRequest_Aid::set_app_indrect_payment_value(const ::std::string& value) {
  set_has_app_indrect_payment_value();
  if (app_indrect_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_value_ = new ::std::string;
  }
  app_indrect_payment_value_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_indrect_payment_value(const char* value) {
  set_has_app_indrect_payment_value();
  if (app_indrect_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_value_ = new ::std::string;
  }
  app_indrect_payment_value_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_indrect_payment_value(const char* value, size_t size) {
  set_has_app_indrect_payment_value();
  if (app_indrect_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_value_ = new ::std::string;
  }
  app_indrect_payment_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_indrect_payment_value() {
  set_has_app_indrect_payment_value();
  if (app_indrect_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    app_indrect_payment_value_ = new ::std::string;
  }
  return app_indrect_payment_value_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_indrect_payment_value() {
  clear_has_app_indrect_payment_value();
  if (app_indrect_payment_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_indrect_payment_value_;
    app_indrect_payment_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_indrect_payment_value(::std::string* app_indrect_payment_value) {
  if (app_indrect_payment_value_ != &::google::protobuf::internal::kEmptyString) {
    delete app_indrect_payment_value_;
  }
  if (app_indrect_payment_value) {
    set_has_app_indrect_payment_value();
    app_indrect_payment_value_ = app_indrect_payment_value;
  } else {
    clear_has_app_indrect_payment_value();
    app_indrect_payment_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string app_keywords = 13;
inline int MobileAdRequest_Aid::app_keywords_size() const {
  return app_keywords_.size();
}
inline void MobileAdRequest_Aid::clear_app_keywords() {
  app_keywords_.Clear();
}
inline const ::std::string& MobileAdRequest_Aid::app_keywords(int index) const {
  return app_keywords_.Get(index);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_keywords(int index) {
  return app_keywords_.Mutable(index);
}
inline void MobileAdRequest_Aid::set_app_keywords(int index, const ::std::string& value) {
  app_keywords_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_keywords(int index, const char* value) {
  app_keywords_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_keywords(int index, const char* value, size_t size) {
  app_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::add_app_keywords() {
  return app_keywords_.Add();
}
inline void MobileAdRequest_Aid::add_app_keywords(const ::std::string& value) {
  app_keywords_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_keywords(const char* value) {
  app_keywords_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_keywords(const char* value, size_t size) {
  app_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdRequest_Aid::app_keywords() const {
  return app_keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdRequest_Aid::mutable_app_keywords() {
  return &app_keywords_;
}

// repeated string app_support_language = 14;
inline int MobileAdRequest_Aid::app_support_language_size() const {
  return app_support_language_.size();
}
inline void MobileAdRequest_Aid::clear_app_support_language() {
  app_support_language_.Clear();
}
inline const ::std::string& MobileAdRequest_Aid::app_support_language(int index) const {
  return app_support_language_.Get(index);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_support_language(int index) {
  return app_support_language_.Mutable(index);
}
inline void MobileAdRequest_Aid::set_app_support_language(int index, const ::std::string& value) {
  app_support_language_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_support_language(int index, const char* value) {
  app_support_language_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_support_language(int index, const char* value, size_t size) {
  app_support_language_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::add_app_support_language() {
  return app_support_language_.Add();
}
inline void MobileAdRequest_Aid::add_app_support_language(const ::std::string& value) {
  app_support_language_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_support_language(const char* value) {
  app_support_language_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_support_language(const char* value, size_t size) {
  app_support_language_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdRequest_Aid::app_support_language() const {
  return app_support_language_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdRequest_Aid::mutable_app_support_language() {
  return &app_support_language_;
}

// optional string app_category = 15;
inline bool MobileAdRequest_Aid::has_app_category() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_category() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileAdRequest_Aid::clear_has_app_category() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileAdRequest_Aid::clear_app_category() {
  if (app_category_ != &::google::protobuf::internal::kEmptyString) {
    app_category_->clear();
  }
  clear_has_app_category();
}
inline const ::std::string& MobileAdRequest_Aid::app_category() const {
  return *app_category_;
}
inline void MobileAdRequest_Aid::set_app_category(const ::std::string& value) {
  set_has_app_category();
  if (app_category_ == &::google::protobuf::internal::kEmptyString) {
    app_category_ = new ::std::string;
  }
  app_category_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_category(const char* value) {
  set_has_app_category();
  if (app_category_ == &::google::protobuf::internal::kEmptyString) {
    app_category_ = new ::std::string;
  }
  app_category_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_category(const char* value, size_t size) {
  set_has_app_category();
  if (app_category_ == &::google::protobuf::internal::kEmptyString) {
    app_category_ = new ::std::string;
  }
  app_category_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_category() {
  set_has_app_category();
  if (app_category_ == &::google::protobuf::internal::kEmptyString) {
    app_category_ = new ::std::string;
  }
  return app_category_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_category() {
  clear_has_app_category();
  if (app_category_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_category_;
    app_category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_category(::std::string* app_category) {
  if (app_category_ != &::google::protobuf::internal::kEmptyString) {
    delete app_category_;
  }
  if (app_category) {
    set_has_app_category();
    app_category_ = app_category;
  } else {
    clear_has_app_category();
    app_category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_package_name = 16;
inline bool MobileAdRequest_Aid::has_app_package_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_package_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MobileAdRequest_Aid::clear_has_app_package_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MobileAdRequest_Aid::clear_app_package_name() {
  if (app_package_name_ != &::google::protobuf::internal::kEmptyString) {
    app_package_name_->clear();
  }
  clear_has_app_package_name();
}
inline const ::std::string& MobileAdRequest_Aid::app_package_name() const {
  return *app_package_name_;
}
inline void MobileAdRequest_Aid::set_app_package_name(const ::std::string& value) {
  set_has_app_package_name();
  if (app_package_name_ == &::google::protobuf::internal::kEmptyString) {
    app_package_name_ = new ::std::string;
  }
  app_package_name_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_package_name(const char* value) {
  set_has_app_package_name();
  if (app_package_name_ == &::google::protobuf::internal::kEmptyString) {
    app_package_name_ = new ::std::string;
  }
  app_package_name_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_package_name(const char* value, size_t size) {
  set_has_app_package_name();
  if (app_package_name_ == &::google::protobuf::internal::kEmptyString) {
    app_package_name_ = new ::std::string;
  }
  app_package_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_package_name() {
  set_has_app_package_name();
  if (app_package_name_ == &::google::protobuf::internal::kEmptyString) {
    app_package_name_ = new ::std::string;
  }
  return app_package_name_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_package_name() {
  clear_has_app_package_name();
  if (app_package_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_package_name_;
    app_package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_package_name(::std::string* app_package_name) {
  if (app_package_name_ != &::google::protobuf::internal::kEmptyString) {
    delete app_package_name_;
  }
  if (app_package_name) {
    set_has_app_package_name();
    app_package_name_ = app_package_name;
  } else {
    clear_has_app_package_name();
    app_package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_name = 17;
inline bool MobileAdRequest_Aid::has_app_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MobileAdRequest_Aid::clear_has_app_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MobileAdRequest_Aid::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& MobileAdRequest_Aid::app_name() const {
  return *app_name_;
}
inline void MobileAdRequest_Aid::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  return app_name_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string app_store_url = 18;
inline int MobileAdRequest_Aid::app_store_url_size() const {
  return app_store_url_.size();
}
inline void MobileAdRequest_Aid::clear_app_store_url() {
  app_store_url_.Clear();
}
inline const ::std::string& MobileAdRequest_Aid::app_store_url(int index) const {
  return app_store_url_.Get(index);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_store_url(int index) {
  return app_store_url_.Mutable(index);
}
inline void MobileAdRequest_Aid::set_app_store_url(int index, const ::std::string& value) {
  app_store_url_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_store_url(int index, const char* value) {
  app_store_url_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_store_url(int index, const char* value, size_t size) {
  app_store_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::add_app_store_url() {
  return app_store_url_.Add();
}
inline void MobileAdRequest_Aid::add_app_store_url(const ::std::string& value) {
  app_store_url_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_store_url(const char* value) {
  app_store_url_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_store_url(const char* value, size_t size) {
  app_store_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdRequest_Aid::app_store_url() const {
  return app_store_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdRequest_Aid::mutable_app_store_url() {
  return &app_store_url_;
}

// optional string app_reviewed = 19;
inline bool MobileAdRequest_Aid::has_app_reviewed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MobileAdRequest_Aid::set_has_app_reviewed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MobileAdRequest_Aid::clear_has_app_reviewed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MobileAdRequest_Aid::clear_app_reviewed() {
  if (app_reviewed_ != &::google::protobuf::internal::kEmptyString) {
    app_reviewed_->clear();
  }
  clear_has_app_reviewed();
}
inline const ::std::string& MobileAdRequest_Aid::app_reviewed() const {
  return *app_reviewed_;
}
inline void MobileAdRequest_Aid::set_app_reviewed(const ::std::string& value) {
  set_has_app_reviewed();
  if (app_reviewed_ == &::google::protobuf::internal::kEmptyString) {
    app_reviewed_ = new ::std::string;
  }
  app_reviewed_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_reviewed(const char* value) {
  set_has_app_reviewed();
  if (app_reviewed_ == &::google::protobuf::internal::kEmptyString) {
    app_reviewed_ = new ::std::string;
  }
  app_reviewed_->assign(value);
}
inline void MobileAdRequest_Aid::set_app_reviewed(const char* value, size_t size) {
  set_has_app_reviewed();
  if (app_reviewed_ == &::google::protobuf::internal::kEmptyString) {
    app_reviewed_ = new ::std::string;
  }
  app_reviewed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_reviewed() {
  set_has_app_reviewed();
  if (app_reviewed_ == &::google::protobuf::internal::kEmptyString) {
    app_reviewed_ = new ::std::string;
  }
  return app_reviewed_;
}
inline ::std::string* MobileAdRequest_Aid::release_app_reviewed() {
  clear_has_app_reviewed();
  if (app_reviewed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_reviewed_;
    app_reviewed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Aid::set_allocated_app_reviewed(::std::string* app_reviewed) {
  if (app_reviewed_ != &::google::protobuf::internal::kEmptyString) {
    delete app_reviewed_;
  }
  if (app_reviewed) {
    set_has_app_reviewed();
    app_reviewed_ = app_reviewed;
  } else {
    clear_has_app_reviewed();
    app_reviewed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string app_exclude_network = 20;
inline int MobileAdRequest_Aid::app_exclude_network_size() const {
  return app_exclude_network_.size();
}
inline void MobileAdRequest_Aid::clear_app_exclude_network() {
  app_exclude_network_.Clear();
}
inline const ::std::string& MobileAdRequest_Aid::app_exclude_network(int index) const {
  return app_exclude_network_.Get(index);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_exclude_network(int index) {
  return app_exclude_network_.Mutable(index);
}
inline void MobileAdRequest_Aid::set_app_exclude_network(int index, const ::std::string& value) {
  app_exclude_network_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_exclude_network(int index, const char* value) {
  app_exclude_network_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_exclude_network(int index, const char* value, size_t size) {
  app_exclude_network_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::add_app_exclude_network() {
  return app_exclude_network_.Add();
}
inline void MobileAdRequest_Aid::add_app_exclude_network(const ::std::string& value) {
  app_exclude_network_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_exclude_network(const char* value) {
  app_exclude_network_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_exclude_network(const char* value, size_t size) {
  app_exclude_network_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdRequest_Aid::app_exclude_network() const {
  return app_exclude_network_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdRequest_Aid::mutable_app_exclude_network() {
  return &app_exclude_network_;
}

// repeated string app_exclude_advertiser = 21;
inline int MobileAdRequest_Aid::app_exclude_advertiser_size() const {
  return app_exclude_advertiser_.size();
}
inline void MobileAdRequest_Aid::clear_app_exclude_advertiser() {
  app_exclude_advertiser_.Clear();
}
inline const ::std::string& MobileAdRequest_Aid::app_exclude_advertiser(int index) const {
  return app_exclude_advertiser_.Get(index);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_exclude_advertiser(int index) {
  return app_exclude_advertiser_.Mutable(index);
}
inline void MobileAdRequest_Aid::set_app_exclude_advertiser(int index, const ::std::string& value) {
  app_exclude_advertiser_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_exclude_advertiser(int index, const char* value) {
  app_exclude_advertiser_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_exclude_advertiser(int index, const char* value, size_t size) {
  app_exclude_advertiser_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::add_app_exclude_advertiser() {
  return app_exclude_advertiser_.Add();
}
inline void MobileAdRequest_Aid::add_app_exclude_advertiser(const ::std::string& value) {
  app_exclude_advertiser_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_exclude_advertiser(const char* value) {
  app_exclude_advertiser_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_exclude_advertiser(const char* value, size_t size) {
  app_exclude_advertiser_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdRequest_Aid::app_exclude_advertiser() const {
  return app_exclude_advertiser_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdRequest_Aid::mutable_app_exclude_advertiser() {
  return &app_exclude_advertiser_;
}

// repeated string app_exclude_campaign = 22;
inline int MobileAdRequest_Aid::app_exclude_campaign_size() const {
  return app_exclude_campaign_.size();
}
inline void MobileAdRequest_Aid::clear_app_exclude_campaign() {
  app_exclude_campaign_.Clear();
}
inline const ::std::string& MobileAdRequest_Aid::app_exclude_campaign(int index) const {
  return app_exclude_campaign_.Get(index);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_exclude_campaign(int index) {
  return app_exclude_campaign_.Mutable(index);
}
inline void MobileAdRequest_Aid::set_app_exclude_campaign(int index, const ::std::string& value) {
  app_exclude_campaign_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_exclude_campaign(int index, const char* value) {
  app_exclude_campaign_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_exclude_campaign(int index, const char* value, size_t size) {
  app_exclude_campaign_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::add_app_exclude_campaign() {
  return app_exclude_campaign_.Add();
}
inline void MobileAdRequest_Aid::add_app_exclude_campaign(const ::std::string& value) {
  app_exclude_campaign_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_exclude_campaign(const char* value) {
  app_exclude_campaign_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_exclude_campaign(const char* value, size_t size) {
  app_exclude_campaign_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdRequest_Aid::app_exclude_campaign() const {
  return app_exclude_campaign_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdRequest_Aid::mutable_app_exclude_campaign() {
  return &app_exclude_campaign_;
}

// repeated string app_exclude_creative = 23;
inline int MobileAdRequest_Aid::app_exclude_creative_size() const {
  return app_exclude_creative_.size();
}
inline void MobileAdRequest_Aid::clear_app_exclude_creative() {
  app_exclude_creative_.Clear();
}
inline const ::std::string& MobileAdRequest_Aid::app_exclude_creative(int index) const {
  return app_exclude_creative_.Get(index);
}
inline ::std::string* MobileAdRequest_Aid::mutable_app_exclude_creative(int index) {
  return app_exclude_creative_.Mutable(index);
}
inline void MobileAdRequest_Aid::set_app_exclude_creative(int index, const ::std::string& value) {
  app_exclude_creative_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_exclude_creative(int index, const char* value) {
  app_exclude_creative_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_Aid::set_app_exclude_creative(int index, const char* value, size_t size) {
  app_exclude_creative_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Aid::add_app_exclude_creative() {
  return app_exclude_creative_.Add();
}
inline void MobileAdRequest_Aid::add_app_exclude_creative(const ::std::string& value) {
  app_exclude_creative_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_exclude_creative(const char* value) {
  app_exclude_creative_.Add()->assign(value);
}
inline void MobileAdRequest_Aid::add_app_exclude_creative(const char* value, size_t size) {
  app_exclude_creative_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdRequest_Aid::app_exclude_creative() const {
  return app_exclude_creative_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdRequest_Aid::mutable_app_exclude_creative() {
  return &app_exclude_creative_;
}

// -------------------------------------------------------------------

// MobileAdRequest_AppSession

// optional string property = 1;
inline bool MobileAdRequest_AppSession::has_property() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_AppSession::set_has_property() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_AppSession::clear_has_property() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_AppSession::clear_property() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    property_->clear();
  }
  clear_has_property();
}
inline const ::std::string& MobileAdRequest_AppSession::property() const {
  return *property_;
}
inline void MobileAdRequest_AppSession::set_property(const ::std::string& value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void MobileAdRequest_AppSession::set_property(const char* value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void MobileAdRequest_AppSession::set_property(const char* value, size_t size) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_AppSession::mutable_property() {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  return property_;
}
inline ::std::string* MobileAdRequest_AppSession::release_property() {
  clear_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = property_;
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_AppSession::set_allocated_property(::std::string* property) {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (property) {
    set_has_property();
    property_ = property;
  } else {
    clear_has_property();
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool MobileAdRequest_AppSession::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_AppSession::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_AppSession::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_AppSession::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdRequest_AppSession::id() const {
  return *id_;
}
inline void MobileAdRequest_AppSession::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest_AppSession::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest_AppSession::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_AppSession::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdRequest_AppSession::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_AppSession::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string times = 3;
inline bool MobileAdRequest_AppSession::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest_AppSession::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest_AppSession::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest_AppSession::clear_times() {
  if (times_ != &::google::protobuf::internal::kEmptyString) {
    times_->clear();
  }
  clear_has_times();
}
inline const ::std::string& MobileAdRequest_AppSession::times() const {
  return *times_;
}
inline void MobileAdRequest_AppSession::set_times(const ::std::string& value) {
  set_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    times_ = new ::std::string;
  }
  times_->assign(value);
}
inline void MobileAdRequest_AppSession::set_times(const char* value) {
  set_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    times_ = new ::std::string;
  }
  times_->assign(value);
}
inline void MobileAdRequest_AppSession::set_times(const char* value, size_t size) {
  set_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    times_ = new ::std::string;
  }
  times_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_AppSession::mutable_times() {
  set_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    times_ = new ::std::string;
  }
  return times_;
}
inline ::std::string* MobileAdRequest_AppSession::release_times() {
  clear_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = times_;
    times_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_AppSession::set_allocated_times(::std::string* times) {
  if (times_ != &::google::protobuf::internal::kEmptyString) {
    delete times_;
  }
  if (times) {
    set_has_times();
    times_ = times;
  } else {
    clear_has_times();
    times_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdRequest_Frequency_FrequencyValue

// optional string frequencyType = 1;
inline bool MobileAdRequest_Frequency_FrequencyValue::has_frequencytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_has_frequencytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_Frequency_FrequencyValue::clear_has_frequencytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_Frequency_FrequencyValue::clear_frequencytype() {
  if (frequencytype_ != &::google::protobuf::internal::kEmptyString) {
    frequencytype_->clear();
  }
  clear_has_frequencytype();
}
inline const ::std::string& MobileAdRequest_Frequency_FrequencyValue::frequencytype() const {
  return *frequencytype_;
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_frequencytype(const ::std::string& value) {
  set_has_frequencytype();
  if (frequencytype_ == &::google::protobuf::internal::kEmptyString) {
    frequencytype_ = new ::std::string;
  }
  frequencytype_->assign(value);
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_frequencytype(const char* value) {
  set_has_frequencytype();
  if (frequencytype_ == &::google::protobuf::internal::kEmptyString) {
    frequencytype_ = new ::std::string;
  }
  frequencytype_->assign(value);
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_frequencytype(const char* value, size_t size) {
  set_has_frequencytype();
  if (frequencytype_ == &::google::protobuf::internal::kEmptyString) {
    frequencytype_ = new ::std::string;
  }
  frequencytype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Frequency_FrequencyValue::mutable_frequencytype() {
  set_has_frequencytype();
  if (frequencytype_ == &::google::protobuf::internal::kEmptyString) {
    frequencytype_ = new ::std::string;
  }
  return frequencytype_;
}
inline ::std::string* MobileAdRequest_Frequency_FrequencyValue::release_frequencytype() {
  clear_has_frequencytype();
  if (frequencytype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frequencytype_;
    frequencytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_allocated_frequencytype(::std::string* frequencytype) {
  if (frequencytype_ != &::google::protobuf::internal::kEmptyString) {
    delete frequencytype_;
  }
  if (frequencytype) {
    set_has_frequencytype();
    frequencytype_ = frequencytype;
  } else {
    clear_has_frequencytype();
    frequencytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string times = 2;
inline bool MobileAdRequest_Frequency_FrequencyValue::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_Frequency_FrequencyValue::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_Frequency_FrequencyValue::clear_times() {
  if (times_ != &::google::protobuf::internal::kEmptyString) {
    times_->clear();
  }
  clear_has_times();
}
inline const ::std::string& MobileAdRequest_Frequency_FrequencyValue::times() const {
  return *times_;
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_times(const ::std::string& value) {
  set_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    times_ = new ::std::string;
  }
  times_->assign(value);
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_times(const char* value) {
  set_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    times_ = new ::std::string;
  }
  times_->assign(value);
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_times(const char* value, size_t size) {
  set_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    times_ = new ::std::string;
  }
  times_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Frequency_FrequencyValue::mutable_times() {
  set_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    times_ = new ::std::string;
  }
  return times_;
}
inline ::std::string* MobileAdRequest_Frequency_FrequencyValue::release_times() {
  clear_has_times();
  if (times_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = times_;
    times_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_allocated_times(::std::string* times) {
  if (times_ != &::google::protobuf::internal::kEmptyString) {
    delete times_;
  }
  if (times) {
    set_has_times();
    times_ = times;
  } else {
    clear_has_times();
    times_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dueDate = 3;
inline bool MobileAdRequest_Frequency_FrequencyValue::has_duedate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_has_duedate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest_Frequency_FrequencyValue::clear_has_duedate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest_Frequency_FrequencyValue::clear_duedate() {
  if (duedate_ != &::google::protobuf::internal::kEmptyString) {
    duedate_->clear();
  }
  clear_has_duedate();
}
inline const ::std::string& MobileAdRequest_Frequency_FrequencyValue::duedate() const {
  return *duedate_;
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_duedate(const ::std::string& value) {
  set_has_duedate();
  if (duedate_ == &::google::protobuf::internal::kEmptyString) {
    duedate_ = new ::std::string;
  }
  duedate_->assign(value);
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_duedate(const char* value) {
  set_has_duedate();
  if (duedate_ == &::google::protobuf::internal::kEmptyString) {
    duedate_ = new ::std::string;
  }
  duedate_->assign(value);
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_duedate(const char* value, size_t size) {
  set_has_duedate();
  if (duedate_ == &::google::protobuf::internal::kEmptyString) {
    duedate_ = new ::std::string;
  }
  duedate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Frequency_FrequencyValue::mutable_duedate() {
  set_has_duedate();
  if (duedate_ == &::google::protobuf::internal::kEmptyString) {
    duedate_ = new ::std::string;
  }
  return duedate_;
}
inline ::std::string* MobileAdRequest_Frequency_FrequencyValue::release_duedate() {
  clear_has_duedate();
  if (duedate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duedate_;
    duedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Frequency_FrequencyValue::set_allocated_duedate(::std::string* duedate) {
  if (duedate_ != &::google::protobuf::internal::kEmptyString) {
    delete duedate_;
  }
  if (duedate) {
    set_has_duedate();
    duedate_ = duedate;
  } else {
    clear_has_duedate();
    duedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdRequest_Frequency

// optional string property = 1;
inline bool MobileAdRequest_Frequency::has_property() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_Frequency::set_has_property() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_Frequency::clear_has_property() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_Frequency::clear_property() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    property_->clear();
  }
  clear_has_property();
}
inline const ::std::string& MobileAdRequest_Frequency::property() const {
  return *property_;
}
inline void MobileAdRequest_Frequency::set_property(const ::std::string& value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void MobileAdRequest_Frequency::set_property(const char* value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void MobileAdRequest_Frequency::set_property(const char* value, size_t size) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Frequency::mutable_property() {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  return property_;
}
inline ::std::string* MobileAdRequest_Frequency::release_property() {
  clear_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = property_;
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Frequency::set_allocated_property(::std::string* property) {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (property) {
    set_has_property();
    property_ = property;
  } else {
    clear_has_property();
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool MobileAdRequest_Frequency::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_Frequency::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_Frequency::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_Frequency::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdRequest_Frequency::id() const {
  return *id_;
}
inline void MobileAdRequest_Frequency::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest_Frequency::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest_Frequency::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Frequency::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdRequest_Frequency::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Frequency::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.mobile.MobileAdRequest.Frequency.FrequencyValue frequencyValue = 3;
inline int MobileAdRequest_Frequency::frequencyvalue_size() const {
  return frequencyvalue_.size();
}
inline void MobileAdRequest_Frequency::clear_frequencyvalue() {
  frequencyvalue_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue& MobileAdRequest_Frequency::frequencyvalue(int index) const {
  return frequencyvalue_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue* MobileAdRequest_Frequency::mutable_frequencyvalue(int index) {
  return frequencyvalue_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue* MobileAdRequest_Frequency::add_frequencyvalue() {
  return frequencyvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue >&
MobileAdRequest_Frequency::frequencyvalue() const {
  return frequencyvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency_FrequencyValue >*
MobileAdRequest_Frequency::mutable_frequencyvalue() {
  return &frequencyvalue_;
}

// -------------------------------------------------------------------

// MobileAdRequest_AdInsight

// optional string property = 1;
inline bool MobileAdRequest_AdInsight::has_property() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_AdInsight::set_has_property() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_AdInsight::clear_has_property() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_AdInsight::clear_property() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    property_->clear();
  }
  clear_has_property();
}
inline const ::std::string& MobileAdRequest_AdInsight::property() const {
  return *property_;
}
inline void MobileAdRequest_AdInsight::set_property(const ::std::string& value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void MobileAdRequest_AdInsight::set_property(const char* value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void MobileAdRequest_AdInsight::set_property(const char* value, size_t size) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_AdInsight::mutable_property() {
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  return property_;
}
inline ::std::string* MobileAdRequest_AdInsight::release_property() {
  clear_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = property_;
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_AdInsight::set_allocated_property(::std::string* property) {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (property) {
    set_has_property();
    property_ = property;
  } else {
    clear_has_property();
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string ids = 2;
inline int MobileAdRequest_AdInsight::ids_size() const {
  return ids_.size();
}
inline void MobileAdRequest_AdInsight::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& MobileAdRequest_AdInsight::ids(int index) const {
  return ids_.Get(index);
}
inline ::std::string* MobileAdRequest_AdInsight::mutable_ids(int index) {
  return ids_.Mutable(index);
}
inline void MobileAdRequest_AdInsight::set_ids(int index, const ::std::string& value) {
  ids_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_AdInsight::set_ids(int index, const char* value) {
  ids_.Mutable(index)->assign(value);
}
inline void MobileAdRequest_AdInsight::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_AdInsight::add_ids() {
  return ids_.Add();
}
inline void MobileAdRequest_AdInsight::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
}
inline void MobileAdRequest_AdInsight::add_ids(const char* value) {
  ids_.Add()->assign(value);
}
inline void MobileAdRequest_AdInsight::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdRequest_AdInsight::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdRequest_AdInsight::mutable_ids() {
  return &ids_;
}

// -------------------------------------------------------------------

// MobileAdRequest_User

// optional string uid = 1;
inline bool MobileAdRequest_User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_User::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& MobileAdRequest_User::uid() const {
  return *uid_;
}
inline void MobileAdRequest_User::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void MobileAdRequest_User::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void MobileAdRequest_User::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_User::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* MobileAdRequest_User::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_User::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.Gender gender = 2;
inline bool MobileAdRequest_User::has_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_User::set_has_gender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_User::clear_has_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_User::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::com::rj::protos::mobile::MobileAdRequest_Gender MobileAdRequest_User::gender() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_Gender >(gender_);
}
inline void MobileAdRequest_User::set_gender(::com::rj::protos::mobile::MobileAdRequest_Gender value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional string Age = 3;
inline bool MobileAdRequest_User::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest_User::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest_User::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest_User::clear_age() {
  if (age_ != &::google::protobuf::internal::kEmptyString) {
    age_->clear();
  }
  clear_has_age();
}
inline const ::std::string& MobileAdRequest_User::age() const {
  return *age_;
}
inline void MobileAdRequest_User::set_age(const ::std::string& value) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    age_ = new ::std::string;
  }
  age_->assign(value);
}
inline void MobileAdRequest_User::set_age(const char* value) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    age_ = new ::std::string;
  }
  age_->assign(value);
}
inline void MobileAdRequest_User::set_age(const char* value, size_t size) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    age_ = new ::std::string;
  }
  age_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_User::mutable_age() {
  set_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    age_ = new ::std::string;
  }
  return age_;
}
inline ::std::string* MobileAdRequest_User::release_age() {
  clear_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = age_;
    age_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_User::set_allocated_age(::std::string* age) {
  if (age_ != &::google::protobuf::internal::kEmptyString) {
    delete age_;
  }
  if (age) {
    set_has_age();
    age_ = age;
  } else {
    clear_has_age();
    age_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdRequest_Device

// optional string ipAddress = 1;
inline bool MobileAdRequest_Device::has_ipaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_Device::set_has_ipaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_Device::clear_has_ipaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_Device::clear_ipaddress() {
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    ipaddress_->clear();
  }
  clear_has_ipaddress();
}
inline const ::std::string& MobileAdRequest_Device::ipaddress() const {
  return *ipaddress_;
}
inline void MobileAdRequest_Device::set_ipaddress(const ::std::string& value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
}
inline void MobileAdRequest_Device::set_ipaddress(const char* value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
}
inline void MobileAdRequest_Device::set_ipaddress(const char* value, size_t size) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_ipaddress() {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  return ipaddress_;
}
inline ::std::string* MobileAdRequest_Device::release_ipaddress() {
  clear_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipaddress_;
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (ipaddress) {
    set_has_ipaddress();
    ipaddress_ = ipaddress;
  } else {
    clear_has_ipaddress();
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string connectionType = 2;
inline bool MobileAdRequest_Device::has_connectiontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_Device::set_has_connectiontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_Device::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_Device::clear_connectiontype() {
  if (connectiontype_ != &::google::protobuf::internal::kEmptyString) {
    connectiontype_->clear();
  }
  clear_has_connectiontype();
}
inline const ::std::string& MobileAdRequest_Device::connectiontype() const {
  return *connectiontype_;
}
inline void MobileAdRequest_Device::set_connectiontype(const ::std::string& value) {
  set_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    connectiontype_ = new ::std::string;
  }
  connectiontype_->assign(value);
}
inline void MobileAdRequest_Device::set_connectiontype(const char* value) {
  set_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    connectiontype_ = new ::std::string;
  }
  connectiontype_->assign(value);
}
inline void MobileAdRequest_Device::set_connectiontype(const char* value, size_t size) {
  set_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    connectiontype_ = new ::std::string;
  }
  connectiontype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_connectiontype() {
  set_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    connectiontype_ = new ::std::string;
  }
  return connectiontype_;
}
inline ::std::string* MobileAdRequest_Device::release_connectiontype() {
  clear_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = connectiontype_;
    connectiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_connectiontype(::std::string* connectiontype) {
  if (connectiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete connectiontype_;
  }
  if (connectiontype) {
    set_has_connectiontype();
    connectiontype_ = connectiontype;
  } else {
    clear_has_connectiontype();
    connectiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ua = 3;
inline bool MobileAdRequest_Device::has_ua() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest_Device::set_has_ua() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest_Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest_Device::clear_ua() {
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& MobileAdRequest_Device::ua() const {
  return *ua_;
}
inline void MobileAdRequest_Device::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
}
inline void MobileAdRequest_Device::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
}
inline void MobileAdRequest_Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  return ua_;
}
inline ::std::string* MobileAdRequest_Device::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string udid = 4;
inline bool MobileAdRequest_Device::has_udid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdRequest_Device::set_has_udid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdRequest_Device::clear_has_udid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdRequest_Device::clear_udid() {
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    udid_->clear();
  }
  clear_has_udid();
}
inline const ::std::string& MobileAdRequest_Device::udid() const {
  return *udid_;
}
inline void MobileAdRequest_Device::set_udid(const ::std::string& value) {
  set_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    udid_ = new ::std::string;
  }
  udid_->assign(value);
}
inline void MobileAdRequest_Device::set_udid(const char* value) {
  set_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    udid_ = new ::std::string;
  }
  udid_->assign(value);
}
inline void MobileAdRequest_Device::set_udid(const char* value, size_t size) {
  set_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    udid_ = new ::std::string;
  }
  udid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_udid() {
  set_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    udid_ = new ::std::string;
  }
  return udid_;
}
inline ::std::string* MobileAdRequest_Device::release_udid() {
  clear_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = udid_;
    udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_udid(::std::string* udid) {
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    delete udid_;
  }
  if (udid) {
    set_has_udid();
    udid_ = udid;
  } else {
    clear_has_udid();
    udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hidMd5 = 5;
inline bool MobileAdRequest_Device::has_hidmd5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdRequest_Device::set_has_hidmd5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdRequest_Device::clear_has_hidmd5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdRequest_Device::clear_hidmd5() {
  if (hidmd5_ != &::google::protobuf::internal::kEmptyString) {
    hidmd5_->clear();
  }
  clear_has_hidmd5();
}
inline const ::std::string& MobileAdRequest_Device::hidmd5() const {
  return *hidmd5_;
}
inline void MobileAdRequest_Device::set_hidmd5(const ::std::string& value) {
  set_has_hidmd5();
  if (hidmd5_ == &::google::protobuf::internal::kEmptyString) {
    hidmd5_ = new ::std::string;
  }
  hidmd5_->assign(value);
}
inline void MobileAdRequest_Device::set_hidmd5(const char* value) {
  set_has_hidmd5();
  if (hidmd5_ == &::google::protobuf::internal::kEmptyString) {
    hidmd5_ = new ::std::string;
  }
  hidmd5_->assign(value);
}
inline void MobileAdRequest_Device::set_hidmd5(const char* value, size_t size) {
  set_has_hidmd5();
  if (hidmd5_ == &::google::protobuf::internal::kEmptyString) {
    hidmd5_ = new ::std::string;
  }
  hidmd5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_hidmd5() {
  set_has_hidmd5();
  if (hidmd5_ == &::google::protobuf::internal::kEmptyString) {
    hidmd5_ = new ::std::string;
  }
  return hidmd5_;
}
inline ::std::string* MobileAdRequest_Device::release_hidmd5() {
  clear_has_hidmd5();
  if (hidmd5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hidmd5_;
    hidmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_hidmd5(::std::string* hidmd5) {
  if (hidmd5_ != &::google::protobuf::internal::kEmptyString) {
    delete hidmd5_;
  }
  if (hidmd5) {
    set_has_hidmd5();
    hidmd5_ = hidmd5;
  } else {
    clear_has_hidmd5();
    hidmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hidSha1 = 6;
inline bool MobileAdRequest_Device::has_hidsha1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdRequest_Device::set_has_hidsha1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdRequest_Device::clear_has_hidsha1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdRequest_Device::clear_hidsha1() {
  if (hidsha1_ != &::google::protobuf::internal::kEmptyString) {
    hidsha1_->clear();
  }
  clear_has_hidsha1();
}
inline const ::std::string& MobileAdRequest_Device::hidsha1() const {
  return *hidsha1_;
}
inline void MobileAdRequest_Device::set_hidsha1(const ::std::string& value) {
  set_has_hidsha1();
  if (hidsha1_ == &::google::protobuf::internal::kEmptyString) {
    hidsha1_ = new ::std::string;
  }
  hidsha1_->assign(value);
}
inline void MobileAdRequest_Device::set_hidsha1(const char* value) {
  set_has_hidsha1();
  if (hidsha1_ == &::google::protobuf::internal::kEmptyString) {
    hidsha1_ = new ::std::string;
  }
  hidsha1_->assign(value);
}
inline void MobileAdRequest_Device::set_hidsha1(const char* value, size_t size) {
  set_has_hidsha1();
  if (hidsha1_ == &::google::protobuf::internal::kEmptyString) {
    hidsha1_ = new ::std::string;
  }
  hidsha1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_hidsha1() {
  set_has_hidsha1();
  if (hidsha1_ == &::google::protobuf::internal::kEmptyString) {
    hidsha1_ = new ::std::string;
  }
  return hidsha1_;
}
inline ::std::string* MobileAdRequest_Device::release_hidsha1() {
  clear_has_hidsha1();
  if (hidsha1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hidsha1_;
    hidsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_hidsha1(::std::string* hidsha1) {
  if (hidsha1_ != &::google::protobuf::internal::kEmptyString) {
    delete hidsha1_;
  }
  if (hidsha1) {
    set_has_hidsha1();
    hidsha1_ = hidsha1;
  } else {
    clear_has_hidsha1();
    hidsha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceType = 7;
inline bool MobileAdRequest_Device::has_devicetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdRequest_Device::set_has_devicetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdRequest_Device::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdRequest_Device::clear_devicetype() {
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    devicetype_->clear();
  }
  clear_has_devicetype();
}
inline const ::std::string& MobileAdRequest_Device::devicetype() const {
  return *devicetype_;
}
inline void MobileAdRequest_Device::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(value);
}
inline void MobileAdRequest_Device::set_devicetype(const char* value) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(value);
}
inline void MobileAdRequest_Device::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_devicetype() {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    devicetype_ = new ::std::string;
  }
  return devicetype_;
}
inline ::std::string* MobileAdRequest_Device::release_devicetype() {
  clear_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicetype_;
    devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetype_;
  }
  if (devicetype) {
    set_has_devicetype();
    devicetype_ = devicetype;
  } else {
    clear_has_devicetype();
    devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platform = 8;
inline bool MobileAdRequest_Device::has_platform() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdRequest_Device::set_has_platform() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdRequest_Device::clear_has_platform() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdRequest_Device::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& MobileAdRequest_Device::platform() const {
  return *platform_;
}
inline void MobileAdRequest_Device::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void MobileAdRequest_Device::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void MobileAdRequest_Device::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* MobileAdRequest_Device::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platformVersion = 9;
inline bool MobileAdRequest_Device::has_platformversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdRequest_Device::set_has_platformversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdRequest_Device::clear_has_platformversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdRequest_Device::clear_platformversion() {
  if (platformversion_ != &::google::protobuf::internal::kEmptyString) {
    platformversion_->clear();
  }
  clear_has_platformversion();
}
inline const ::std::string& MobileAdRequest_Device::platformversion() const {
  return *platformversion_;
}
inline void MobileAdRequest_Device::set_platformversion(const ::std::string& value) {
  set_has_platformversion();
  if (platformversion_ == &::google::protobuf::internal::kEmptyString) {
    platformversion_ = new ::std::string;
  }
  platformversion_->assign(value);
}
inline void MobileAdRequest_Device::set_platformversion(const char* value) {
  set_has_platformversion();
  if (platformversion_ == &::google::protobuf::internal::kEmptyString) {
    platformversion_ = new ::std::string;
  }
  platformversion_->assign(value);
}
inline void MobileAdRequest_Device::set_platformversion(const char* value, size_t size) {
  set_has_platformversion();
  if (platformversion_ == &::google::protobuf::internal::kEmptyString) {
    platformversion_ = new ::std::string;
  }
  platformversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_platformversion() {
  set_has_platformversion();
  if (platformversion_ == &::google::protobuf::internal::kEmptyString) {
    platformversion_ = new ::std::string;
  }
  return platformversion_;
}
inline ::std::string* MobileAdRequest_Device::release_platformversion() {
  clear_has_platformversion();
  if (platformversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platformversion_;
    platformversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_platformversion(::std::string* platformversion) {
  if (platformversion_ != &::google::protobuf::internal::kEmptyString) {
    delete platformversion_;
  }
  if (platformversion) {
    set_has_platformversion();
    platformversion_ = platformversion;
  } else {
    clear_has_platformversion();
    platformversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string language = 10;
inline bool MobileAdRequest_Device::has_language() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdRequest_Device::set_has_language() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdRequest_Device::clear_has_language() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdRequest_Device::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& MobileAdRequest_Device::language() const {
  return *language_;
}
inline void MobileAdRequest_Device::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void MobileAdRequest_Device::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void MobileAdRequest_Device::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* MobileAdRequest_Device::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string vender = 11;
inline bool MobileAdRequest_Device::has_vender() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdRequest_Device::set_has_vender() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdRequest_Device::clear_has_vender() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdRequest_Device::clear_vender() {
  if (vender_ != &::google::protobuf::internal::kEmptyString) {
    vender_->clear();
  }
  clear_has_vender();
}
inline const ::std::string& MobileAdRequest_Device::vender() const {
  return *vender_;
}
inline void MobileAdRequest_Device::set_vender(const ::std::string& value) {
  set_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    vender_ = new ::std::string;
  }
  vender_->assign(value);
}
inline void MobileAdRequest_Device::set_vender(const char* value) {
  set_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    vender_ = new ::std::string;
  }
  vender_->assign(value);
}
inline void MobileAdRequest_Device::set_vender(const char* value, size_t size) {
  set_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    vender_ = new ::std::string;
  }
  vender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_vender() {
  set_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    vender_ = new ::std::string;
  }
  return vender_;
}
inline ::std::string* MobileAdRequest_Device::release_vender() {
  clear_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vender_;
    vender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_vender(::std::string* vender) {
  if (vender_ != &::google::protobuf::internal::kEmptyString) {
    delete vender_;
  }
  if (vender) {
    set_has_vender();
    vender_ = vender;
  } else {
    clear_has_vender();
    vender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string modelName = 12;
inline bool MobileAdRequest_Device::has_modelname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileAdRequest_Device::set_has_modelname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileAdRequest_Device::clear_has_modelname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileAdRequest_Device::clear_modelname() {
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    modelname_->clear();
  }
  clear_has_modelname();
}
inline const ::std::string& MobileAdRequest_Device::modelname() const {
  return *modelname_;
}
inline void MobileAdRequest_Device::set_modelname(const ::std::string& value) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(value);
}
inline void MobileAdRequest_Device::set_modelname(const char* value) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(value);
}
inline void MobileAdRequest_Device::set_modelname(const char* value, size_t size) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_modelname() {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  return modelname_;
}
inline ::std::string* MobileAdRequest_Device::release_modelname() {
  clear_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modelname_;
    modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_modelname(::std::string* modelname) {
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    delete modelname_;
  }
  if (modelname) {
    set_has_modelname();
    modelname_ = modelname;
  } else {
    clear_has_modelname();
    modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string marketingName = 13;
inline bool MobileAdRequest_Device::has_marketingname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MobileAdRequest_Device::set_has_marketingname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MobileAdRequest_Device::clear_has_marketingname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MobileAdRequest_Device::clear_marketingname() {
  if (marketingname_ != &::google::protobuf::internal::kEmptyString) {
    marketingname_->clear();
  }
  clear_has_marketingname();
}
inline const ::std::string& MobileAdRequest_Device::marketingname() const {
  return *marketingname_;
}
inline void MobileAdRequest_Device::set_marketingname(const ::std::string& value) {
  set_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    marketingname_ = new ::std::string;
  }
  marketingname_->assign(value);
}
inline void MobileAdRequest_Device::set_marketingname(const char* value) {
  set_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    marketingname_ = new ::std::string;
  }
  marketingname_->assign(value);
}
inline void MobileAdRequest_Device::set_marketingname(const char* value, size_t size) {
  set_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    marketingname_ = new ::std::string;
  }
  marketingname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_marketingname() {
  set_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    marketingname_ = new ::std::string;
  }
  return marketingname_;
}
inline ::std::string* MobileAdRequest_Device::release_marketingname() {
  clear_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = marketingname_;
    marketingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_marketingname(::std::string* marketingname) {
  if (marketingname_ != &::google::protobuf::internal::kEmptyString) {
    delete marketingname_;
  }
  if (marketingname) {
    set_has_marketingname();
    marketingname_ = marketingname;
  } else {
    clear_has_marketingname();
    marketingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string screenWidth = 14;
inline bool MobileAdRequest_Device::has_screenwidth() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MobileAdRequest_Device::set_has_screenwidth() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MobileAdRequest_Device::clear_has_screenwidth() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MobileAdRequest_Device::clear_screenwidth() {
  if (screenwidth_ != &::google::protobuf::internal::kEmptyString) {
    screenwidth_->clear();
  }
  clear_has_screenwidth();
}
inline const ::std::string& MobileAdRequest_Device::screenwidth() const {
  return *screenwidth_;
}
inline void MobileAdRequest_Device::set_screenwidth(const ::std::string& value) {
  set_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    screenwidth_ = new ::std::string;
  }
  screenwidth_->assign(value);
}
inline void MobileAdRequest_Device::set_screenwidth(const char* value) {
  set_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    screenwidth_ = new ::std::string;
  }
  screenwidth_->assign(value);
}
inline void MobileAdRequest_Device::set_screenwidth(const char* value, size_t size) {
  set_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    screenwidth_ = new ::std::string;
  }
  screenwidth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_screenwidth() {
  set_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    screenwidth_ = new ::std::string;
  }
  return screenwidth_;
}
inline ::std::string* MobileAdRequest_Device::release_screenwidth() {
  clear_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = screenwidth_;
    screenwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_screenwidth(::std::string* screenwidth) {
  if (screenwidth_ != &::google::protobuf::internal::kEmptyString) {
    delete screenwidth_;
  }
  if (screenwidth) {
    set_has_screenwidth();
    screenwidth_ = screenwidth;
  } else {
    clear_has_screenwidth();
    screenwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string screenHeight = 15;
inline bool MobileAdRequest_Device::has_screenheight() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileAdRequest_Device::set_has_screenheight() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileAdRequest_Device::clear_has_screenheight() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileAdRequest_Device::clear_screenheight() {
  if (screenheight_ != &::google::protobuf::internal::kEmptyString) {
    screenheight_->clear();
  }
  clear_has_screenheight();
}
inline const ::std::string& MobileAdRequest_Device::screenheight() const {
  return *screenheight_;
}
inline void MobileAdRequest_Device::set_screenheight(const ::std::string& value) {
  set_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    screenheight_ = new ::std::string;
  }
  screenheight_->assign(value);
}
inline void MobileAdRequest_Device::set_screenheight(const char* value) {
  set_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    screenheight_ = new ::std::string;
  }
  screenheight_->assign(value);
}
inline void MobileAdRequest_Device::set_screenheight(const char* value, size_t size) {
  set_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    screenheight_ = new ::std::string;
  }
  screenheight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_screenheight() {
  set_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    screenheight_ = new ::std::string;
  }
  return screenheight_;
}
inline ::std::string* MobileAdRequest_Device::release_screenheight() {
  clear_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = screenheight_;
    screenheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_screenheight(::std::string* screenheight) {
  if (screenheight_ != &::google::protobuf::internal::kEmptyString) {
    delete screenheight_;
  }
  if (screenheight) {
    set_has_screenheight();
    screenheight_ = screenheight;
  } else {
    clear_has_screenheight();
    screenheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string density = 16;
inline bool MobileAdRequest_Device::has_density() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MobileAdRequest_Device::set_has_density() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MobileAdRequest_Device::clear_has_density() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MobileAdRequest_Device::clear_density() {
  if (density_ != &::google::protobuf::internal::kEmptyString) {
    density_->clear();
  }
  clear_has_density();
}
inline const ::std::string& MobileAdRequest_Device::density() const {
  return *density_;
}
inline void MobileAdRequest_Device::set_density(const ::std::string& value) {
  set_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    density_ = new ::std::string;
  }
  density_->assign(value);
}
inline void MobileAdRequest_Device::set_density(const char* value) {
  set_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    density_ = new ::std::string;
  }
  density_->assign(value);
}
inline void MobileAdRequest_Device::set_density(const char* value, size_t size) {
  set_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    density_ = new ::std::string;
  }
  density_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_density() {
  set_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    density_ = new ::std::string;
  }
  return density_;
}
inline ::std::string* MobileAdRequest_Device::release_density() {
  clear_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = density_;
    density_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_density(::std::string* density) {
  if (density_ != &::google::protobuf::internal::kEmptyString) {
    delete density_;
  }
  if (density) {
    set_has_density();
    density_ = density;
  } else {
    clear_has_density();
    density_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdRequest_GeoInfo

// optional string country = 1;
inline bool MobileAdRequest_GeoInfo::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_GeoInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_GeoInfo::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& MobileAdRequest_GeoInfo::country() const {
  return *country_;
}
inline void MobileAdRequest_GeoInfo::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string region = 2;
inline bool MobileAdRequest_GeoInfo::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_GeoInfo::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_GeoInfo::clear_region() {
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    region_->clear();
  }
  clear_has_region();
}
inline const ::std::string& MobileAdRequest_GeoInfo::region() const {
  return *region_;
}
inline void MobileAdRequest_GeoInfo::set_region(const ::std::string& value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_region(const char* value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_region(const char* value, size_t size) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_region() {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  return region_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_region() {
  clear_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = region_;
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_region(::std::string* region) {
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (region) {
    set_has_region();
    region_ = region;
  } else {
    clear_has_region();
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city = 3;
inline bool MobileAdRequest_GeoInfo::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest_GeoInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest_GeoInfo::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& MobileAdRequest_GeoInfo::city() const {
  return *city_;
}
inline void MobileAdRequest_GeoInfo::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string latitude = 4;
inline bool MobileAdRequest_GeoInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdRequest_GeoInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdRequest_GeoInfo::clear_latitude() {
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    latitude_->clear();
  }
  clear_has_latitude();
}
inline const ::std::string& MobileAdRequest_GeoInfo::latitude() const {
  return *latitude_;
}
inline void MobileAdRequest_GeoInfo::set_latitude(const ::std::string& value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_latitude(const char* value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_latitude() {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  return latitude_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_latitude() {
  clear_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latitude_;
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_latitude(::std::string* latitude) {
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    delete latitude_;
  }
  if (latitude) {
    set_has_latitude();
    latitude_ = latitude;
  } else {
    clear_has_latitude();
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string longitude = 5;
inline bool MobileAdRequest_GeoInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdRequest_GeoInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdRequest_GeoInfo::clear_longitude() {
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    longitude_->clear();
  }
  clear_has_longitude();
}
inline const ::std::string& MobileAdRequest_GeoInfo::longitude() const {
  return *longitude_;
}
inline void MobileAdRequest_GeoInfo::set_longitude(const ::std::string& value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_longitude(const char* value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_longitude(const char* value, size_t size) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_longitude() {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  return longitude_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_longitude() {
  clear_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = longitude_;
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_longitude(::std::string* longitude) {
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    delete longitude_;
  }
  if (longitude) {
    set_has_longitude();
    longitude_ = longitude;
  } else {
    clear_has_longitude();
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string isp = 6;
inline bool MobileAdRequest_GeoInfo::has_isp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_isp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdRequest_GeoInfo::clear_has_isp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdRequest_GeoInfo::clear_isp() {
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    isp_->clear();
  }
  clear_has_isp();
}
inline const ::std::string& MobileAdRequest_GeoInfo::isp() const {
  return *isp_;
}
inline void MobileAdRequest_GeoInfo::set_isp(const ::std::string& value) {
  set_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    isp_ = new ::std::string;
  }
  isp_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_isp(const char* value) {
  set_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    isp_ = new ::std::string;
  }
  isp_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_isp(const char* value, size_t size) {
  set_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    isp_ = new ::std::string;
  }
  isp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_isp() {
  set_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    isp_ = new ::std::string;
  }
  return isp_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_isp() {
  clear_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isp_;
    isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_isp(::std::string* isp) {
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (isp) {
    set_has_isp();
    isp_ = isp;
  } else {
    clear_has_isp();
    isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string domain = 7;
inline bool MobileAdRequest_GeoInfo::has_domain() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_domain() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdRequest_GeoInfo::clear_has_domain() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdRequest_GeoInfo::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& MobileAdRequest_GeoInfo::domain() const {
  return *domain_;
}
inline void MobileAdRequest_GeoInfo::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mcc = 8;
inline bool MobileAdRequest_GeoInfo::has_mcc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_mcc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdRequest_GeoInfo::clear_has_mcc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdRequest_GeoInfo::clear_mcc() {
  if (mcc_ != &::google::protobuf::internal::kEmptyString) {
    mcc_->clear();
  }
  clear_has_mcc();
}
inline const ::std::string& MobileAdRequest_GeoInfo::mcc() const {
  return *mcc_;
}
inline void MobileAdRequest_GeoInfo::set_mcc(const ::std::string& value) {
  set_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_mcc(const char* value) {
  set_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_mcc(const char* value, size_t size) {
  set_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_mcc() {
  set_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    mcc_ = new ::std::string;
  }
  return mcc_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_mcc() {
  clear_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mcc_;
    mcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_mcc(::std::string* mcc) {
  if (mcc_ != &::google::protobuf::internal::kEmptyString) {
    delete mcc_;
  }
  if (mcc) {
    set_has_mcc();
    mcc_ = mcc;
  } else {
    clear_has_mcc();
    mcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mnc = 9;
inline bool MobileAdRequest_GeoInfo::has_mnc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_mnc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdRequest_GeoInfo::clear_has_mnc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdRequest_GeoInfo::clear_mnc() {
  if (mnc_ != &::google::protobuf::internal::kEmptyString) {
    mnc_->clear();
  }
  clear_has_mnc();
}
inline const ::std::string& MobileAdRequest_GeoInfo::mnc() const {
  return *mnc_;
}
inline void MobileAdRequest_GeoInfo::set_mnc(const ::std::string& value) {
  set_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_mnc(const char* value) {
  set_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_mnc(const char* value, size_t size) {
  set_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_mnc() {
  set_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    mnc_ = new ::std::string;
  }
  return mnc_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_mnc() {
  clear_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mnc_;
    mnc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_mnc(::std::string* mnc) {
  if (mnc_ != &::google::protobuf::internal::kEmptyString) {
    delete mnc_;
  }
  if (mnc) {
    set_has_mnc();
    mnc_ = mnc;
  } else {
    clear_has_mnc();
    mnc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string usage_type = 10;
inline bool MobileAdRequest_GeoInfo::has_usage_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_usage_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdRequest_GeoInfo::clear_has_usage_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdRequest_GeoInfo::clear_usage_type() {
  if (usage_type_ != &::google::protobuf::internal::kEmptyString) {
    usage_type_->clear();
  }
  clear_has_usage_type();
}
inline const ::std::string& MobileAdRequest_GeoInfo::usage_type() const {
  return *usage_type_;
}
inline void MobileAdRequest_GeoInfo::set_usage_type(const ::std::string& value) {
  set_has_usage_type();
  if (usage_type_ == &::google::protobuf::internal::kEmptyString) {
    usage_type_ = new ::std::string;
  }
  usage_type_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_usage_type(const char* value) {
  set_has_usage_type();
  if (usage_type_ == &::google::protobuf::internal::kEmptyString) {
    usage_type_ = new ::std::string;
  }
  usage_type_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_usage_type(const char* value, size_t size) {
  set_has_usage_type();
  if (usage_type_ == &::google::protobuf::internal::kEmptyString) {
    usage_type_ = new ::std::string;
  }
  usage_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_usage_type() {
  set_has_usage_type();
  if (usage_type_ == &::google::protobuf::internal::kEmptyString) {
    usage_type_ = new ::std::string;
  }
  return usage_type_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_usage_type() {
  clear_has_usage_type();
  if (usage_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usage_type_;
    usage_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_usage_type(::std::string* usage_type) {
  if (usage_type_ != &::google::protobuf::internal::kEmptyString) {
    delete usage_type_;
  }
  if (usage_type) {
    set_has_usage_type();
    usage_type_ = usage_type;
  } else {
    clear_has_usage_type();
    usage_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string carrier = 11;
inline bool MobileAdRequest_GeoInfo::has_carrier() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdRequest_GeoInfo::set_has_carrier() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdRequest_GeoInfo::clear_has_carrier() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdRequest_GeoInfo::clear_carrier() {
  if (carrier_ != &::google::protobuf::internal::kEmptyString) {
    carrier_->clear();
  }
  clear_has_carrier();
}
inline const ::std::string& MobileAdRequest_GeoInfo::carrier() const {
  return *carrier_;
}
inline void MobileAdRequest_GeoInfo::set_carrier(const ::std::string& value) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::kEmptyString) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_carrier(const char* value) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::kEmptyString) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(value);
}
inline void MobileAdRequest_GeoInfo::set_carrier(const char* value, size_t size) {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::kEmptyString) {
    carrier_ = new ::std::string;
  }
  carrier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_GeoInfo::mutable_carrier() {
  set_has_carrier();
  if (carrier_ == &::google::protobuf::internal::kEmptyString) {
    carrier_ = new ::std::string;
  }
  return carrier_;
}
inline ::std::string* MobileAdRequest_GeoInfo::release_carrier() {
  clear_has_carrier();
  if (carrier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = carrier_;
    carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_GeoInfo::set_allocated_carrier(::std::string* carrier) {
  if (carrier_ != &::google::protobuf::internal::kEmptyString) {
    delete carrier_;
  }
  if (carrier) {
    set_has_carrier();
    carrier_ = carrier;
  } else {
    clear_has_carrier();
    carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdRequest

// optional string id = 1;
inline bool MobileAdRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdRequest::id() const {
  return *id_;
}
inline void MobileAdRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string publishId = 2;
inline bool MobileAdRequest::has_publishid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest::set_has_publishid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest::clear_has_publishid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest::clear_publishid() {
  if (publishid_ != &::google::protobuf::internal::kEmptyString) {
    publishid_->clear();
  }
  clear_has_publishid();
}
inline const ::std::string& MobileAdRequest::publishid() const {
  return *publishid_;
}
inline void MobileAdRequest::set_publishid(const ::std::string& value) {
  set_has_publishid();
  if (publishid_ == &::google::protobuf::internal::kEmptyString) {
    publishid_ = new ::std::string;
  }
  publishid_->assign(value);
}
inline void MobileAdRequest::set_publishid(const char* value) {
  set_has_publishid();
  if (publishid_ == &::google::protobuf::internal::kEmptyString) {
    publishid_ = new ::std::string;
  }
  publishid_->assign(value);
}
inline void MobileAdRequest::set_publishid(const char* value, size_t size) {
  set_has_publishid();
  if (publishid_ == &::google::protobuf::internal::kEmptyString) {
    publishid_ = new ::std::string;
  }
  publishid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_publishid() {
  set_has_publishid();
  if (publishid_ == &::google::protobuf::internal::kEmptyString) {
    publishid_ = new ::std::string;
  }
  return publishid_;
}
inline ::std::string* MobileAdRequest::release_publishid() {
  clear_has_publishid();
  if (publishid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = publishid_;
    publishid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_publishid(::std::string* publishid) {
  if (publishid_ != &::google::protobuf::internal::kEmptyString) {
    delete publishid_;
  }
  if (publishid) {
    set_has_publishid();
    publishid_ = publishid;
  } else {
    clear_has_publishid();
    publishid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string version = 3;
inline bool MobileAdRequest::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& MobileAdRequest::version() const {
  return *version_;
}
inline void MobileAdRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void MobileAdRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void MobileAdRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* MobileAdRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.AdType type = 4;
inline bool MobileAdRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::rj::protos::mobile::MobileAdRequest_AdType MobileAdRequest::type() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_AdType >(type_);
}
inline void MobileAdRequest::set_type(::com::rj::protos::mobile::MobileAdRequest_AdType value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_AdType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string timestamp = 5;
inline bool MobileAdRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdRequest::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& MobileAdRequest::timestamp() const {
  return *timestamp_;
}
inline void MobileAdRequest::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MobileAdRequest::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MobileAdRequest::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* MobileAdRequest::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adspaceWidth = 6;
inline bool MobileAdRequest::has_adspacewidth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdRequest::set_has_adspacewidth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdRequest::clear_has_adspacewidth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdRequest::clear_adspacewidth() {
  if (adspacewidth_ != &::google::protobuf::internal::kEmptyString) {
    adspacewidth_->clear();
  }
  clear_has_adspacewidth();
}
inline const ::std::string& MobileAdRequest::adspacewidth() const {
  return *adspacewidth_;
}
inline void MobileAdRequest::set_adspacewidth(const ::std::string& value) {
  set_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    adspacewidth_ = new ::std::string;
  }
  adspacewidth_->assign(value);
}
inline void MobileAdRequest::set_adspacewidth(const char* value) {
  set_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    adspacewidth_ = new ::std::string;
  }
  adspacewidth_->assign(value);
}
inline void MobileAdRequest::set_adspacewidth(const char* value, size_t size) {
  set_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    adspacewidth_ = new ::std::string;
  }
  adspacewidth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_adspacewidth() {
  set_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    adspacewidth_ = new ::std::string;
  }
  return adspacewidth_;
}
inline ::std::string* MobileAdRequest::release_adspacewidth() {
  clear_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adspacewidth_;
    adspacewidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_adspacewidth(::std::string* adspacewidth) {
  if (adspacewidth_ != &::google::protobuf::internal::kEmptyString) {
    delete adspacewidth_;
  }
  if (adspacewidth) {
    set_has_adspacewidth();
    adspacewidth_ = adspacewidth;
  } else {
    clear_has_adspacewidth();
    adspacewidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adspaceHeight = 7;
inline bool MobileAdRequest::has_adspaceheight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdRequest::set_has_adspaceheight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdRequest::clear_has_adspaceheight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdRequest::clear_adspaceheight() {
  if (adspaceheight_ != &::google::protobuf::internal::kEmptyString) {
    adspaceheight_->clear();
  }
  clear_has_adspaceheight();
}
inline const ::std::string& MobileAdRequest::adspaceheight() const {
  return *adspaceheight_;
}
inline void MobileAdRequest::set_adspaceheight(const ::std::string& value) {
  set_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    adspaceheight_ = new ::std::string;
  }
  adspaceheight_->assign(value);
}
inline void MobileAdRequest::set_adspaceheight(const char* value) {
  set_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    adspaceheight_ = new ::std::string;
  }
  adspaceheight_->assign(value);
}
inline void MobileAdRequest::set_adspaceheight(const char* value, size_t size) {
  set_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    adspaceheight_ = new ::std::string;
  }
  adspaceheight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_adspaceheight() {
  set_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    adspaceheight_ = new ::std::string;
  }
  return adspaceheight_;
}
inline ::std::string* MobileAdRequest::release_adspaceheight() {
  clear_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adspaceheight_;
    adspaceheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_adspaceheight(::std::string* adspaceheight) {
  if (adspaceheight_ != &::google::protobuf::internal::kEmptyString) {
    delete adspaceheight_;
  }
  if (adspaceheight) {
    set_has_adspaceheight();
    adspaceheight_ = adspaceheight;
  } else {
    clear_has_adspaceheight();
    adspaceheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.Orientation orientation = 8;
inline bool MobileAdRequest::has_orientation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdRequest::set_has_orientation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdRequest::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdRequest::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::com::rj::protos::mobile::MobileAdRequest_Orientation MobileAdRequest::orientation() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_Orientation >(orientation_);
}
inline void MobileAdRequest::set_orientation(::com::rj::protos::mobile::MobileAdRequest_Orientation value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_Orientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// optional string packageName = 9;
inline bool MobileAdRequest::has_packagename() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdRequest::set_has_packagename() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdRequest::clear_has_packagename() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdRequest::clear_packagename() {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    packagename_->clear();
  }
  clear_has_packagename();
}
inline const ::std::string& MobileAdRequest::packagename() const {
  return *packagename_;
}
inline void MobileAdRequest::set_packagename(const ::std::string& value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void MobileAdRequest::set_packagename(const char* value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void MobileAdRequest::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_packagename() {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  return packagename_;
}
inline ::std::string* MobileAdRequest::release_packagename() {
  clear_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packagename_;
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_packagename(::std::string* packagename) {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (packagename) {
    set_has_packagename();
    packagename_ = packagename;
  } else {
    clear_has_packagename();
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string schema = 10;
inline bool MobileAdRequest::has_schema() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdRequest::set_has_schema() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdRequest::clear_has_schema() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdRequest::clear_schema() {
  if (schema_ != &::google::protobuf::internal::kEmptyString) {
    schema_->clear();
  }
  clear_has_schema();
}
inline const ::std::string& MobileAdRequest::schema() const {
  return *schema_;
}
inline void MobileAdRequest::set_schema(const ::std::string& value) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
}
inline void MobileAdRequest::set_schema(const char* value) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
}
inline void MobileAdRequest::set_schema(const char* value, size_t size) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    schema_ = new ::std::string;
  }
  schema_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_schema() {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    schema_ = new ::std::string;
  }
  return schema_;
}
inline ::std::string* MobileAdRequest::release_schema() {
  clear_has_schema();
  if (schema_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = schema_;
    schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_schema(::std::string* schema) {
  if (schema_ != &::google::protobuf::internal::kEmptyString) {
    delete schema_;
  }
  if (schema) {
    set_has_schema();
    schema_ = schema;
  } else {
    clear_has_schema();
    schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string section = 11;
inline bool MobileAdRequest::has_section() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdRequest::set_has_section() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdRequest::clear_has_section() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdRequest::clear_section() {
  if (section_ != &::google::protobuf::internal::kEmptyString) {
    section_->clear();
  }
  clear_has_section();
}
inline const ::std::string& MobileAdRequest::section() const {
  return *section_;
}
inline void MobileAdRequest::set_section(const ::std::string& value) {
  set_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    section_ = new ::std::string;
  }
  section_->assign(value);
}
inline void MobileAdRequest::set_section(const char* value) {
  set_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    section_ = new ::std::string;
  }
  section_->assign(value);
}
inline void MobileAdRequest::set_section(const char* value, size_t size) {
  set_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    section_ = new ::std::string;
  }
  section_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_section() {
  set_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    section_ = new ::std::string;
  }
  return section_;
}
inline ::std::string* MobileAdRequest::release_section() {
  clear_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = section_;
    section_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_section(::std::string* section) {
  if (section_ != &::google::protobuf::internal::kEmptyString) {
    delete section_;
  }
  if (section) {
    set_has_section();
    section_ = section;
  } else {
    clear_has_section();
    section_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string session = 12;
inline bool MobileAdRequest::has_session() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileAdRequest::set_has_session() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileAdRequest::clear_has_session() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileAdRequest::clear_session() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& MobileAdRequest::session() const {
  return *session_;
}
inline void MobileAdRequest::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void MobileAdRequest::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void MobileAdRequest::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  return session_;
}
inline ::std::string* MobileAdRequest::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_session(::std::string* session) {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (session) {
    set_has_session();
    session_ = session;
  } else {
    clear_has_session();
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dnsIp = 13;
inline bool MobileAdRequest::has_dnsip() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MobileAdRequest::set_has_dnsip() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MobileAdRequest::clear_has_dnsip() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MobileAdRequest::clear_dnsip() {
  if (dnsip_ != &::google::protobuf::internal::kEmptyString) {
    dnsip_->clear();
  }
  clear_has_dnsip();
}
inline const ::std::string& MobileAdRequest::dnsip() const {
  return *dnsip_;
}
inline void MobileAdRequest::set_dnsip(const ::std::string& value) {
  set_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    dnsip_ = new ::std::string;
  }
  dnsip_->assign(value);
}
inline void MobileAdRequest::set_dnsip(const char* value) {
  set_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    dnsip_ = new ::std::string;
  }
  dnsip_->assign(value);
}
inline void MobileAdRequest::set_dnsip(const char* value, size_t size) {
  set_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    dnsip_ = new ::std::string;
  }
  dnsip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_dnsip() {
  set_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    dnsip_ = new ::std::string;
  }
  return dnsip_;
}
inline ::std::string* MobileAdRequest::release_dnsip() {
  clear_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dnsip_;
    dnsip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_dnsip(::std::string* dnsip) {
  if (dnsip_ != &::google::protobuf::internal::kEmptyString) {
    delete dnsip_;
  }
  if (dnsip) {
    set_has_dnsip();
    dnsip_ = dnsip;
  } else {
    clear_has_dnsip();
    dnsip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.Device device = 14;
inline bool MobileAdRequest::has_device() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MobileAdRequest::set_has_device() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MobileAdRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MobileAdRequest::clear_device() {
  if (device_ != NULL) device_->::com::rj::protos::mobile::MobileAdRequest_Device::Clear();
  clear_has_device();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_Device& MobileAdRequest::device() const {
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_Device* MobileAdRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::com::rj::protos::mobile::MobileAdRequest_Device;
  return device_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_Device* MobileAdRequest::release_device() {
  clear_has_device();
  ::com::rj::protos::mobile::MobileAdRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void MobileAdRequest::set_allocated_device(::com::rj::protos::mobile::MobileAdRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.User user = 15;
inline bool MobileAdRequest::has_user() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileAdRequest::set_has_user() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileAdRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileAdRequest::clear_user() {
  if (user_ != NULL) user_->::com::rj::protos::mobile::MobileAdRequest_User::Clear();
  clear_has_user();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_User& MobileAdRequest::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_User* MobileAdRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::com::rj::protos::mobile::MobileAdRequest_User;
  return user_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_User* MobileAdRequest::release_user() {
  clear_has_user();
  ::com::rj::protos::mobile::MobileAdRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void MobileAdRequest::set_allocated_user(::com::rj::protos::mobile::MobileAdRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.GeoInfo geoInfo = 16;
inline bool MobileAdRequest::has_geoinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MobileAdRequest::set_has_geoinfo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MobileAdRequest::clear_has_geoinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MobileAdRequest::clear_geoinfo() {
  if (geoinfo_ != NULL) geoinfo_->::com::rj::protos::mobile::MobileAdRequest_GeoInfo::Clear();
  clear_has_geoinfo();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_GeoInfo& MobileAdRequest::geoinfo() const {
  return geoinfo_ != NULL ? *geoinfo_ : *default_instance_->geoinfo_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_GeoInfo* MobileAdRequest::mutable_geoinfo() {
  set_has_geoinfo();
  if (geoinfo_ == NULL) geoinfo_ = new ::com::rj::protos::mobile::MobileAdRequest_GeoInfo;
  return geoinfo_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_GeoInfo* MobileAdRequest::release_geoinfo() {
  clear_has_geoinfo();
  ::com::rj::protos::mobile::MobileAdRequest_GeoInfo* temp = geoinfo_;
  geoinfo_ = NULL;
  return temp;
}
inline void MobileAdRequest::set_allocated_geoinfo(::com::rj::protos::mobile::MobileAdRequest_GeoInfo* geoinfo) {
  delete geoinfo_;
  geoinfo_ = geoinfo;
  if (geoinfo) {
    set_has_geoinfo();
  } else {
    clear_has_geoinfo();
  }
}

// repeated .com.rj.protos.mobile.MobileAdRequest.Frequency frequency = 17;
inline int MobileAdRequest::frequency_size() const {
  return frequency_.size();
}
inline void MobileAdRequest::clear_frequency() {
  frequency_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_Frequency& MobileAdRequest::frequency(int index) const {
  return frequency_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdRequest_Frequency* MobileAdRequest::mutable_frequency(int index) {
  return frequency_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdRequest_Frequency* MobileAdRequest::add_frequency() {
  return frequency_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency >&
MobileAdRequest::frequency() const {
  return frequency_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_Frequency >*
MobileAdRequest::mutable_frequency() {
  return &frequency_;
}

// repeated .com.rj.protos.mobile.MobileAdRequest.AppSession appSession = 18;
inline int MobileAdRequest::appsession_size() const {
  return appsession_.size();
}
inline void MobileAdRequest::clear_appsession() {
  appsession_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_AppSession& MobileAdRequest::appsession(int index) const {
  return appsession_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdRequest_AppSession* MobileAdRequest::mutable_appsession(int index) {
  return appsession_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdRequest_AppSession* MobileAdRequest::add_appsession() {
  return appsession_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AppSession >&
MobileAdRequest::appsession() const {
  return appsession_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AppSession >*
MobileAdRequest::mutable_appsession() {
  return &appsession_;
}

// repeated .com.rj.protos.mobile.MobileAdRequest.AdInsight adInsight = 19;
inline int MobileAdRequest::adinsight_size() const {
  return adinsight_.size();
}
inline void MobileAdRequest::clear_adinsight() {
  adinsight_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_AdInsight& MobileAdRequest::adinsight(int index) const {
  return adinsight_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdRequest_AdInsight* MobileAdRequest::mutable_adinsight(int index) {
  return adinsight_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdRequest_AdInsight* MobileAdRequest::add_adinsight() {
  return adinsight_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AdInsight >&
MobileAdRequest::adinsight() const {
  return adinsight_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdRequest_AdInsight >*
MobileAdRequest::mutable_adinsight() {
  return &adinsight_;
}

// optional string appType = 20;
inline bool MobileAdRequest::has_apptype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MobileAdRequest::set_has_apptype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MobileAdRequest::clear_has_apptype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MobileAdRequest::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& MobileAdRequest::apptype() const {
  return *apptype_;
}
inline void MobileAdRequest::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void MobileAdRequest::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void MobileAdRequest::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* MobileAdRequest::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string trafficQuality = 21;
inline bool MobileAdRequest::has_trafficquality() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MobileAdRequest::set_has_trafficquality() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MobileAdRequest::clear_has_trafficquality() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MobileAdRequest::clear_trafficquality() {
  if (trafficquality_ != &::google::protobuf::internal::kEmptyString) {
    trafficquality_->clear();
  }
  clear_has_trafficquality();
}
inline const ::std::string& MobileAdRequest::trafficquality() const {
  return *trafficquality_;
}
inline void MobileAdRequest::set_trafficquality(const ::std::string& value) {
  set_has_trafficquality();
  if (trafficquality_ == &::google::protobuf::internal::kEmptyString) {
    trafficquality_ = new ::std::string;
  }
  trafficquality_->assign(value);
}
inline void MobileAdRequest::set_trafficquality(const char* value) {
  set_has_trafficquality();
  if (trafficquality_ == &::google::protobuf::internal::kEmptyString) {
    trafficquality_ = new ::std::string;
  }
  trafficquality_->assign(value);
}
inline void MobileAdRequest::set_trafficquality(const char* value, size_t size) {
  set_has_trafficquality();
  if (trafficquality_ == &::google::protobuf::internal::kEmptyString) {
    trafficquality_ = new ::std::string;
  }
  trafficquality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_trafficquality() {
  set_has_trafficquality();
  if (trafficquality_ == &::google::protobuf::internal::kEmptyString) {
    trafficquality_ = new ::std::string;
  }
  return trafficquality_;
}
inline ::std::string* MobileAdRequest::release_trafficquality() {
  clear_has_trafficquality();
  if (trafficquality_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trafficquality_;
    trafficquality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_trafficquality(::std::string* trafficquality) {
  if (trafficquality_ != &::google::protobuf::internal::kEmptyString) {
    delete trafficquality_;
  }
  if (trafficquality) {
    set_has_trafficquality();
    trafficquality_ = trafficquality;
  } else {
    clear_has_trafficquality();
    trafficquality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string inventoryQuality = 22;
inline bool MobileAdRequest::has_inventoryquality() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MobileAdRequest::set_has_inventoryquality() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MobileAdRequest::clear_has_inventoryquality() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MobileAdRequest::clear_inventoryquality() {
  if (inventoryquality_ != &::google::protobuf::internal::kEmptyString) {
    inventoryquality_->clear();
  }
  clear_has_inventoryquality();
}
inline const ::std::string& MobileAdRequest::inventoryquality() const {
  return *inventoryquality_;
}
inline void MobileAdRequest::set_inventoryquality(const ::std::string& value) {
  set_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    inventoryquality_ = new ::std::string;
  }
  inventoryquality_->assign(value);
}
inline void MobileAdRequest::set_inventoryquality(const char* value) {
  set_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    inventoryquality_ = new ::std::string;
  }
  inventoryquality_->assign(value);
}
inline void MobileAdRequest::set_inventoryquality(const char* value, size_t size) {
  set_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    inventoryquality_ = new ::std::string;
  }
  inventoryquality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_inventoryquality() {
  set_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    inventoryquality_ = new ::std::string;
  }
  return inventoryquality_;
}
inline ::std::string* MobileAdRequest::release_inventoryquality() {
  clear_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inventoryquality_;
    inventoryquality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_inventoryquality(::std::string* inventoryquality) {
  if (inventoryquality_ != &::google::protobuf::internal::kEmptyString) {
    delete inventoryquality_;
  }
  if (inventoryquality) {
    set_has_inventoryquality();
    inventoryquality_ = inventoryquality;
  } else {
    clear_has_inventoryquality();
    inventoryquality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.TestFlag test = 23;
inline bool MobileAdRequest::has_test() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MobileAdRequest::set_has_test() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MobileAdRequest::clear_has_test() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MobileAdRequest::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::com::rj::protos::mobile::MobileAdRequest_TestFlag MobileAdRequest::test() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_TestFlag >(test_);
}
inline void MobileAdRequest::set_test(::com::rj::protos::mobile::MobileAdRequest_TestFlag value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_TestFlag_IsValid(value));
  set_has_test();
  test_ = value;
}

// optional string appID = 24;
inline bool MobileAdRequest::has_appid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MobileAdRequest::set_has_appid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MobileAdRequest::clear_has_appid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MobileAdRequest::clear_appid() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& MobileAdRequest::appid() const {
  return *appid_;
}
inline void MobileAdRequest::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void MobileAdRequest::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void MobileAdRequest::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  return appid_;
}
inline ::std::string* MobileAdRequest::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appCategory = 25;
inline bool MobileAdRequest::has_appcategory() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MobileAdRequest::set_has_appcategory() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MobileAdRequest::clear_has_appcategory() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MobileAdRequest::clear_appcategory() {
  if (appcategory_ != &::google::protobuf::internal::kEmptyString) {
    appcategory_->clear();
  }
  clear_has_appcategory();
}
inline const ::std::string& MobileAdRequest::appcategory() const {
  return *appcategory_;
}
inline void MobileAdRequest::set_appcategory(const ::std::string& value) {
  set_has_appcategory();
  if (appcategory_ == &::google::protobuf::internal::kEmptyString) {
    appcategory_ = new ::std::string;
  }
  appcategory_->assign(value);
}
inline void MobileAdRequest::set_appcategory(const char* value) {
  set_has_appcategory();
  if (appcategory_ == &::google::protobuf::internal::kEmptyString) {
    appcategory_ = new ::std::string;
  }
  appcategory_->assign(value);
}
inline void MobileAdRequest::set_appcategory(const char* value, size_t size) {
  set_has_appcategory();
  if (appcategory_ == &::google::protobuf::internal::kEmptyString) {
    appcategory_ = new ::std::string;
  }
  appcategory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_appcategory() {
  set_has_appcategory();
  if (appcategory_ == &::google::protobuf::internal::kEmptyString) {
    appcategory_ = new ::std::string;
  }
  return appcategory_;
}
inline ::std::string* MobileAdRequest::release_appcategory() {
  clear_has_appcategory();
  if (appcategory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appcategory_;
    appcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_appcategory(::std::string* appcategory) {
  if (appcategory_ != &::google::protobuf::internal::kEmptyString) {
    delete appcategory_;
  }
  if (appcategory) {
    set_has_appcategory();
    appcategory_ = appcategory;
  } else {
    clear_has_appcategory();
    appcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.Aid aid = 26;
inline bool MobileAdRequest::has_aid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MobileAdRequest::set_has_aid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MobileAdRequest::clear_has_aid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MobileAdRequest::clear_aid() {
  if (aid_ != NULL) aid_->::com::rj::protos::mobile::MobileAdRequest_Aid::Clear();
  clear_has_aid();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_Aid& MobileAdRequest::aid() const {
  return aid_ != NULL ? *aid_ : *default_instance_->aid_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_Aid* MobileAdRequest::mutable_aid() {
  set_has_aid();
  if (aid_ == NULL) aid_ = new ::com::rj::protos::mobile::MobileAdRequest_Aid;
  return aid_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_Aid* MobileAdRequest::release_aid() {
  clear_has_aid();
  ::com::rj::protos::mobile::MobileAdRequest_Aid* temp = aid_;
  aid_ = NULL;
  return temp;
}
inline void MobileAdRequest::set_allocated_aid(::com::rj::protos::mobile::MobileAdRequest_Aid* aid) {
  delete aid_;
  aid_ = aid;
  if (aid) {
    set_has_aid();
  } else {
    clear_has_aid();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mobile
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_TestFlag>() {
  return ::com::rj::protos::mobile::MobileAdRequest_TestFlag_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_Gender>() {
  return ::com::rj::protos::mobile::MobileAdRequest_Gender_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_Orientation>() {
  return ::com::rj::protos::mobile::MobileAdRequest_Orientation_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_AdType>() {
  return ::com::rj::protos::mobile::MobileAdRequest_AdType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MobileAdRequest_2eproto__INCLUDED
