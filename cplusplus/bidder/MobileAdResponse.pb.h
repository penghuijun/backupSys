// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MobileAdResponse.proto

#ifndef PROTOBUF_MobileAdResponse_2eproto__INCLUDED
#define PROTOBUF_MobileAdResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace mobile {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MobileAdResponse_2eproto();
void protobuf_AssignDesc_MobileAdResponse_2eproto();
void protobuf_ShutdownFile_MobileAdResponse_2eproto();

class MobileAdResponse;
class MobileAdResponse_Bidder;
class MobileAdResponse_mobileBid;
class MobileAdResponse_Creative;
class MobileAdResponse_Action;
class MobileAdResponse_TrackingEvents;
class MobileAdResponse_UUID;

enum MobileAdResponse_UuidType {
  MobileAdResponse_UuidType_FRE = 0,
  MobileAdResponse_UuidType_SESSION = 1
};
bool MobileAdResponse_UuidType_IsValid(int value);
const MobileAdResponse_UuidType MobileAdResponse_UuidType_UuidType_MIN = MobileAdResponse_UuidType_FRE;
const MobileAdResponse_UuidType MobileAdResponse_UuidType_UuidType_MAX = MobileAdResponse_UuidType_SESSION;
const int MobileAdResponse_UuidType_UuidType_ARRAYSIZE = MobileAdResponse_UuidType_UuidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdResponse_UuidType_descriptor();
inline const ::std::string& MobileAdResponse_UuidType_Name(MobileAdResponse_UuidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdResponse_UuidType_descriptor(), value);
}
inline bool MobileAdResponse_UuidType_Parse(
    const ::std::string& name, MobileAdResponse_UuidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdResponse_UuidType>(
    MobileAdResponse_UuidType_descriptor(), name, value);
}
// ===================================================================

class MobileAdResponse_Bidder : public ::google::protobuf::Message {
 public:
  MobileAdResponse_Bidder();
  virtual ~MobileAdResponse_Bidder();

  MobileAdResponse_Bidder(const MobileAdResponse_Bidder& from);

  inline MobileAdResponse_Bidder& operator=(const MobileAdResponse_Bidder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_Bidder& default_instance();

  void Swap(MobileAdResponse_Bidder* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_Bidder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_Bidder& from);
  void MergeFrom(const MobileAdResponse_Bidder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string bidderId = 1;
  inline bool has_bidderid() const;
  inline void clear_bidderid();
  static const int kBidderIdFieldNumber = 1;
  inline const ::std::string& bidderid() const;
  inline void set_bidderid(const ::std::string& value);
  inline void set_bidderid(const char* value);
  inline void set_bidderid(const char* value, size_t size);
  inline ::std::string* mutable_bidderid();
  inline ::std::string* release_bidderid();
  inline void set_allocated_bidderid(::std::string* bidderid);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.Bidder)
 private:
  inline void set_has_bidderid();
  inline void clear_has_bidderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* bidderid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_Bidder* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_mobileBid : public ::google::protobuf::Message {
 public:
  MobileAdResponse_mobileBid();
  virtual ~MobileAdResponse_mobileBid();

  MobileAdResponse_mobileBid(const MobileAdResponse_mobileBid& from);

  inline MobileAdResponse_mobileBid& operator=(const MobileAdResponse_mobileBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_mobileBid& default_instance();

  void Swap(MobileAdResponse_mobileBid* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_mobileBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_mobileBid& from);
  void MergeFrom(const MobileAdResponse_mobileBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string campaignId = 1;
  inline bool has_campaignid() const;
  inline void clear_campaignid();
  static const int kCampaignIdFieldNumber = 1;
  inline const ::std::string& campaignid() const;
  inline void set_campaignid(const ::std::string& value);
  inline void set_campaignid(const char* value);
  inline void set_campaignid(const char* value, size_t size);
  inline ::std::string* mutable_campaignid();
  inline ::std::string* release_campaignid();
  inline void set_allocated_campaignid(::std::string* campaignid);

  // optional string biddingType = 2;
  inline bool has_biddingtype() const;
  inline void clear_biddingtype();
  static const int kBiddingTypeFieldNumber = 2;
  inline const ::std::string& biddingtype() const;
  inline void set_biddingtype(const ::std::string& value);
  inline void set_biddingtype(const char* value);
  inline void set_biddingtype(const char* value, size_t size);
  inline ::std::string* mutable_biddingtype();
  inline ::std::string* release_biddingtype();
  inline void set_allocated_biddingtype(::std::string* biddingtype);

  // optional string biddingValue = 3;
  inline bool has_biddingvalue() const;
  inline void clear_biddingvalue();
  static const int kBiddingValueFieldNumber = 3;
  inline const ::std::string& biddingvalue() const;
  inline void set_biddingvalue(const ::std::string& value);
  inline void set_biddingvalue(const char* value);
  inline void set_biddingvalue(const char* value, size_t size);
  inline ::std::string* mutable_biddingvalue();
  inline ::std::string* release_biddingvalue();
  inline void set_allocated_biddingvalue(::std::string* biddingvalue);

  // optional string currency = 4;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 4;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // repeated .com.rj.protos.mobile.MobileAdResponse.Creative creative = 5;
  inline int creative_size() const;
  inline void clear_creative();
  static const int kCreativeFieldNumber = 5;
  inline const ::com::rj::protos::mobile::MobileAdResponse_Creative& creative(int index) const;
  inline ::com::rj::protos::mobile::MobileAdResponse_Creative* mutable_creative(int index);
  inline ::com::rj::protos::mobile::MobileAdResponse_Creative* add_creative();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Creative >&
      creative() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Creative >*
      mutable_creative();

  // optional .com.rj.protos.mobile.MobileAdResponse.Action action = 6;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 6;
  inline const ::com::rj::protos::mobile::MobileAdResponse_Action& action() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_Action* mutable_action();
  inline ::com::rj::protos::mobile::MobileAdResponse_Action* release_action();
  inline void set_allocated_action(::com::rj::protos::mobile::MobileAdResponse_Action* action);

  // optional .com.rj.protos.mobile.MobileAdResponse.UUID uuid = 7;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 7;
  inline const ::com::rj::protos::mobile::MobileAdResponse_UUID& uuid() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_UUID* mutable_uuid();
  inline ::com::rj::protos::mobile::MobileAdResponse_UUID* release_uuid();
  inline void set_allocated_uuid(::com::rj::protos::mobile::MobileAdResponse_UUID* uuid);

  // optional string expectCpm = 8;
  inline bool has_expectcpm() const;
  inline void clear_expectcpm();
  static const int kExpectCpmFieldNumber = 8;
  inline const ::std::string& expectcpm() const;
  inline void set_expectcpm(const ::std::string& value);
  inline void set_expectcpm(const char* value);
  inline void set_expectcpm(const char* value, size_t size);
  inline ::std::string* mutable_expectcpm();
  inline ::std::string* release_expectcpm();
  inline void set_allocated_expectcpm(::std::string* expectcpm);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.mobileBid)
 private:
  inline void set_has_campaignid();
  inline void clear_has_campaignid();
  inline void set_has_biddingtype();
  inline void clear_has_biddingtype();
  inline void set_has_biddingvalue();
  inline void clear_has_biddingvalue();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_expectcpm();
  inline void clear_has_expectcpm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* campaignid_;
  ::std::string* biddingtype_;
  ::std::string* biddingvalue_;
  ::std::string* currency_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Creative > creative_;
  ::com::rj::protos::mobile::MobileAdResponse_Action* action_;
  ::com::rj::protos::mobile::MobileAdResponse_UUID* uuid_;
  ::std::string* expectcpm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_mobileBid* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_Creative : public ::google::protobuf::Message {
 public:
  MobileAdResponse_Creative();
  virtual ~MobileAdResponse_Creative();

  MobileAdResponse_Creative(const MobileAdResponse_Creative& from);

  inline MobileAdResponse_Creative& operator=(const MobileAdResponse_Creative& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_Creative& default_instance();

  void Swap(MobileAdResponse_Creative* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_Creative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_Creative& from);
  void MergeFrom(const MobileAdResponse_Creative& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string creativeId = 1;
  inline bool has_creativeid() const;
  inline void clear_creativeid();
  static const int kCreativeIdFieldNumber = 1;
  inline const ::std::string& creativeid() const;
  inline void set_creativeid(const ::std::string& value);
  inline void set_creativeid(const char* value);
  inline void set_creativeid(const char* value, size_t size);
  inline ::std::string* mutable_creativeid();
  inline ::std::string* release_creativeid();
  inline void set_allocated_creativeid(::std::string* creativeid);

  // optional string admarkup = 2;
  inline bool has_admarkup() const;
  inline void clear_admarkup();
  static const int kAdmarkupFieldNumber = 2;
  inline const ::std::string& admarkup() const;
  inline void set_admarkup(const ::std::string& value);
  inline void set_admarkup(const char* value);
  inline void set_admarkup(const char* value, size_t size);
  inline ::std::string* mutable_admarkup();
  inline ::std::string* release_admarkup();
  inline void set_allocated_admarkup(::std::string* admarkup);

  // optional string width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline const ::std::string& width() const;
  inline void set_width(const ::std::string& value);
  inline void set_width(const char* value);
  inline void set_width(const char* value, size_t size);
  inline ::std::string* mutable_width();
  inline ::std::string* release_width();
  inline void set_allocated_width(::std::string* width);

  // optional string height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline const ::std::string& height() const;
  inline void set_height(const ::std::string& value);
  inline void set_height(const char* value);
  inline void set_height(const char* value, size_t size);
  inline ::std::string* mutable_height();
  inline ::std::string* release_height();
  inline void set_allocated_height(::std::string* height);

  // optional string macro = 5;
  inline bool has_macro() const;
  inline void clear_macro();
  static const int kMacroFieldNumber = 5;
  inline const ::std::string& macro() const;
  inline void set_macro(const ::std::string& value);
  inline void set_macro(const char* value);
  inline void set_macro(const char* value, size_t size);
  inline ::std::string* mutable_macro();
  inline ::std::string* release_macro();
  inline void set_allocated_macro(::std::string* macro);

  // repeated .com.rj.protos.mobile.MobileAdResponse.TrackingEvents events = 6;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 6;
  inline const ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents& events(int index) const;
  inline ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents* mutable_events(int index);
  inline ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents >*
      mutable_events();

  // optional string mediaTypeId = 7;
  inline bool has_mediatypeid() const;
  inline void clear_mediatypeid();
  static const int kMediaTypeIdFieldNumber = 7;
  inline const ::std::string& mediatypeid() const;
  inline void set_mediatypeid(const ::std::string& value);
  inline void set_mediatypeid(const char* value);
  inline void set_mediatypeid(const char* value, size_t size);
  inline ::std::string* mutable_mediatypeid();
  inline ::std::string* release_mediatypeid();
  inline void set_allocated_mediatypeid(::std::string* mediatypeid);

  // optional string mediaSubTypeId = 8;
  inline bool has_mediasubtypeid() const;
  inline void clear_mediasubtypeid();
  static const int kMediaSubTypeIdFieldNumber = 8;
  inline const ::std::string& mediasubtypeid() const;
  inline void set_mediasubtypeid(const ::std::string& value);
  inline void set_mediasubtypeid(const char* value);
  inline void set_mediasubtypeid(const char* value, size_t size);
  inline ::std::string* mutable_mediasubtypeid();
  inline ::std::string* release_mediasubtypeid();
  inline void set_allocated_mediasubtypeid(::std::string* mediasubtypeid);

  // optional .com.rj.protos.mobile.MobileAdResponse.UUID uuid = 9;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 9;
  inline const ::com::rj::protos::mobile::MobileAdResponse_UUID& uuid() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_UUID* mutable_uuid();
  inline ::com::rj::protos::mobile::MobileAdResponse_UUID* release_uuid();
  inline void set_allocated_uuid(::com::rj::protos::mobile::MobileAdResponse_UUID* uuid);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.Creative)
 private:
  inline void set_has_creativeid();
  inline void clear_has_creativeid();
  inline void set_has_admarkup();
  inline void clear_has_admarkup();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_macro();
  inline void clear_has_macro();
  inline void set_has_mediatypeid();
  inline void clear_has_mediatypeid();
  inline void set_has_mediasubtypeid();
  inline void clear_has_mediasubtypeid();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* creativeid_;
  ::std::string* admarkup_;
  ::std::string* width_;
  ::std::string* height_;
  ::std::string* macro_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents > events_;
  ::std::string* mediatypeid_;
  ::std::string* mediasubtypeid_;
  ::com::rj::protos::mobile::MobileAdResponse_UUID* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_Creative* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_Action : public ::google::protobuf::Message {
 public:
  MobileAdResponse_Action();
  virtual ~MobileAdResponse_Action();

  MobileAdResponse_Action(const MobileAdResponse_Action& from);

  inline MobileAdResponse_Action& operator=(const MobileAdResponse_Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_Action& default_instance();

  void Swap(MobileAdResponse_Action* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_Action& from);
  void MergeFrom(const MobileAdResponse_Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string inApp = 2;
  inline bool has_inapp() const;
  inline void clear_inapp();
  static const int kInAppFieldNumber = 2;
  inline const ::std::string& inapp() const;
  inline void set_inapp(const ::std::string& value);
  inline void set_inapp(const char* value);
  inline void set_inapp(const char* value, size_t size);
  inline ::std::string* mutable_inapp();
  inline ::std::string* release_inapp();
  inline void set_allocated_inapp(::std::string* inapp);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string actionType = 4;
  inline bool has_actiontype() const;
  inline void clear_actiontype();
  static const int kActionTypeFieldNumber = 4;
  inline const ::std::string& actiontype() const;
  inline void set_actiontype(const ::std::string& value);
  inline void set_actiontype(const char* value);
  inline void set_actiontype(const char* value, size_t size);
  inline ::std::string* mutable_actiontype();
  inline ::std::string* release_actiontype();
  inline void set_allocated_actiontype(::std::string* actiontype);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.Action)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_inapp();
  inline void clear_has_inapp();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_actiontype();
  inline void clear_has_actiontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* inapp_;
  ::std::string* content_;
  ::std::string* actiontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_Action* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_TrackingEvents : public ::google::protobuf::Message {
 public:
  MobileAdResponse_TrackingEvents();
  virtual ~MobileAdResponse_TrackingEvents();

  MobileAdResponse_TrackingEvents(const MobileAdResponse_TrackingEvents& from);

  inline MobileAdResponse_TrackingEvents& operator=(const MobileAdResponse_TrackingEvents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_TrackingEvents& default_instance();

  void Swap(MobileAdResponse_TrackingEvents* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_TrackingEvents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_TrackingEvents& from);
  void MergeFrom(const MobileAdResponse_TrackingEvents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const char* value, size_t size);
  inline ::std::string* mutable_event();
  inline ::std::string* release_event();
  inline void set_allocated_event(::std::string* event);

  // optional string trackUrl = 2;
  inline bool has_trackurl() const;
  inline void clear_trackurl();
  static const int kTrackUrlFieldNumber = 2;
  inline const ::std::string& trackurl() const;
  inline void set_trackurl(const ::std::string& value);
  inline void set_trackurl(const char* value);
  inline void set_trackurl(const char* value, size_t size);
  inline ::std::string* mutable_trackurl();
  inline ::std::string* release_trackurl();
  inline void set_allocated_trackurl(::std::string* trackurl);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.TrackingEvents)
 private:
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_trackurl();
  inline void clear_has_trackurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* event_;
  ::std::string* trackurl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_TrackingEvents* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_UUID : public ::google::protobuf::Message {
 public:
  MobileAdResponse_UUID();
  virtual ~MobileAdResponse_UUID();

  MobileAdResponse_UUID(const MobileAdResponse_UUID& from);

  inline MobileAdResponse_UUID& operator=(const MobileAdResponse_UUID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_UUID& default_instance();

  void Swap(MobileAdResponse_UUID* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_UUID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_UUID& from);
  void MergeFrom(const MobileAdResponse_UUID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.rj.protos.mobile.MobileAdResponse.UuidType uuidType = 1;
  inline int uuidtype_size() const;
  inline void clear_uuidtype();
  static const int kUuidTypeFieldNumber = 1;
  inline ::com::rj::protos::mobile::MobileAdResponse_UuidType uuidtype(int index) const;
  inline void set_uuidtype(int index, ::com::rj::protos::mobile::MobileAdResponse_UuidType value);
  inline void add_uuidtype(::com::rj::protos::mobile::MobileAdResponse_UuidType value);
  inline const ::google::protobuf::RepeatedField<int>& uuidtype() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_uuidtype();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.UUID)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField<int> uuidtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_UUID* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse : public ::google::protobuf::Message {
 public:
  MobileAdResponse();
  virtual ~MobileAdResponse();

  MobileAdResponse(const MobileAdResponse& from);

  inline MobileAdResponse& operator=(const MobileAdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse& default_instance();

  void Swap(MobileAdResponse* other);

  // implements Message ----------------------------------------------

  MobileAdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse& from);
  void MergeFrom(const MobileAdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_Bidder Bidder;
  typedef MobileAdResponse_mobileBid mobileBid;
  typedef MobileAdResponse_Creative Creative;
  typedef MobileAdResponse_Action Action;
  typedef MobileAdResponse_TrackingEvents TrackingEvents;
  typedef MobileAdResponse_UUID UUID;

  typedef MobileAdResponse_UuidType UuidType;
  static const UuidType FRE = MobileAdResponse_UuidType_FRE;
  static const UuidType SESSION = MobileAdResponse_UuidType_SESSION;
  static inline bool UuidType_IsValid(int value) {
    return MobileAdResponse_UuidType_IsValid(value);
  }
  static const UuidType UuidType_MIN =
    MobileAdResponse_UuidType_UuidType_MIN;
  static const UuidType UuidType_MAX =
    MobileAdResponse_UuidType_UuidType_MAX;
  static const int UuidType_ARRAYSIZE =
    MobileAdResponse_UuidType_UuidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UuidType_descriptor() {
    return MobileAdResponse_UuidType_descriptor();
  }
  static inline const ::std::string& UuidType_Name(UuidType value) {
    return MobileAdResponse_UuidType_Name(value);
  }
  static inline bool UuidType_Parse(const ::std::string& name,
      UuidType* value) {
    return MobileAdResponse_UuidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required .com.rj.protos.mobile.MobileAdResponse.Bidder bidder = 2;
  inline bool has_bidder() const;
  inline void clear_bidder();
  static const int kBidderFieldNumber = 2;
  inline const ::com::rj::protos::mobile::MobileAdResponse_Bidder& bidder() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_Bidder* mutable_bidder();
  inline ::com::rj::protos::mobile::MobileAdResponse_Bidder* release_bidder();
  inline void set_allocated_bidder(::com::rj::protos::mobile::MobileAdResponse_Bidder* bidder);

  // required string bidId = 3;
  inline bool has_bidid() const;
  inline void clear_bidid();
  static const int kBidIdFieldNumber = 3;
  inline const ::std::string& bidid() const;
  inline void set_bidid(const ::std::string& value);
  inline void set_bidid(const char* value);
  inline void set_bidid(const char* value, size_t size);
  inline ::std::string* mutable_bidid();
  inline ::std::string* release_bidid();
  inline void set_allocated_bidid(::std::string* bidid);

  // repeated .com.rj.protos.mobile.MobileAdResponse.mobileBid bidContent = 4;
  inline int bidcontent_size() const;
  inline void clear_bidcontent();
  static const int kBidContentFieldNumber = 4;
  inline const ::com::rj::protos::mobile::MobileAdResponse_mobileBid& bidcontent(int index) const;
  inline ::com::rj::protos::mobile::MobileAdResponse_mobileBid* mutable_bidcontent(int index);
  inline ::com::rj::protos::mobile::MobileAdResponse_mobileBid* add_bidcontent();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_mobileBid >&
      bidcontent() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_mobileBid >*
      mutable_bidcontent();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bidder();
  inline void clear_has_bidder();
  inline void set_has_bidid();
  inline void clear_has_bidid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::com::rj::protos::mobile::MobileAdResponse_Bidder* bidder_;
  ::std::string* bidid_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_mobileBid > bidcontent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MobileAdResponse_Bidder

// required string bidderId = 1;
inline bool MobileAdResponse_Bidder::has_bidderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_Bidder::set_has_bidderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_Bidder::clear_has_bidderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_Bidder::clear_bidderid() {
  if (bidderid_ != &::google::protobuf::internal::kEmptyString) {
    bidderid_->clear();
  }
  clear_has_bidderid();
}
inline const ::std::string& MobileAdResponse_Bidder::bidderid() const {
  return *bidderid_;
}
inline void MobileAdResponse_Bidder::set_bidderid(const ::std::string& value) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(value);
}
inline void MobileAdResponse_Bidder::set_bidderid(const char* value) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(value);
}
inline void MobileAdResponse_Bidder::set_bidderid(const char* value, size_t size) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Bidder::mutable_bidderid() {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  return bidderid_;
}
inline ::std::string* MobileAdResponse_Bidder::release_bidderid() {
  clear_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bidderid_;
    bidderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Bidder::set_allocated_bidderid(::std::string* bidderid) {
  if (bidderid_ != &::google::protobuf::internal::kEmptyString) {
    delete bidderid_;
  }
  if (bidderid) {
    set_has_bidderid();
    bidderid_ = bidderid;
  } else {
    clear_has_bidderid();
    bidderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_mobileBid

// required string campaignId = 1;
inline bool MobileAdResponse_mobileBid::has_campaignid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_mobileBid::set_has_campaignid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_mobileBid::clear_has_campaignid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_mobileBid::clear_campaignid() {
  if (campaignid_ != &::google::protobuf::internal::kEmptyString) {
    campaignid_->clear();
  }
  clear_has_campaignid();
}
inline const ::std::string& MobileAdResponse_mobileBid::campaignid() const {
  return *campaignid_;
}
inline void MobileAdResponse_mobileBid::set_campaignid(const ::std::string& value) {
  set_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    campaignid_ = new ::std::string;
  }
  campaignid_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_campaignid(const char* value) {
  set_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    campaignid_ = new ::std::string;
  }
  campaignid_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_campaignid(const char* value, size_t size) {
  set_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    campaignid_ = new ::std::string;
  }
  campaignid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_mobileBid::mutable_campaignid() {
  set_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    campaignid_ = new ::std::string;
  }
  return campaignid_;
}
inline ::std::string* MobileAdResponse_mobileBid::release_campaignid() {
  clear_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = campaignid_;
    campaignid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_mobileBid::set_allocated_campaignid(::std::string* campaignid) {
  if (campaignid_ != &::google::protobuf::internal::kEmptyString) {
    delete campaignid_;
  }
  if (campaignid) {
    set_has_campaignid();
    campaignid_ = campaignid;
  } else {
    clear_has_campaignid();
    campaignid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string biddingType = 2;
inline bool MobileAdResponse_mobileBid::has_biddingtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_mobileBid::set_has_biddingtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_mobileBid::clear_has_biddingtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_mobileBid::clear_biddingtype() {
  if (biddingtype_ != &::google::protobuf::internal::kEmptyString) {
    biddingtype_->clear();
  }
  clear_has_biddingtype();
}
inline const ::std::string& MobileAdResponse_mobileBid::biddingtype() const {
  return *biddingtype_;
}
inline void MobileAdResponse_mobileBid::set_biddingtype(const ::std::string& value) {
  set_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    biddingtype_ = new ::std::string;
  }
  biddingtype_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_biddingtype(const char* value) {
  set_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    biddingtype_ = new ::std::string;
  }
  biddingtype_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_biddingtype(const char* value, size_t size) {
  set_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    biddingtype_ = new ::std::string;
  }
  biddingtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_mobileBid::mutable_biddingtype() {
  set_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    biddingtype_ = new ::std::string;
  }
  return biddingtype_;
}
inline ::std::string* MobileAdResponse_mobileBid::release_biddingtype() {
  clear_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = biddingtype_;
    biddingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_mobileBid::set_allocated_biddingtype(::std::string* biddingtype) {
  if (biddingtype_ != &::google::protobuf::internal::kEmptyString) {
    delete biddingtype_;
  }
  if (biddingtype) {
    set_has_biddingtype();
    biddingtype_ = biddingtype;
  } else {
    clear_has_biddingtype();
    biddingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string biddingValue = 3;
inline bool MobileAdResponse_mobileBid::has_biddingvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_mobileBid::set_has_biddingvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_mobileBid::clear_has_biddingvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_mobileBid::clear_biddingvalue() {
  if (biddingvalue_ != &::google::protobuf::internal::kEmptyString) {
    biddingvalue_->clear();
  }
  clear_has_biddingvalue();
}
inline const ::std::string& MobileAdResponse_mobileBid::biddingvalue() const {
  return *biddingvalue_;
}
inline void MobileAdResponse_mobileBid::set_biddingvalue(const ::std::string& value) {
  set_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    biddingvalue_ = new ::std::string;
  }
  biddingvalue_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_biddingvalue(const char* value) {
  set_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    biddingvalue_ = new ::std::string;
  }
  biddingvalue_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_biddingvalue(const char* value, size_t size) {
  set_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    biddingvalue_ = new ::std::string;
  }
  biddingvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_mobileBid::mutable_biddingvalue() {
  set_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    biddingvalue_ = new ::std::string;
  }
  return biddingvalue_;
}
inline ::std::string* MobileAdResponse_mobileBid::release_biddingvalue() {
  clear_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = biddingvalue_;
    biddingvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_mobileBid::set_allocated_biddingvalue(::std::string* biddingvalue) {
  if (biddingvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete biddingvalue_;
  }
  if (biddingvalue) {
    set_has_biddingvalue();
    biddingvalue_ = biddingvalue;
  } else {
    clear_has_biddingvalue();
    biddingvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string currency = 4;
inline bool MobileAdResponse_mobileBid::has_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_mobileBid::set_has_currency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_mobileBid::clear_has_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_mobileBid::clear_currency() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& MobileAdResponse_mobileBid::currency() const {
  return *currency_;
}
inline void MobileAdResponse_mobileBid::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_mobileBid::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  return currency_;
}
inline ::std::string* MobileAdResponse_mobileBid::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_mobileBid::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.mobile.MobileAdResponse.Creative creative = 5;
inline int MobileAdResponse_mobileBid::creative_size() const {
  return creative_.size();
}
inline void MobileAdResponse_mobileBid::clear_creative() {
  creative_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_Creative& MobileAdResponse_mobileBid::creative(int index) const {
  return creative_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_Creative* MobileAdResponse_mobileBid::mutable_creative(int index) {
  return creative_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_Creative* MobileAdResponse_mobileBid::add_creative() {
  return creative_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Creative >&
MobileAdResponse_mobileBid::creative() const {
  return creative_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Creative >*
MobileAdResponse_mobileBid::mutable_creative() {
  return &creative_;
}

// optional .com.rj.protos.mobile.MobileAdResponse.Action action = 6;
inline bool MobileAdResponse_mobileBid::has_action() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdResponse_mobileBid::set_has_action() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdResponse_mobileBid::clear_has_action() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdResponse_mobileBid::clear_action() {
  if (action_ != NULL) action_->::com::rj::protos::mobile::MobileAdResponse_Action::Clear();
  clear_has_action();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_Action& MobileAdResponse_mobileBid::action() const {
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_Action* MobileAdResponse_mobileBid::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::com::rj::protos::mobile::MobileAdResponse_Action;
  return action_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_Action* MobileAdResponse_mobileBid::release_action() {
  clear_has_action();
  ::com::rj::protos::mobile::MobileAdResponse_Action* temp = action_;
  action_ = NULL;
  return temp;
}
inline void MobileAdResponse_mobileBid::set_allocated_action(::com::rj::protos::mobile::MobileAdResponse_Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.UUID uuid = 7;
inline bool MobileAdResponse_mobileBid::has_uuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdResponse_mobileBid::set_has_uuid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdResponse_mobileBid::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdResponse_mobileBid::clear_uuid() {
  if (uuid_ != NULL) uuid_->::com::rj::protos::mobile::MobileAdResponse_UUID::Clear();
  clear_has_uuid();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_UUID& MobileAdResponse_mobileBid::uuid() const {
  return uuid_ != NULL ? *uuid_ : *default_instance_->uuid_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_UUID* MobileAdResponse_mobileBid::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == NULL) uuid_ = new ::com::rj::protos::mobile::MobileAdResponse_UUID;
  return uuid_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_UUID* MobileAdResponse_mobileBid::release_uuid() {
  clear_has_uuid();
  ::com::rj::protos::mobile::MobileAdResponse_UUID* temp = uuid_;
  uuid_ = NULL;
  return temp;
}
inline void MobileAdResponse_mobileBid::set_allocated_uuid(::com::rj::protos::mobile::MobileAdResponse_UUID* uuid) {
  delete uuid_;
  uuid_ = uuid;
  if (uuid) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
}

// optional string expectCpm = 8;
inline bool MobileAdResponse_mobileBid::has_expectcpm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdResponse_mobileBid::set_has_expectcpm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdResponse_mobileBid::clear_has_expectcpm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdResponse_mobileBid::clear_expectcpm() {
  if (expectcpm_ != &::google::protobuf::internal::kEmptyString) {
    expectcpm_->clear();
  }
  clear_has_expectcpm();
}
inline const ::std::string& MobileAdResponse_mobileBid::expectcpm() const {
  return *expectcpm_;
}
inline void MobileAdResponse_mobileBid::set_expectcpm(const ::std::string& value) {
  set_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    expectcpm_ = new ::std::string;
  }
  expectcpm_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_expectcpm(const char* value) {
  set_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    expectcpm_ = new ::std::string;
  }
  expectcpm_->assign(value);
}
inline void MobileAdResponse_mobileBid::set_expectcpm(const char* value, size_t size) {
  set_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    expectcpm_ = new ::std::string;
  }
  expectcpm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_mobileBid::mutable_expectcpm() {
  set_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    expectcpm_ = new ::std::string;
  }
  return expectcpm_;
}
inline ::std::string* MobileAdResponse_mobileBid::release_expectcpm() {
  clear_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expectcpm_;
    expectcpm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_mobileBid::set_allocated_expectcpm(::std::string* expectcpm) {
  if (expectcpm_ != &::google::protobuf::internal::kEmptyString) {
    delete expectcpm_;
  }
  if (expectcpm) {
    set_has_expectcpm();
    expectcpm_ = expectcpm;
  } else {
    clear_has_expectcpm();
    expectcpm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_Creative

// optional string creativeId = 1;
inline bool MobileAdResponse_Creative::has_creativeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_Creative::set_has_creativeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_Creative::clear_has_creativeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_Creative::clear_creativeid() {
  if (creativeid_ != &::google::protobuf::internal::kEmptyString) {
    creativeid_->clear();
  }
  clear_has_creativeid();
}
inline const ::std::string& MobileAdResponse_Creative::creativeid() const {
  return *creativeid_;
}
inline void MobileAdResponse_Creative::set_creativeid(const ::std::string& value) {
  set_has_creativeid();
  if (creativeid_ == &::google::protobuf::internal::kEmptyString) {
    creativeid_ = new ::std::string;
  }
  creativeid_->assign(value);
}
inline void MobileAdResponse_Creative::set_creativeid(const char* value) {
  set_has_creativeid();
  if (creativeid_ == &::google::protobuf::internal::kEmptyString) {
    creativeid_ = new ::std::string;
  }
  creativeid_->assign(value);
}
inline void MobileAdResponse_Creative::set_creativeid(const char* value, size_t size) {
  set_has_creativeid();
  if (creativeid_ == &::google::protobuf::internal::kEmptyString) {
    creativeid_ = new ::std::string;
  }
  creativeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Creative::mutable_creativeid() {
  set_has_creativeid();
  if (creativeid_ == &::google::protobuf::internal::kEmptyString) {
    creativeid_ = new ::std::string;
  }
  return creativeid_;
}
inline ::std::string* MobileAdResponse_Creative::release_creativeid() {
  clear_has_creativeid();
  if (creativeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativeid_;
    creativeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Creative::set_allocated_creativeid(::std::string* creativeid) {
  if (creativeid_ != &::google::protobuf::internal::kEmptyString) {
    delete creativeid_;
  }
  if (creativeid) {
    set_has_creativeid();
    creativeid_ = creativeid;
  } else {
    clear_has_creativeid();
    creativeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string admarkup = 2;
inline bool MobileAdResponse_Creative::has_admarkup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_Creative::set_has_admarkup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_Creative::clear_has_admarkup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_Creative::clear_admarkup() {
  if (admarkup_ != &::google::protobuf::internal::kEmptyString) {
    admarkup_->clear();
  }
  clear_has_admarkup();
}
inline const ::std::string& MobileAdResponse_Creative::admarkup() const {
  return *admarkup_;
}
inline void MobileAdResponse_Creative::set_admarkup(const ::std::string& value) {
  set_has_admarkup();
  if (admarkup_ == &::google::protobuf::internal::kEmptyString) {
    admarkup_ = new ::std::string;
  }
  admarkup_->assign(value);
}
inline void MobileAdResponse_Creative::set_admarkup(const char* value) {
  set_has_admarkup();
  if (admarkup_ == &::google::protobuf::internal::kEmptyString) {
    admarkup_ = new ::std::string;
  }
  admarkup_->assign(value);
}
inline void MobileAdResponse_Creative::set_admarkup(const char* value, size_t size) {
  set_has_admarkup();
  if (admarkup_ == &::google::protobuf::internal::kEmptyString) {
    admarkup_ = new ::std::string;
  }
  admarkup_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Creative::mutable_admarkup() {
  set_has_admarkup();
  if (admarkup_ == &::google::protobuf::internal::kEmptyString) {
    admarkup_ = new ::std::string;
  }
  return admarkup_;
}
inline ::std::string* MobileAdResponse_Creative::release_admarkup() {
  clear_has_admarkup();
  if (admarkup_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = admarkup_;
    admarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Creative::set_allocated_admarkup(::std::string* admarkup) {
  if (admarkup_ != &::google::protobuf::internal::kEmptyString) {
    delete admarkup_;
  }
  if (admarkup) {
    set_has_admarkup();
    admarkup_ = admarkup;
  } else {
    clear_has_admarkup();
    admarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string width = 3;
inline bool MobileAdResponse_Creative::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_Creative::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_Creative::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_Creative::clear_width() {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    width_->clear();
  }
  clear_has_width();
}
inline const ::std::string& MobileAdResponse_Creative::width() const {
  return *width_;
}
inline void MobileAdResponse_Creative::set_width(const ::std::string& value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void MobileAdResponse_Creative::set_width(const char* value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void MobileAdResponse_Creative::set_width(const char* value, size_t size) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Creative::mutable_width() {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  return width_;
}
inline ::std::string* MobileAdResponse_Creative::release_width() {
  clear_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = width_;
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Creative::set_allocated_width(::std::string* width) {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    delete width_;
  }
  if (width) {
    set_has_width();
    width_ = width;
  } else {
    clear_has_width();
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string height = 4;
inline bool MobileAdResponse_Creative::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_Creative::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_Creative::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_Creative::clear_height() {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    height_->clear();
  }
  clear_has_height();
}
inline const ::std::string& MobileAdResponse_Creative::height() const {
  return *height_;
}
inline void MobileAdResponse_Creative::set_height(const ::std::string& value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void MobileAdResponse_Creative::set_height(const char* value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void MobileAdResponse_Creative::set_height(const char* value, size_t size) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Creative::mutable_height() {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  return height_;
}
inline ::std::string* MobileAdResponse_Creative::release_height() {
  clear_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = height_;
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Creative::set_allocated_height(::std::string* height) {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    delete height_;
  }
  if (height) {
    set_has_height();
    height_ = height;
  } else {
    clear_has_height();
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string macro = 5;
inline bool MobileAdResponse_Creative::has_macro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdResponse_Creative::set_has_macro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdResponse_Creative::clear_has_macro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdResponse_Creative::clear_macro() {
  if (macro_ != &::google::protobuf::internal::kEmptyString) {
    macro_->clear();
  }
  clear_has_macro();
}
inline const ::std::string& MobileAdResponse_Creative::macro() const {
  return *macro_;
}
inline void MobileAdResponse_Creative::set_macro(const ::std::string& value) {
  set_has_macro();
  if (macro_ == &::google::protobuf::internal::kEmptyString) {
    macro_ = new ::std::string;
  }
  macro_->assign(value);
}
inline void MobileAdResponse_Creative::set_macro(const char* value) {
  set_has_macro();
  if (macro_ == &::google::protobuf::internal::kEmptyString) {
    macro_ = new ::std::string;
  }
  macro_->assign(value);
}
inline void MobileAdResponse_Creative::set_macro(const char* value, size_t size) {
  set_has_macro();
  if (macro_ == &::google::protobuf::internal::kEmptyString) {
    macro_ = new ::std::string;
  }
  macro_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Creative::mutable_macro() {
  set_has_macro();
  if (macro_ == &::google::protobuf::internal::kEmptyString) {
    macro_ = new ::std::string;
  }
  return macro_;
}
inline ::std::string* MobileAdResponse_Creative::release_macro() {
  clear_has_macro();
  if (macro_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = macro_;
    macro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Creative::set_allocated_macro(::std::string* macro) {
  if (macro_ != &::google::protobuf::internal::kEmptyString) {
    delete macro_;
  }
  if (macro) {
    set_has_macro();
    macro_ = macro;
  } else {
    clear_has_macro();
    macro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.mobile.MobileAdResponse.TrackingEvents events = 6;
inline int MobileAdResponse_Creative::events_size() const {
  return events_.size();
}
inline void MobileAdResponse_Creative::clear_events() {
  events_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents& MobileAdResponse_Creative::events(int index) const {
  return events_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents* MobileAdResponse_Creative::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents* MobileAdResponse_Creative::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents >&
MobileAdResponse_Creative::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents >*
MobileAdResponse_Creative::mutable_events() {
  return &events_;
}

// optional string mediaTypeId = 7;
inline bool MobileAdResponse_Creative::has_mediatypeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdResponse_Creative::set_has_mediatypeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdResponse_Creative::clear_has_mediatypeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdResponse_Creative::clear_mediatypeid() {
  if (mediatypeid_ != &::google::protobuf::internal::kEmptyString) {
    mediatypeid_->clear();
  }
  clear_has_mediatypeid();
}
inline const ::std::string& MobileAdResponse_Creative::mediatypeid() const {
  return *mediatypeid_;
}
inline void MobileAdResponse_Creative::set_mediatypeid(const ::std::string& value) {
  set_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediatypeid_ = new ::std::string;
  }
  mediatypeid_->assign(value);
}
inline void MobileAdResponse_Creative::set_mediatypeid(const char* value) {
  set_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediatypeid_ = new ::std::string;
  }
  mediatypeid_->assign(value);
}
inline void MobileAdResponse_Creative::set_mediatypeid(const char* value, size_t size) {
  set_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediatypeid_ = new ::std::string;
  }
  mediatypeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Creative::mutable_mediatypeid() {
  set_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediatypeid_ = new ::std::string;
  }
  return mediatypeid_;
}
inline ::std::string* MobileAdResponse_Creative::release_mediatypeid() {
  clear_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mediatypeid_;
    mediatypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Creative::set_allocated_mediatypeid(::std::string* mediatypeid) {
  if (mediatypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete mediatypeid_;
  }
  if (mediatypeid) {
    set_has_mediatypeid();
    mediatypeid_ = mediatypeid;
  } else {
    clear_has_mediatypeid();
    mediatypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mediaSubTypeId = 8;
inline bool MobileAdResponse_Creative::has_mediasubtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdResponse_Creative::set_has_mediasubtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdResponse_Creative::clear_has_mediasubtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdResponse_Creative::clear_mediasubtypeid() {
  if (mediasubtypeid_ != &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_->clear();
  }
  clear_has_mediasubtypeid();
}
inline const ::std::string& MobileAdResponse_Creative::mediasubtypeid() const {
  return *mediasubtypeid_;
}
inline void MobileAdResponse_Creative::set_mediasubtypeid(const ::std::string& value) {
  set_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_ = new ::std::string;
  }
  mediasubtypeid_->assign(value);
}
inline void MobileAdResponse_Creative::set_mediasubtypeid(const char* value) {
  set_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_ = new ::std::string;
  }
  mediasubtypeid_->assign(value);
}
inline void MobileAdResponse_Creative::set_mediasubtypeid(const char* value, size_t size) {
  set_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_ = new ::std::string;
  }
  mediasubtypeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Creative::mutable_mediasubtypeid() {
  set_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_ = new ::std::string;
  }
  return mediasubtypeid_;
}
inline ::std::string* MobileAdResponse_Creative::release_mediasubtypeid() {
  clear_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mediasubtypeid_;
    mediasubtypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Creative::set_allocated_mediasubtypeid(::std::string* mediasubtypeid) {
  if (mediasubtypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete mediasubtypeid_;
  }
  if (mediasubtypeid) {
    set_has_mediasubtypeid();
    mediasubtypeid_ = mediasubtypeid;
  } else {
    clear_has_mediasubtypeid();
    mediasubtypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.UUID uuid = 9;
inline bool MobileAdResponse_Creative::has_uuid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdResponse_Creative::set_has_uuid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdResponse_Creative::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdResponse_Creative::clear_uuid() {
  if (uuid_ != NULL) uuid_->::com::rj::protos::mobile::MobileAdResponse_UUID::Clear();
  clear_has_uuid();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_UUID& MobileAdResponse_Creative::uuid() const {
  return uuid_ != NULL ? *uuid_ : *default_instance_->uuid_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_UUID* MobileAdResponse_Creative::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == NULL) uuid_ = new ::com::rj::protos::mobile::MobileAdResponse_UUID;
  return uuid_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_UUID* MobileAdResponse_Creative::release_uuid() {
  clear_has_uuid();
  ::com::rj::protos::mobile::MobileAdResponse_UUID* temp = uuid_;
  uuid_ = NULL;
  return temp;
}
inline void MobileAdResponse_Creative::set_allocated_uuid(::com::rj::protos::mobile::MobileAdResponse_UUID* uuid) {
  delete uuid_;
  uuid_ = uuid;
  if (uuid) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_Action

// optional string name = 1;
inline bool MobileAdResponse_Action::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_Action::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_Action::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_Action::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MobileAdResponse_Action::name() const {
  return *name_;
}
inline void MobileAdResponse_Action::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MobileAdResponse_Action::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MobileAdResponse_Action::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Action::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MobileAdResponse_Action::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Action::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string inApp = 2;
inline bool MobileAdResponse_Action::has_inapp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_Action::set_has_inapp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_Action::clear_has_inapp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_Action::clear_inapp() {
  if (inapp_ != &::google::protobuf::internal::kEmptyString) {
    inapp_->clear();
  }
  clear_has_inapp();
}
inline const ::std::string& MobileAdResponse_Action::inapp() const {
  return *inapp_;
}
inline void MobileAdResponse_Action::set_inapp(const ::std::string& value) {
  set_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    inapp_ = new ::std::string;
  }
  inapp_->assign(value);
}
inline void MobileAdResponse_Action::set_inapp(const char* value) {
  set_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    inapp_ = new ::std::string;
  }
  inapp_->assign(value);
}
inline void MobileAdResponse_Action::set_inapp(const char* value, size_t size) {
  set_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    inapp_ = new ::std::string;
  }
  inapp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Action::mutable_inapp() {
  set_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    inapp_ = new ::std::string;
  }
  return inapp_;
}
inline ::std::string* MobileAdResponse_Action::release_inapp() {
  clear_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inapp_;
    inapp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Action::set_allocated_inapp(::std::string* inapp) {
  if (inapp_ != &::google::protobuf::internal::kEmptyString) {
    delete inapp_;
  }
  if (inapp) {
    set_has_inapp();
    inapp_ = inapp;
  } else {
    clear_has_inapp();
    inapp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 3;
inline bool MobileAdResponse_Action::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_Action::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_Action::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_Action::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MobileAdResponse_Action::content() const {
  return *content_;
}
inline void MobileAdResponse_Action::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MobileAdResponse_Action::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MobileAdResponse_Action::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Action::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MobileAdResponse_Action::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Action::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string actionType = 4;
inline bool MobileAdResponse_Action::has_actiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_Action::set_has_actiontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_Action::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_Action::clear_actiontype() {
  if (actiontype_ != &::google::protobuf::internal::kEmptyString) {
    actiontype_->clear();
  }
  clear_has_actiontype();
}
inline const ::std::string& MobileAdResponse_Action::actiontype() const {
  return *actiontype_;
}
inline void MobileAdResponse_Action::set_actiontype(const ::std::string& value) {
  set_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(value);
}
inline void MobileAdResponse_Action::set_actiontype(const char* value) {
  set_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(value);
}
inline void MobileAdResponse_Action::set_actiontype(const char* value, size_t size) {
  set_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Action::mutable_actiontype() {
  set_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    actiontype_ = new ::std::string;
  }
  return actiontype_;
}
inline ::std::string* MobileAdResponse_Action::release_actiontype() {
  clear_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actiontype_;
    actiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Action::set_allocated_actiontype(::std::string* actiontype) {
  if (actiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete actiontype_;
  }
  if (actiontype) {
    set_has_actiontype();
    actiontype_ = actiontype;
  } else {
    clear_has_actiontype();
    actiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_TrackingEvents

// optional string event = 1;
inline bool MobileAdResponse_TrackingEvents::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_TrackingEvents::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_TrackingEvents::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_TrackingEvents::clear_event() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    event_->clear();
  }
  clear_has_event();
}
inline const ::std::string& MobileAdResponse_TrackingEvents::event() const {
  return *event_;
}
inline void MobileAdResponse_TrackingEvents::set_event(const ::std::string& value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void MobileAdResponse_TrackingEvents::set_event(const char* value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void MobileAdResponse_TrackingEvents::set_event(const char* value, size_t size) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_TrackingEvents::mutable_event() {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  return event_;
}
inline ::std::string* MobileAdResponse_TrackingEvents::release_event() {
  clear_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_;
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_TrackingEvents::set_allocated_event(::std::string* event) {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (event) {
    set_has_event();
    event_ = event;
  } else {
    clear_has_event();
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string trackUrl = 2;
inline bool MobileAdResponse_TrackingEvents::has_trackurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_TrackingEvents::set_has_trackurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_TrackingEvents::clear_has_trackurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_TrackingEvents::clear_trackurl() {
  if (trackurl_ != &::google::protobuf::internal::kEmptyString) {
    trackurl_->clear();
  }
  clear_has_trackurl();
}
inline const ::std::string& MobileAdResponse_TrackingEvents::trackurl() const {
  return *trackurl_;
}
inline void MobileAdResponse_TrackingEvents::set_trackurl(const ::std::string& value) {
  set_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    trackurl_ = new ::std::string;
  }
  trackurl_->assign(value);
}
inline void MobileAdResponse_TrackingEvents::set_trackurl(const char* value) {
  set_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    trackurl_ = new ::std::string;
  }
  trackurl_->assign(value);
}
inline void MobileAdResponse_TrackingEvents::set_trackurl(const char* value, size_t size) {
  set_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    trackurl_ = new ::std::string;
  }
  trackurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_TrackingEvents::mutable_trackurl() {
  set_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    trackurl_ = new ::std::string;
  }
  return trackurl_;
}
inline ::std::string* MobileAdResponse_TrackingEvents::release_trackurl() {
  clear_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackurl_;
    trackurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_TrackingEvents::set_allocated_trackurl(::std::string* trackurl) {
  if (trackurl_ != &::google::protobuf::internal::kEmptyString) {
    delete trackurl_;
  }
  if (trackurl) {
    set_has_trackurl();
    trackurl_ = trackurl;
  } else {
    clear_has_trackurl();
    trackurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_UUID

// repeated .com.rj.protos.mobile.MobileAdResponse.UuidType uuidType = 1;
inline int MobileAdResponse_UUID::uuidtype_size() const {
  return uuidtype_.size();
}
inline void MobileAdResponse_UUID::clear_uuidtype() {
  uuidtype_.Clear();
}
inline ::com::rj::protos::mobile::MobileAdResponse_UuidType MobileAdResponse_UUID::uuidtype(int index) const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_UuidType >(uuidtype_.Get(index));
}
inline void MobileAdResponse_UUID::set_uuidtype(int index, ::com::rj::protos::mobile::MobileAdResponse_UuidType value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_UuidType_IsValid(value));
  uuidtype_.Set(index, value);
}
inline void MobileAdResponse_UUID::add_uuidtype(::com::rj::protos::mobile::MobileAdResponse_UuidType value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_UuidType_IsValid(value));
  uuidtype_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
MobileAdResponse_UUID::uuidtype() const {
  return uuidtype_;
}
inline ::google::protobuf::RepeatedField<int>*
MobileAdResponse_UUID::mutable_uuidtype() {
  return &uuidtype_;
}

// -------------------------------------------------------------------

// MobileAdResponse

// required string id = 1;
inline bool MobileAdResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdResponse::id() const {
  return *id_;
}
inline void MobileAdResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdResponse::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .com.rj.protos.mobile.MobileAdResponse.Bidder bidder = 2;
inline bool MobileAdResponse::has_bidder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse::set_has_bidder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse::clear_has_bidder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse::clear_bidder() {
  if (bidder_ != NULL) bidder_->::com::rj::protos::mobile::MobileAdResponse_Bidder::Clear();
  clear_has_bidder();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_Bidder& MobileAdResponse::bidder() const {
  return bidder_ != NULL ? *bidder_ : *default_instance_->bidder_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_Bidder* MobileAdResponse::mutable_bidder() {
  set_has_bidder();
  if (bidder_ == NULL) bidder_ = new ::com::rj::protos::mobile::MobileAdResponse_Bidder;
  return bidder_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_Bidder* MobileAdResponse::release_bidder() {
  clear_has_bidder();
  ::com::rj::protos::mobile::MobileAdResponse_Bidder* temp = bidder_;
  bidder_ = NULL;
  return temp;
}
inline void MobileAdResponse::set_allocated_bidder(::com::rj::protos::mobile::MobileAdResponse_Bidder* bidder) {
  delete bidder_;
  bidder_ = bidder;
  if (bidder) {
    set_has_bidder();
  } else {
    clear_has_bidder();
  }
}

// required string bidId = 3;
inline bool MobileAdResponse::has_bidid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse::set_has_bidid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse::clear_has_bidid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse::clear_bidid() {
  if (bidid_ != &::google::protobuf::internal::kEmptyString) {
    bidid_->clear();
  }
  clear_has_bidid();
}
inline const ::std::string& MobileAdResponse::bidid() const {
  return *bidid_;
}
inline void MobileAdResponse::set_bidid(const ::std::string& value) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::kEmptyString) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
}
inline void MobileAdResponse::set_bidid(const char* value) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::kEmptyString) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
}
inline void MobileAdResponse::set_bidid(const char* value, size_t size) {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::kEmptyString) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_bidid() {
  set_has_bidid();
  if (bidid_ == &::google::protobuf::internal::kEmptyString) {
    bidid_ = new ::std::string;
  }
  return bidid_;
}
inline ::std::string* MobileAdResponse::release_bidid() {
  clear_has_bidid();
  if (bidid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bidid_;
    bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_bidid(::std::string* bidid) {
  if (bidid_ != &::google::protobuf::internal::kEmptyString) {
    delete bidid_;
  }
  if (bidid) {
    set_has_bidid();
    bidid_ = bidid;
  } else {
    clear_has_bidid();
    bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.mobile.MobileAdResponse.mobileBid bidContent = 4;
inline int MobileAdResponse::bidcontent_size() const {
  return bidcontent_.size();
}
inline void MobileAdResponse::clear_bidcontent() {
  bidcontent_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_mobileBid& MobileAdResponse::bidcontent(int index) const {
  return bidcontent_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_mobileBid* MobileAdResponse::mutable_bidcontent(int index) {
  return bidcontent_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_mobileBid* MobileAdResponse::add_bidcontent() {
  return bidcontent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_mobileBid >&
MobileAdResponse::bidcontent() const {
  return bidcontent_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_mobileBid >*
MobileAdResponse::mutable_bidcontent() {
  return &bidcontent_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mobile
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdResponse_UuidType>() {
  return ::com::rj::protos::mobile::MobileAdResponse_UuidType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MobileAdResponse_2eproto__INCLUDED
