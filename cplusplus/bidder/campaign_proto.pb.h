// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: campaign_proto.proto

#ifndef PROTOBUF_campaign_5fproto_2eproto__INCLUDED
#define PROTOBUF_campaign_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace targeting {
namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_campaign_5fproto_2eproto();
void protobuf_AssignDesc_campaign_5fproto_2eproto();
void protobuf_ShutdownFile_campaign_5fproto_2eproto();

class CampaignProtoEntity;
class CampaignProtoEntity_Action;
class CampaignProtoEntity_Creatives;
class CampaignProtoEntity_Creatives_Datas;
class CampaignProtoEntity_Targeting;
class CampaignProtoEntity_Targeting_Frequency;
class CampaignProtoEntity_Targeting_AppCriteria;

// ===================================================================

class CampaignProtoEntity_Action : public ::google::protobuf::Message {
 public:
  CampaignProtoEntity_Action();
  virtual ~CampaignProtoEntity_Action();

  CampaignProtoEntity_Action(const CampaignProtoEntity_Action& from);

  inline CampaignProtoEntity_Action& operator=(const CampaignProtoEntity_Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignProtoEntity_Action& default_instance();

  void Swap(CampaignProtoEntity_Action* other);

  // implements Message ----------------------------------------------

  CampaignProtoEntity_Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampaignProtoEntity_Action& from);
  void MergeFrom(const CampaignProtoEntity_Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string actionTypeName = 1;
  inline bool has_actiontypename() const;
  inline void clear_actiontypename();
  static const int kActionTypeNameFieldNumber = 1;
  inline const ::std::string& actiontypename() const;
  inline void set_actiontypename(const ::std::string& value);
  inline void set_actiontypename(const char* value);
  inline void set_actiontypename(const char* value, size_t size);
  inline ::std::string* mutable_actiontypename();
  inline ::std::string* release_actiontypename();
  inline void set_allocated_actiontypename(::std::string* actiontypename);

  // optional string inApp = 2;
  inline bool has_inapp() const;
  inline void clear_inapp();
  static const int kInAppFieldNumber = 2;
  inline const ::std::string& inapp() const;
  inline void set_inapp(const ::std::string& value);
  inline void set_inapp(const char* value);
  inline void set_inapp(const char* value, size_t size);
  inline ::std::string* mutable_inapp();
  inline ::std::string* release_inapp();
  inline void set_allocated_inapp(::std::string* inapp);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.rj.targeting.protos.CampaignProtoEntity.Action)
 private:
  inline void set_has_actiontypename();
  inline void clear_has_actiontypename();
  inline void set_has_inapp();
  inline void clear_has_inapp();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* actiontypename_;
  ::std::string* inapp_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_campaign_5fproto_2eproto();
  friend void protobuf_AssignDesc_campaign_5fproto_2eproto();
  friend void protobuf_ShutdownFile_campaign_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CampaignProtoEntity_Action* default_instance_;
};
// -------------------------------------------------------------------

class CampaignProtoEntity_Creatives_Datas : public ::google::protobuf::Message {
 public:
  CampaignProtoEntity_Creatives_Datas();
  virtual ~CampaignProtoEntity_Creatives_Datas();

  CampaignProtoEntity_Creatives_Datas(const CampaignProtoEntity_Creatives_Datas& from);

  inline CampaignProtoEntity_Creatives_Datas& operator=(const CampaignProtoEntity_Creatives_Datas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignProtoEntity_Creatives_Datas& default_instance();

  void Swap(CampaignProtoEntity_Creatives_Datas* other);

  // implements Message ----------------------------------------------

  CampaignProtoEntity_Creatives_Datas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampaignProtoEntity_Creatives_Datas& from);
  void MergeFrom(const CampaignProtoEntity_Creatives_Datas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string categoryId = 2;
  inline bool has_categoryid() const;
  inline void clear_categoryid();
  static const int kCategoryIdFieldNumber = 2;
  inline const ::std::string& categoryid() const;
  inline void set_categoryid(const ::std::string& value);
  inline void set_categoryid(const char* value);
  inline void set_categoryid(const char* value, size_t size);
  inline ::std::string* mutable_categoryid();
  inline ::std::string* release_categoryid();
  inline void set_allocated_categoryid(::std::string* categoryid);

  // optional string channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional string mediaTypeId = 4;
  inline bool has_mediatypeid() const;
  inline void clear_mediatypeid();
  static const int kMediaTypeIdFieldNumber = 4;
  inline const ::std::string& mediatypeid() const;
  inline void set_mediatypeid(const ::std::string& value);
  inline void set_mediatypeid(const char* value);
  inline void set_mediatypeid(const char* value, size_t size);
  inline ::std::string* mutable_mediatypeid();
  inline ::std::string* release_mediatypeid();
  inline void set_allocated_mediatypeid(::std::string* mediatypeid);

  // optional string mediaSubTypeId = 5;
  inline bool has_mediasubtypeid() const;
  inline void clear_mediasubtypeid();
  static const int kMediaSubTypeIdFieldNumber = 5;
  inline const ::std::string& mediasubtypeid() const;
  inline void set_mediasubtypeid(const ::std::string& value);
  inline void set_mediasubtypeid(const char* value);
  inline void set_mediasubtypeid(const char* value, size_t size);
  inline ::std::string* mutable_mediasubtypeid();
  inline ::std::string* release_mediasubtypeid();
  inline void set_allocated_mediasubtypeid(::std::string* mediasubtypeid);

  // @@protoc_insertion_point(class_scope:com.rj.targeting.protos.CampaignProtoEntity.Creatives.Datas)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_categoryid();
  inline void clear_has_categoryid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_mediatypeid();
  inline void clear_has_mediatypeid();
  inline void set_has_mediasubtypeid();
  inline void clear_has_mediasubtypeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* categoryid_;
  ::std::string* channel_;
  ::std::string* mediatypeid_;
  ::std::string* mediasubtypeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_campaign_5fproto_2eproto();
  friend void protobuf_AssignDesc_campaign_5fproto_2eproto();
  friend void protobuf_ShutdownFile_campaign_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CampaignProtoEntity_Creatives_Datas* default_instance_;
};
// -------------------------------------------------------------------

class CampaignProtoEntity_Creatives : public ::google::protobuf::Message {
 public:
  CampaignProtoEntity_Creatives();
  virtual ~CampaignProtoEntity_Creatives();

  CampaignProtoEntity_Creatives(const CampaignProtoEntity_Creatives& from);

  inline CampaignProtoEntity_Creatives& operator=(const CampaignProtoEntity_Creatives& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignProtoEntity_Creatives& default_instance();

  void Swap(CampaignProtoEntity_Creatives* other);

  // implements Message ----------------------------------------------

  CampaignProtoEntity_Creatives* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampaignProtoEntity_Creatives& from);
  void MergeFrom(const CampaignProtoEntity_Creatives& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CampaignProtoEntity_Creatives_Datas Datas;

  // accessors -------------------------------------------------------

  // optional string size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline const ::std::string& size() const;
  inline void set_size(const ::std::string& value);
  inline void set_size(const char* value);
  inline void set_size(const char* value, size_t size);
  inline ::std::string* mutable_size();
  inline ::std::string* release_size();
  inline void set_allocated_size(::std::string* size);

  // repeated .com.rj.targeting.protos.CampaignProtoEntity.Creatives.Datas datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas& datas(int index) const;
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas* mutable_datas(int index);
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:com.rj.targeting.protos.CampaignProtoEntity.Creatives)
 private:
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* size_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_campaign_5fproto_2eproto();
  friend void protobuf_AssignDesc_campaign_5fproto_2eproto();
  friend void protobuf_ShutdownFile_campaign_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CampaignProtoEntity_Creatives* default_instance_;
};
// -------------------------------------------------------------------

class CampaignProtoEntity_Targeting_Frequency : public ::google::protobuf::Message {
 public:
  CampaignProtoEntity_Targeting_Frequency();
  virtual ~CampaignProtoEntity_Targeting_Frequency();

  CampaignProtoEntity_Targeting_Frequency(const CampaignProtoEntity_Targeting_Frequency& from);

  inline CampaignProtoEntity_Targeting_Frequency& operator=(const CampaignProtoEntity_Targeting_Frequency& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignProtoEntity_Targeting_Frequency& default_instance();

  void Swap(CampaignProtoEntity_Targeting_Frequency* other);

  // implements Message ----------------------------------------------

  CampaignProtoEntity_Targeting_Frequency* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampaignProtoEntity_Targeting_Frequency& from);
  void MergeFrom(const CampaignProtoEntity_Targeting_Frequency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 no_track = 1;
  inline bool has_no_track() const;
  inline void clear_no_track();
  static const int kNoTrackFieldNumber = 1;
  inline ::google::protobuf::uint32 no_track() const;
  inline void set_no_track(::google::protobuf::uint32 value);

  // optional uint32 five_minutes = 2;
  inline bool has_five_minutes() const;
  inline void clear_five_minutes();
  static const int kFiveMinutesFieldNumber = 2;
  inline ::google::protobuf::uint32 five_minutes() const;
  inline void set_five_minutes(::google::protobuf::uint32 value);

  // optional uint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional uint32 week = 4;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 4;
  inline ::google::protobuf::uint32 week() const;
  inline void set_week(::google::protobuf::uint32 value);

  // optional uint32 month = 5;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 5;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // optional uint32 lifetime = 6;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifetimeFieldNumber = 6;
  inline ::google::protobuf::uint32 lifetime() const;
  inline void set_lifetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.rj.targeting.protos.CampaignProtoEntity.Targeting.Frequency)
 private:
  inline void set_has_no_track();
  inline void clear_has_no_track();
  inline void set_has_five_minutes();
  inline void clear_has_five_minutes();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_lifetime();
  inline void clear_has_lifetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 no_track_;
  ::google::protobuf::uint32 five_minutes_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 week_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 lifetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_campaign_5fproto_2eproto();
  friend void protobuf_AssignDesc_campaign_5fproto_2eproto();
  friend void protobuf_ShutdownFile_campaign_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CampaignProtoEntity_Targeting_Frequency* default_instance_;
};
// -------------------------------------------------------------------

class CampaignProtoEntity_Targeting_AppCriteria : public ::google::protobuf::Message {
 public:
  CampaignProtoEntity_Targeting_AppCriteria();
  virtual ~CampaignProtoEntity_Targeting_AppCriteria();

  CampaignProtoEntity_Targeting_AppCriteria(const CampaignProtoEntity_Targeting_AppCriteria& from);

  inline CampaignProtoEntity_Targeting_AppCriteria& operator=(const CampaignProtoEntity_Targeting_AppCriteria& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignProtoEntity_Targeting_AppCriteria& default_instance();

  void Swap(CampaignProtoEntity_Targeting_AppCriteria* other);

  // implements Message ----------------------------------------------

  CampaignProtoEntity_Targeting_AppCriteria* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampaignProtoEntity_Targeting_AppCriteria& from);
  void MergeFrom(const CampaignProtoEntity_Targeting_AppCriteria& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool in = 1;
  inline bool has_in() const;
  inline void clear_in();
  static const int kInFieldNumber = 1;
  inline bool in() const;
  inline void set_in(bool value);

  // repeated uint32 ids = 2;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint32 value);
  inline void add_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:com.rj.targeting.protos.CampaignProtoEntity.Targeting.AppCriteria)
 private:
  inline void set_has_in();
  inline void clear_has_in();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ids_;
  bool in_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_campaign_5fproto_2eproto();
  friend void protobuf_AssignDesc_campaign_5fproto_2eproto();
  friend void protobuf_ShutdownFile_campaign_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CampaignProtoEntity_Targeting_AppCriteria* default_instance_;
};
// -------------------------------------------------------------------

class CampaignProtoEntity_Targeting : public ::google::protobuf::Message {
 public:
  CampaignProtoEntity_Targeting();
  virtual ~CampaignProtoEntity_Targeting();

  CampaignProtoEntity_Targeting(const CampaignProtoEntity_Targeting& from);

  inline CampaignProtoEntity_Targeting& operator=(const CampaignProtoEntity_Targeting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignProtoEntity_Targeting& default_instance();

  void Swap(CampaignProtoEntity_Targeting* other);

  // implements Message ----------------------------------------------

  CampaignProtoEntity_Targeting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampaignProtoEntity_Targeting& from);
  void MergeFrom(const CampaignProtoEntity_Targeting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CampaignProtoEntity_Targeting_Frequency Frequency;
  typedef CampaignProtoEntity_Targeting_AppCriteria AppCriteria;

  // accessors -------------------------------------------------------

  // optional string supplyTypeMobileWeb = 1;
  inline bool has_supplytypemobileweb() const;
  inline void clear_supplytypemobileweb();
  static const int kSupplyTypeMobileWebFieldNumber = 1;
  inline const ::std::string& supplytypemobileweb() const;
  inline void set_supplytypemobileweb(const ::std::string& value);
  inline void set_supplytypemobileweb(const char* value);
  inline void set_supplytypemobileweb(const char* value, size_t size);
  inline ::std::string* mutable_supplytypemobileweb();
  inline ::std::string* release_supplytypemobileweb();
  inline void set_allocated_supplytypemobileweb(::std::string* supplytypemobileweb);

  // optional string supplyTypeMobileApp = 2;
  inline bool has_supplytypemobileapp() const;
  inline void clear_supplytypemobileapp();
  static const int kSupplyTypeMobileAppFieldNumber = 2;
  inline const ::std::string& supplytypemobileapp() const;
  inline void set_supplytypemobileapp(const ::std::string& value);
  inline void set_supplytypemobileapp(const char* value);
  inline void set_supplytypemobileapp(const char* value, size_t size);
  inline ::std::string* mutable_supplytypemobileapp();
  inline ::std::string* release_supplytypemobileapp();
  inline void set_allocated_supplytypemobileapp(::std::string* supplytypemobileapp);

  // optional string deviceTypeTablet = 3;
  inline bool has_devicetypetablet() const;
  inline void clear_devicetypetablet();
  static const int kDeviceTypeTabletFieldNumber = 3;
  inline const ::std::string& devicetypetablet() const;
  inline void set_devicetypetablet(const ::std::string& value);
  inline void set_devicetypetablet(const char* value);
  inline void set_devicetypetablet(const char* value, size_t size);
  inline ::std::string* mutable_devicetypetablet();
  inline ::std::string* release_devicetypetablet();
  inline void set_allocated_devicetypetablet(::std::string* devicetypetablet);

  // optional string deviceTypePhone = 4;
  inline bool has_devicetypephone() const;
  inline void clear_devicetypephone();
  static const int kDeviceTypePhoneFieldNumber = 4;
  inline const ::std::string& devicetypephone() const;
  inline void set_devicetypephone(const ::std::string& value);
  inline void set_devicetypephone(const char* value);
  inline void set_devicetypephone(const char* value, size_t size);
  inline ::std::string* mutable_devicetypephone();
  inline ::std::string* release_devicetypephone();
  inline void set_allocated_devicetypephone(::std::string* devicetypephone);

  // optional uint32 trafficQuality = 5;
  inline bool has_trafficquality() const;
  inline void clear_trafficquality();
  static const int kTrafficQualityFieldNumber = 5;
  inline ::google::protobuf::uint32 trafficquality() const;
  inline void set_trafficquality(::google::protobuf::uint32 value);

  // optional string inventoryQuality = 6;
  inline bool has_inventoryquality() const;
  inline void clear_inventoryquality();
  static const int kInventoryQualityFieldNumber = 6;
  inline const ::std::string& inventoryquality() const;
  inline void set_inventoryquality(const ::std::string& value);
  inline void set_inventoryquality(const char* value);
  inline void set_inventoryquality(const char* value, size_t size);
  inline ::std::string* mutable_inventoryquality();
  inline ::std::string* release_inventoryquality();
  inline void set_allocated_inventoryquality(::std::string* inventoryquality);

  // optional .com.rj.targeting.protos.CampaignProtoEntity.Targeting.Frequency frequency = 7;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 7;
  inline const ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency& frequency() const;
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency* mutable_frequency();
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency* release_frequency();
  inline void set_allocated_frequency(::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency* frequency);

  // optional .com.rj.targeting.protos.CampaignProtoEntity.Targeting.AppCriteria directApps = 8;
  inline bool has_directapps() const;
  inline void clear_directapps();
  static const int kDirectAppsFieldNumber = 8;
  inline const ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria& directapps() const;
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* mutable_directapps();
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* release_directapps();
  inline void set_allocated_directapps(::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* directapps);

  // optional .com.rj.targeting.protos.CampaignProtoEntity.Targeting.AppCriteria inDirectApps = 9;
  inline bool has_indirectapps() const;
  inline void clear_indirectapps();
  static const int kInDirectAppsFieldNumber = 9;
  inline const ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria& indirectapps() const;
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* mutable_indirectapps();
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* release_indirectapps();
  inline void set_allocated_indirectapps(::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* indirectapps);

  // optional uint32 session = 10;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 10;
  inline ::google::protobuf::uint32 session() const;
  inline void set_session(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.rj.targeting.protos.CampaignProtoEntity.Targeting)
 private:
  inline void set_has_supplytypemobileweb();
  inline void clear_has_supplytypemobileweb();
  inline void set_has_supplytypemobileapp();
  inline void clear_has_supplytypemobileapp();
  inline void set_has_devicetypetablet();
  inline void clear_has_devicetypetablet();
  inline void set_has_devicetypephone();
  inline void clear_has_devicetypephone();
  inline void set_has_trafficquality();
  inline void clear_has_trafficquality();
  inline void set_has_inventoryquality();
  inline void clear_has_inventoryquality();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_directapps();
  inline void clear_has_directapps();
  inline void set_has_indirectapps();
  inline void clear_has_indirectapps();
  inline void set_has_session();
  inline void clear_has_session();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* supplytypemobileweb_;
  ::std::string* supplytypemobileapp_;
  ::std::string* devicetypetablet_;
  ::std::string* devicetypephone_;
  ::std::string* inventoryquality_;
  ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency* frequency_;
  ::google::protobuf::uint32 trafficquality_;
  ::google::protobuf::uint32 session_;
  ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* directapps_;
  ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* indirectapps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_campaign_5fproto_2eproto();
  friend void protobuf_AssignDesc_campaign_5fproto_2eproto();
  friend void protobuf_ShutdownFile_campaign_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CampaignProtoEntity_Targeting* default_instance_;
};
// -------------------------------------------------------------------

class CampaignProtoEntity : public ::google::protobuf::Message {
 public:
  CampaignProtoEntity();
  virtual ~CampaignProtoEntity();

  CampaignProtoEntity(const CampaignProtoEntity& from);

  inline CampaignProtoEntity& operator=(const CampaignProtoEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignProtoEntity& default_instance();

  void Swap(CampaignProtoEntity* other);

  // implements Message ----------------------------------------------

  CampaignProtoEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampaignProtoEntity& from);
  void MergeFrom(const CampaignProtoEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CampaignProtoEntity_Action Action;
  typedef CampaignProtoEntity_Creatives Creatives;
  typedef CampaignProtoEntity_Targeting Targeting;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string currency = 2;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // optional string state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // optional string biddingType = 4;
  inline bool has_biddingtype() const;
  inline void clear_biddingtype();
  static const int kBiddingTypeFieldNumber = 4;
  inline const ::std::string& biddingtype() const;
  inline void set_biddingtype(const ::std::string& value);
  inline void set_biddingtype(const char* value);
  inline void set_biddingtype(const char* value, size_t size);
  inline ::std::string* mutable_biddingtype();
  inline ::std::string* release_biddingtype();
  inline void set_allocated_biddingtype(::std::string* biddingtype);

  // optional string biddingValue = 5;
  inline bool has_biddingvalue() const;
  inline void clear_biddingvalue();
  static const int kBiddingValueFieldNumber = 5;
  inline const ::std::string& biddingvalue() const;
  inline void set_biddingvalue(const ::std::string& value);
  inline void set_biddingvalue(const char* value);
  inline void set_biddingvalue(const char* value, size_t size);
  inline ::std::string* mutable_biddingvalue();
  inline ::std::string* release_biddingvalue();
  inline void set_allocated_biddingvalue(::std::string* biddingvalue);

  // optional string advertiserId = 6;
  inline bool has_advertiserid() const;
  inline void clear_advertiserid();
  static const int kAdvertiserIdFieldNumber = 6;
  inline const ::std::string& advertiserid() const;
  inline void set_advertiserid(const ::std::string& value);
  inline void set_advertiserid(const char* value);
  inline void set_advertiserid(const char* value, size_t size);
  inline ::std::string* mutable_advertiserid();
  inline ::std::string* release_advertiserid();
  inline void set_allocated_advertiserid(::std::string* advertiserid);

  // optional double pacingRate = 7;
  inline bool has_pacingrate() const;
  inline void clear_pacingrate();
  static const int kPacingRateFieldNumber = 7;
  inline double pacingrate() const;
  inline void set_pacingrate(double value);

  // optional .com.rj.targeting.protos.CampaignProtoEntity.Action action = 8;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 8;
  inline const ::com::rj::targeting::protos::CampaignProtoEntity_Action& action() const;
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Action* mutable_action();
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Action* release_action();
  inline void set_allocated_action(::com::rj::targeting::protos::CampaignProtoEntity_Action* action);

  // repeated .com.rj.targeting.protos.CampaignProtoEntity.Creatives creatives = 9;
  inline int creatives_size() const;
  inline void clear_creatives();
  static const int kCreativesFieldNumber = 9;
  inline const ::com::rj::targeting::protos::CampaignProtoEntity_Creatives& creatives(int index) const;
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Creatives* mutable_creatives(int index);
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Creatives* add_creatives();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives >&
      creatives() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives >*
      mutable_creatives();

  // optional .com.rj.targeting.protos.CampaignProtoEntity.Targeting targeting = 10;
  inline bool has_targeting() const;
  inline void clear_targeting();
  static const int kTargetingFieldNumber = 10;
  inline const ::com::rj::targeting::protos::CampaignProtoEntity_Targeting& targeting() const;
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting* mutable_targeting();
  inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting* release_targeting();
  inline void set_allocated_targeting(::com::rj::targeting::protos::CampaignProtoEntity_Targeting* targeting);

  // optional bool externalBuying = 11;
  inline bool has_externalbuying() const;
  inline void clear_externalbuying();
  static const int kExternalBuyingFieldNumber = 11;
  inline bool externalbuying() const;
  inline void set_externalbuying(bool value);

  // optional string expectCpm = 12;
  inline bool has_expectcpm() const;
  inline void clear_expectcpm();
  static const int kExpectCpmFieldNumber = 12;
  inline const ::std::string& expectcpm() const;
  inline void set_expectcpm(const ::std::string& value);
  inline void set_expectcpm(const char* value);
  inline void set_expectcpm(const char* value, size_t size);
  inline ::std::string* mutable_expectcpm();
  inline ::std::string* release_expectcpm();
  inline void set_allocated_expectcpm(::std::string* expectcpm);

  // optional string thirdPartyExpectCpm = 13;
  inline bool has_thirdpartyexpectcpm() const;
  inline void clear_thirdpartyexpectcpm();
  static const int kThirdPartyExpectCpmFieldNumber = 13;
  inline const ::std::string& thirdpartyexpectcpm() const;
  inline void set_thirdpartyexpectcpm(const ::std::string& value);
  inline void set_thirdpartyexpectcpm(const char* value);
  inline void set_thirdpartyexpectcpm(const char* value, size_t size);
  inline ::std::string* mutable_thirdpartyexpectcpm();
  inline ::std::string* release_thirdpartyexpectcpm();
  inline void set_allocated_thirdpartyexpectcpm(::std::string* thirdpartyexpectcpm);

  // optional string thirdPartyBiddingType = 14;
  inline bool has_thirdpartybiddingtype() const;
  inline void clear_thirdpartybiddingtype();
  static const int kThirdPartyBiddingTypeFieldNumber = 14;
  inline const ::std::string& thirdpartybiddingtype() const;
  inline void set_thirdpartybiddingtype(const ::std::string& value);
  inline void set_thirdpartybiddingtype(const char* value);
  inline void set_thirdpartybiddingtype(const char* value, size_t size);
  inline ::std::string* mutable_thirdpartybiddingtype();
  inline ::std::string* release_thirdpartybiddingtype();
  inline void set_allocated_thirdpartybiddingtype(::std::string* thirdpartybiddingtype);

  // optional string thirdPartyBiddingValue = 15;
  inline bool has_thirdpartybiddingvalue() const;
  inline void clear_thirdpartybiddingvalue();
  static const int kThirdPartyBiddingValueFieldNumber = 15;
  inline const ::std::string& thirdpartybiddingvalue() const;
  inline void set_thirdpartybiddingvalue(const ::std::string& value);
  inline void set_thirdpartybiddingvalue(const char* value);
  inline void set_thirdpartybiddingvalue(const char* value, size_t size);
  inline ::std::string* mutable_thirdpartybiddingvalue();
  inline ::std::string* release_thirdpartybiddingvalue();
  inline void set_allocated_thirdpartybiddingvalue(::std::string* thirdpartybiddingvalue);

  // optional uint32 networkId = 16;
  inline bool has_networkid() const;
  inline void clear_networkid();
  static const int kNetworkIdFieldNumber = 16;
  inline ::google::protobuf::uint32 networkid() const;
  inline void set_networkid(::google::protobuf::uint32 value);

  // optional string publisherSource = 17;
  inline bool has_publishersource() const;
  inline void clear_publishersource();
  static const int kPublisherSourceFieldNumber = 17;
  inline const ::std::string& publishersource() const;
  inline void set_publishersource(const ::std::string& value);
  inline void set_publishersource(const char* value);
  inline void set_publishersource(const char* value, size_t size);
  inline ::std::string* mutable_publishersource();
  inline ::std::string* release_publishersource();
  inline void set_allocated_publishersource(::std::string* publishersource);

  // @@protoc_insertion_point(class_scope:com.rj.targeting.protos.CampaignProtoEntity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_biddingtype();
  inline void clear_has_biddingtype();
  inline void set_has_biddingvalue();
  inline void clear_has_biddingvalue();
  inline void set_has_advertiserid();
  inline void clear_has_advertiserid();
  inline void set_has_pacingrate();
  inline void clear_has_pacingrate();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_targeting();
  inline void clear_has_targeting();
  inline void set_has_externalbuying();
  inline void clear_has_externalbuying();
  inline void set_has_expectcpm();
  inline void clear_has_expectcpm();
  inline void set_has_thirdpartyexpectcpm();
  inline void clear_has_thirdpartyexpectcpm();
  inline void set_has_thirdpartybiddingtype();
  inline void clear_has_thirdpartybiddingtype();
  inline void set_has_thirdpartybiddingvalue();
  inline void clear_has_thirdpartybiddingvalue();
  inline void set_has_networkid();
  inline void clear_has_networkid();
  inline void set_has_publishersource();
  inline void clear_has_publishersource();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* currency_;
  ::std::string* state_;
  ::std::string* biddingtype_;
  ::std::string* biddingvalue_;
  ::std::string* advertiserid_;
  double pacingrate_;
  ::com::rj::targeting::protos::CampaignProtoEntity_Action* action_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives > creatives_;
  ::com::rj::targeting::protos::CampaignProtoEntity_Targeting* targeting_;
  ::std::string* expectcpm_;
  ::std::string* thirdpartyexpectcpm_;
  bool externalbuying_;
  ::google::protobuf::uint32 networkid_;
  ::std::string* thirdpartybiddingtype_;
  ::std::string* thirdpartybiddingvalue_;
  ::std::string* publishersource_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_campaign_5fproto_2eproto();
  friend void protobuf_AssignDesc_campaign_5fproto_2eproto();
  friend void protobuf_ShutdownFile_campaign_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CampaignProtoEntity* default_instance_;
};
// ===================================================================


// ===================================================================

// CampaignProtoEntity_Action

// optional string actionTypeName = 1;
inline bool CampaignProtoEntity_Action::has_actiontypename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampaignProtoEntity_Action::set_has_actiontypename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampaignProtoEntity_Action::clear_has_actiontypename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampaignProtoEntity_Action::clear_actiontypename() {
  if (actiontypename_ != &::google::protobuf::internal::kEmptyString) {
    actiontypename_->clear();
  }
  clear_has_actiontypename();
}
inline const ::std::string& CampaignProtoEntity_Action::actiontypename() const {
  return *actiontypename_;
}
inline void CampaignProtoEntity_Action::set_actiontypename(const ::std::string& value) {
  set_has_actiontypename();
  if (actiontypename_ == &::google::protobuf::internal::kEmptyString) {
    actiontypename_ = new ::std::string;
  }
  actiontypename_->assign(value);
}
inline void CampaignProtoEntity_Action::set_actiontypename(const char* value) {
  set_has_actiontypename();
  if (actiontypename_ == &::google::protobuf::internal::kEmptyString) {
    actiontypename_ = new ::std::string;
  }
  actiontypename_->assign(value);
}
inline void CampaignProtoEntity_Action::set_actiontypename(const char* value, size_t size) {
  set_has_actiontypename();
  if (actiontypename_ == &::google::protobuf::internal::kEmptyString) {
    actiontypename_ = new ::std::string;
  }
  actiontypename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Action::mutable_actiontypename() {
  set_has_actiontypename();
  if (actiontypename_ == &::google::protobuf::internal::kEmptyString) {
    actiontypename_ = new ::std::string;
  }
  return actiontypename_;
}
inline ::std::string* CampaignProtoEntity_Action::release_actiontypename() {
  clear_has_actiontypename();
  if (actiontypename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actiontypename_;
    actiontypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Action::set_allocated_actiontypename(::std::string* actiontypename) {
  if (actiontypename_ != &::google::protobuf::internal::kEmptyString) {
    delete actiontypename_;
  }
  if (actiontypename) {
    set_has_actiontypename();
    actiontypename_ = actiontypename;
  } else {
    clear_has_actiontypename();
    actiontypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string inApp = 2;
inline bool CampaignProtoEntity_Action::has_inapp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CampaignProtoEntity_Action::set_has_inapp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CampaignProtoEntity_Action::clear_has_inapp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CampaignProtoEntity_Action::clear_inapp() {
  if (inapp_ != &::google::protobuf::internal::kEmptyString) {
    inapp_->clear();
  }
  clear_has_inapp();
}
inline const ::std::string& CampaignProtoEntity_Action::inapp() const {
  return *inapp_;
}
inline void CampaignProtoEntity_Action::set_inapp(const ::std::string& value) {
  set_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    inapp_ = new ::std::string;
  }
  inapp_->assign(value);
}
inline void CampaignProtoEntity_Action::set_inapp(const char* value) {
  set_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    inapp_ = new ::std::string;
  }
  inapp_->assign(value);
}
inline void CampaignProtoEntity_Action::set_inapp(const char* value, size_t size) {
  set_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    inapp_ = new ::std::string;
  }
  inapp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Action::mutable_inapp() {
  set_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    inapp_ = new ::std::string;
  }
  return inapp_;
}
inline ::std::string* CampaignProtoEntity_Action::release_inapp() {
  clear_has_inapp();
  if (inapp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inapp_;
    inapp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Action::set_allocated_inapp(::std::string* inapp) {
  if (inapp_ != &::google::protobuf::internal::kEmptyString) {
    delete inapp_;
  }
  if (inapp) {
    set_has_inapp();
    inapp_ = inapp;
  } else {
    clear_has_inapp();
    inapp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 3;
inline bool CampaignProtoEntity_Action::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CampaignProtoEntity_Action::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CampaignProtoEntity_Action::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CampaignProtoEntity_Action::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CampaignProtoEntity_Action::content() const {
  return *content_;
}
inline void CampaignProtoEntity_Action::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CampaignProtoEntity_Action::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CampaignProtoEntity_Action::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Action::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* CampaignProtoEntity_Action::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Action::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CampaignProtoEntity_Creatives_Datas

// optional string id = 1;
inline bool CampaignProtoEntity_Creatives_Datas::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampaignProtoEntity_Creatives_Datas::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CampaignProtoEntity_Creatives_Datas::id() const {
  return *id_;
}
inline void CampaignProtoEntity_Creatives_Datas::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Creatives_Datas::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string categoryId = 2;
inline bool CampaignProtoEntity_Creatives_Datas::has_categoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CampaignProtoEntity_Creatives_Datas::set_has_categoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_has_categoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_categoryid() {
  if (categoryid_ != &::google::protobuf::internal::kEmptyString) {
    categoryid_->clear();
  }
  clear_has_categoryid();
}
inline const ::std::string& CampaignProtoEntity_Creatives_Datas::categoryid() const {
  return *categoryid_;
}
inline void CampaignProtoEntity_Creatives_Datas::set_categoryid(const ::std::string& value) {
  set_has_categoryid();
  if (categoryid_ == &::google::protobuf::internal::kEmptyString) {
    categoryid_ = new ::std::string;
  }
  categoryid_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_categoryid(const char* value) {
  set_has_categoryid();
  if (categoryid_ == &::google::protobuf::internal::kEmptyString) {
    categoryid_ = new ::std::string;
  }
  categoryid_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_categoryid(const char* value, size_t size) {
  set_has_categoryid();
  if (categoryid_ == &::google::protobuf::internal::kEmptyString) {
    categoryid_ = new ::std::string;
  }
  categoryid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::mutable_categoryid() {
  set_has_categoryid();
  if (categoryid_ == &::google::protobuf::internal::kEmptyString) {
    categoryid_ = new ::std::string;
  }
  return categoryid_;
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::release_categoryid() {
  clear_has_categoryid();
  if (categoryid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = categoryid_;
    categoryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Creatives_Datas::set_allocated_categoryid(::std::string* categoryid) {
  if (categoryid_ != &::google::protobuf::internal::kEmptyString) {
    delete categoryid_;
  }
  if (categoryid) {
    set_has_categoryid();
    categoryid_ = categoryid;
  } else {
    clear_has_categoryid();
    categoryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 3;
inline bool CampaignProtoEntity_Creatives_Datas::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CampaignProtoEntity_Creatives_Datas::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& CampaignProtoEntity_Creatives_Datas::channel() const {
  return *channel_;
}
inline void CampaignProtoEntity_Creatives_Datas::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Creatives_Datas::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mediaTypeId = 4;
inline bool CampaignProtoEntity_Creatives_Datas::has_mediatypeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CampaignProtoEntity_Creatives_Datas::set_has_mediatypeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_has_mediatypeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_mediatypeid() {
  if (mediatypeid_ != &::google::protobuf::internal::kEmptyString) {
    mediatypeid_->clear();
  }
  clear_has_mediatypeid();
}
inline const ::std::string& CampaignProtoEntity_Creatives_Datas::mediatypeid() const {
  return *mediatypeid_;
}
inline void CampaignProtoEntity_Creatives_Datas::set_mediatypeid(const ::std::string& value) {
  set_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediatypeid_ = new ::std::string;
  }
  mediatypeid_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_mediatypeid(const char* value) {
  set_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediatypeid_ = new ::std::string;
  }
  mediatypeid_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_mediatypeid(const char* value, size_t size) {
  set_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediatypeid_ = new ::std::string;
  }
  mediatypeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::mutable_mediatypeid() {
  set_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediatypeid_ = new ::std::string;
  }
  return mediatypeid_;
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::release_mediatypeid() {
  clear_has_mediatypeid();
  if (mediatypeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mediatypeid_;
    mediatypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Creatives_Datas::set_allocated_mediatypeid(::std::string* mediatypeid) {
  if (mediatypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete mediatypeid_;
  }
  if (mediatypeid) {
    set_has_mediatypeid();
    mediatypeid_ = mediatypeid;
  } else {
    clear_has_mediatypeid();
    mediatypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mediaSubTypeId = 5;
inline bool CampaignProtoEntity_Creatives_Datas::has_mediasubtypeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CampaignProtoEntity_Creatives_Datas::set_has_mediasubtypeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_has_mediasubtypeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CampaignProtoEntity_Creatives_Datas::clear_mediasubtypeid() {
  if (mediasubtypeid_ != &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_->clear();
  }
  clear_has_mediasubtypeid();
}
inline const ::std::string& CampaignProtoEntity_Creatives_Datas::mediasubtypeid() const {
  return *mediasubtypeid_;
}
inline void CampaignProtoEntity_Creatives_Datas::set_mediasubtypeid(const ::std::string& value) {
  set_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_ = new ::std::string;
  }
  mediasubtypeid_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_mediasubtypeid(const char* value) {
  set_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_ = new ::std::string;
  }
  mediasubtypeid_->assign(value);
}
inline void CampaignProtoEntity_Creatives_Datas::set_mediasubtypeid(const char* value, size_t size) {
  set_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_ = new ::std::string;
  }
  mediasubtypeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::mutable_mediasubtypeid() {
  set_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    mediasubtypeid_ = new ::std::string;
  }
  return mediasubtypeid_;
}
inline ::std::string* CampaignProtoEntity_Creatives_Datas::release_mediasubtypeid() {
  clear_has_mediasubtypeid();
  if (mediasubtypeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mediasubtypeid_;
    mediasubtypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Creatives_Datas::set_allocated_mediasubtypeid(::std::string* mediasubtypeid) {
  if (mediasubtypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete mediasubtypeid_;
  }
  if (mediasubtypeid) {
    set_has_mediasubtypeid();
    mediasubtypeid_ = mediasubtypeid;
  } else {
    clear_has_mediasubtypeid();
    mediasubtypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CampaignProtoEntity_Creatives

// optional string size = 1;
inline bool CampaignProtoEntity_Creatives::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampaignProtoEntity_Creatives::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampaignProtoEntity_Creatives::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampaignProtoEntity_Creatives::clear_size() {
  if (size_ != &::google::protobuf::internal::kEmptyString) {
    size_->clear();
  }
  clear_has_size();
}
inline const ::std::string& CampaignProtoEntity_Creatives::size() const {
  return *size_;
}
inline void CampaignProtoEntity_Creatives::set_size(const ::std::string& value) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(value);
}
inline void CampaignProtoEntity_Creatives::set_size(const char* value) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(value);
}
inline void CampaignProtoEntity_Creatives::set_size(const char* value, size_t size) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Creatives::mutable_size() {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  return size_;
}
inline ::std::string* CampaignProtoEntity_Creatives::release_size() {
  clear_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = size_;
    size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Creatives::set_allocated_size(::std::string* size) {
  if (size_ != &::google::protobuf::internal::kEmptyString) {
    delete size_;
  }
  if (size) {
    set_has_size();
    size_ = size;
  } else {
    clear_has_size();
    size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.targeting.protos.CampaignProtoEntity.Creatives.Datas datas = 2;
inline int CampaignProtoEntity_Creatives::datas_size() const {
  return datas_.size();
}
inline void CampaignProtoEntity_Creatives::clear_datas() {
  datas_.Clear();
}
inline const ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas& CampaignProtoEntity_Creatives::datas(int index) const {
  return datas_.Get(index);
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas* CampaignProtoEntity_Creatives::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas* CampaignProtoEntity_Creatives::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas >&
CampaignProtoEntity_Creatives::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives_Datas >*
CampaignProtoEntity_Creatives::mutable_datas() {
  return &datas_;
}

// -------------------------------------------------------------------

// CampaignProtoEntity_Targeting_Frequency

// optional uint32 no_track = 1;
inline bool CampaignProtoEntity_Targeting_Frequency::has_no_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_has_no_track() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_has_no_track() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_no_track() {
  no_track_ = 0u;
  clear_has_no_track();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting_Frequency::no_track() const {
  return no_track_;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_no_track(::google::protobuf::uint32 value) {
  set_has_no_track();
  no_track_ = value;
}

// optional uint32 five_minutes = 2;
inline bool CampaignProtoEntity_Targeting_Frequency::has_five_minutes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_has_five_minutes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_has_five_minutes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_five_minutes() {
  five_minutes_ = 0u;
  clear_has_five_minutes();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting_Frequency::five_minutes() const {
  return five_minutes_;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_five_minutes(::google::protobuf::uint32 value) {
  set_has_five_minutes();
  five_minutes_ = value;
}

// optional uint32 day = 3;
inline bool CampaignProtoEntity_Targeting_Frequency::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting_Frequency::day() const {
  return day_;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// optional uint32 week = 4;
inline bool CampaignProtoEntity_Targeting_Frequency::has_week() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_has_week() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_has_week() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting_Frequency::week() const {
  return week_;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
}

// optional uint32 month = 5;
inline bool CampaignProtoEntity_Targeting_Frequency::has_month() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_has_month() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_has_month() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting_Frequency::month() const {
  return month_;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// optional uint32 lifetime = 6;
inline bool CampaignProtoEntity_Targeting_Frequency::has_lifetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_has_lifetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CampaignProtoEntity_Targeting_Frequency::clear_lifetime() {
  lifetime_ = 0u;
  clear_has_lifetime();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting_Frequency::lifetime() const {
  return lifetime_;
}
inline void CampaignProtoEntity_Targeting_Frequency::set_lifetime(::google::protobuf::uint32 value) {
  set_has_lifetime();
  lifetime_ = value;
}

// -------------------------------------------------------------------

// CampaignProtoEntity_Targeting_AppCriteria

// optional bool in = 1;
inline bool CampaignProtoEntity_Targeting_AppCriteria::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampaignProtoEntity_Targeting_AppCriteria::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampaignProtoEntity_Targeting_AppCriteria::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampaignProtoEntity_Targeting_AppCriteria::clear_in() {
  in_ = false;
  clear_has_in();
}
inline bool CampaignProtoEntity_Targeting_AppCriteria::in() const {
  return in_;
}
inline void CampaignProtoEntity_Targeting_AppCriteria::set_in(bool value) {
  set_has_in();
  in_ = value;
}

// repeated uint32 ids = 2;
inline int CampaignProtoEntity_Targeting_AppCriteria::ids_size() const {
  return ids_.size();
}
inline void CampaignProtoEntity_Targeting_AppCriteria::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting_AppCriteria::ids(int index) const {
  return ids_.Get(index);
}
inline void CampaignProtoEntity_Targeting_AppCriteria::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
}
inline void CampaignProtoEntity_Targeting_AppCriteria::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CampaignProtoEntity_Targeting_AppCriteria::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CampaignProtoEntity_Targeting_AppCriteria::mutable_ids() {
  return &ids_;
}

// -------------------------------------------------------------------

// CampaignProtoEntity_Targeting

// optional string supplyTypeMobileWeb = 1;
inline bool CampaignProtoEntity_Targeting::has_supplytypemobileweb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_supplytypemobileweb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampaignProtoEntity_Targeting::clear_has_supplytypemobileweb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampaignProtoEntity_Targeting::clear_supplytypemobileweb() {
  if (supplytypemobileweb_ != &::google::protobuf::internal::kEmptyString) {
    supplytypemobileweb_->clear();
  }
  clear_has_supplytypemobileweb();
}
inline const ::std::string& CampaignProtoEntity_Targeting::supplytypemobileweb() const {
  return *supplytypemobileweb_;
}
inline void CampaignProtoEntity_Targeting::set_supplytypemobileweb(const ::std::string& value) {
  set_has_supplytypemobileweb();
  if (supplytypemobileweb_ == &::google::protobuf::internal::kEmptyString) {
    supplytypemobileweb_ = new ::std::string;
  }
  supplytypemobileweb_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_supplytypemobileweb(const char* value) {
  set_has_supplytypemobileweb();
  if (supplytypemobileweb_ == &::google::protobuf::internal::kEmptyString) {
    supplytypemobileweb_ = new ::std::string;
  }
  supplytypemobileweb_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_supplytypemobileweb(const char* value, size_t size) {
  set_has_supplytypemobileweb();
  if (supplytypemobileweb_ == &::google::protobuf::internal::kEmptyString) {
    supplytypemobileweb_ = new ::std::string;
  }
  supplytypemobileweb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Targeting::mutable_supplytypemobileweb() {
  set_has_supplytypemobileweb();
  if (supplytypemobileweb_ == &::google::protobuf::internal::kEmptyString) {
    supplytypemobileweb_ = new ::std::string;
  }
  return supplytypemobileweb_;
}
inline ::std::string* CampaignProtoEntity_Targeting::release_supplytypemobileweb() {
  clear_has_supplytypemobileweb();
  if (supplytypemobileweb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = supplytypemobileweb_;
    supplytypemobileweb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Targeting::set_allocated_supplytypemobileweb(::std::string* supplytypemobileweb) {
  if (supplytypemobileweb_ != &::google::protobuf::internal::kEmptyString) {
    delete supplytypemobileweb_;
  }
  if (supplytypemobileweb) {
    set_has_supplytypemobileweb();
    supplytypemobileweb_ = supplytypemobileweb;
  } else {
    clear_has_supplytypemobileweb();
    supplytypemobileweb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string supplyTypeMobileApp = 2;
inline bool CampaignProtoEntity_Targeting::has_supplytypemobileapp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_supplytypemobileapp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CampaignProtoEntity_Targeting::clear_has_supplytypemobileapp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CampaignProtoEntity_Targeting::clear_supplytypemobileapp() {
  if (supplytypemobileapp_ != &::google::protobuf::internal::kEmptyString) {
    supplytypemobileapp_->clear();
  }
  clear_has_supplytypemobileapp();
}
inline const ::std::string& CampaignProtoEntity_Targeting::supplytypemobileapp() const {
  return *supplytypemobileapp_;
}
inline void CampaignProtoEntity_Targeting::set_supplytypemobileapp(const ::std::string& value) {
  set_has_supplytypemobileapp();
  if (supplytypemobileapp_ == &::google::protobuf::internal::kEmptyString) {
    supplytypemobileapp_ = new ::std::string;
  }
  supplytypemobileapp_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_supplytypemobileapp(const char* value) {
  set_has_supplytypemobileapp();
  if (supplytypemobileapp_ == &::google::protobuf::internal::kEmptyString) {
    supplytypemobileapp_ = new ::std::string;
  }
  supplytypemobileapp_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_supplytypemobileapp(const char* value, size_t size) {
  set_has_supplytypemobileapp();
  if (supplytypemobileapp_ == &::google::protobuf::internal::kEmptyString) {
    supplytypemobileapp_ = new ::std::string;
  }
  supplytypemobileapp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Targeting::mutable_supplytypemobileapp() {
  set_has_supplytypemobileapp();
  if (supplytypemobileapp_ == &::google::protobuf::internal::kEmptyString) {
    supplytypemobileapp_ = new ::std::string;
  }
  return supplytypemobileapp_;
}
inline ::std::string* CampaignProtoEntity_Targeting::release_supplytypemobileapp() {
  clear_has_supplytypemobileapp();
  if (supplytypemobileapp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = supplytypemobileapp_;
    supplytypemobileapp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Targeting::set_allocated_supplytypemobileapp(::std::string* supplytypemobileapp) {
  if (supplytypemobileapp_ != &::google::protobuf::internal::kEmptyString) {
    delete supplytypemobileapp_;
  }
  if (supplytypemobileapp) {
    set_has_supplytypemobileapp();
    supplytypemobileapp_ = supplytypemobileapp;
  } else {
    clear_has_supplytypemobileapp();
    supplytypemobileapp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceTypeTablet = 3;
inline bool CampaignProtoEntity_Targeting::has_devicetypetablet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_devicetypetablet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CampaignProtoEntity_Targeting::clear_has_devicetypetablet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CampaignProtoEntity_Targeting::clear_devicetypetablet() {
  if (devicetypetablet_ != &::google::protobuf::internal::kEmptyString) {
    devicetypetablet_->clear();
  }
  clear_has_devicetypetablet();
}
inline const ::std::string& CampaignProtoEntity_Targeting::devicetypetablet() const {
  return *devicetypetablet_;
}
inline void CampaignProtoEntity_Targeting::set_devicetypetablet(const ::std::string& value) {
  set_has_devicetypetablet();
  if (devicetypetablet_ == &::google::protobuf::internal::kEmptyString) {
    devicetypetablet_ = new ::std::string;
  }
  devicetypetablet_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_devicetypetablet(const char* value) {
  set_has_devicetypetablet();
  if (devicetypetablet_ == &::google::protobuf::internal::kEmptyString) {
    devicetypetablet_ = new ::std::string;
  }
  devicetypetablet_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_devicetypetablet(const char* value, size_t size) {
  set_has_devicetypetablet();
  if (devicetypetablet_ == &::google::protobuf::internal::kEmptyString) {
    devicetypetablet_ = new ::std::string;
  }
  devicetypetablet_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Targeting::mutable_devicetypetablet() {
  set_has_devicetypetablet();
  if (devicetypetablet_ == &::google::protobuf::internal::kEmptyString) {
    devicetypetablet_ = new ::std::string;
  }
  return devicetypetablet_;
}
inline ::std::string* CampaignProtoEntity_Targeting::release_devicetypetablet() {
  clear_has_devicetypetablet();
  if (devicetypetablet_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicetypetablet_;
    devicetypetablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Targeting::set_allocated_devicetypetablet(::std::string* devicetypetablet) {
  if (devicetypetablet_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetypetablet_;
  }
  if (devicetypetablet) {
    set_has_devicetypetablet();
    devicetypetablet_ = devicetypetablet;
  } else {
    clear_has_devicetypetablet();
    devicetypetablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceTypePhone = 4;
inline bool CampaignProtoEntity_Targeting::has_devicetypephone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_devicetypephone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CampaignProtoEntity_Targeting::clear_has_devicetypephone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CampaignProtoEntity_Targeting::clear_devicetypephone() {
  if (devicetypephone_ != &::google::protobuf::internal::kEmptyString) {
    devicetypephone_->clear();
  }
  clear_has_devicetypephone();
}
inline const ::std::string& CampaignProtoEntity_Targeting::devicetypephone() const {
  return *devicetypephone_;
}
inline void CampaignProtoEntity_Targeting::set_devicetypephone(const ::std::string& value) {
  set_has_devicetypephone();
  if (devicetypephone_ == &::google::protobuf::internal::kEmptyString) {
    devicetypephone_ = new ::std::string;
  }
  devicetypephone_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_devicetypephone(const char* value) {
  set_has_devicetypephone();
  if (devicetypephone_ == &::google::protobuf::internal::kEmptyString) {
    devicetypephone_ = new ::std::string;
  }
  devicetypephone_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_devicetypephone(const char* value, size_t size) {
  set_has_devicetypephone();
  if (devicetypephone_ == &::google::protobuf::internal::kEmptyString) {
    devicetypephone_ = new ::std::string;
  }
  devicetypephone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Targeting::mutable_devicetypephone() {
  set_has_devicetypephone();
  if (devicetypephone_ == &::google::protobuf::internal::kEmptyString) {
    devicetypephone_ = new ::std::string;
  }
  return devicetypephone_;
}
inline ::std::string* CampaignProtoEntity_Targeting::release_devicetypephone() {
  clear_has_devicetypephone();
  if (devicetypephone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicetypephone_;
    devicetypephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Targeting::set_allocated_devicetypephone(::std::string* devicetypephone) {
  if (devicetypephone_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetypephone_;
  }
  if (devicetypephone) {
    set_has_devicetypephone();
    devicetypephone_ = devicetypephone;
  } else {
    clear_has_devicetypephone();
    devicetypephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 trafficQuality = 5;
inline bool CampaignProtoEntity_Targeting::has_trafficquality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_trafficquality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CampaignProtoEntity_Targeting::clear_has_trafficquality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CampaignProtoEntity_Targeting::clear_trafficquality() {
  trafficquality_ = 0u;
  clear_has_trafficquality();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting::trafficquality() const {
  return trafficquality_;
}
inline void CampaignProtoEntity_Targeting::set_trafficquality(::google::protobuf::uint32 value) {
  set_has_trafficquality();
  trafficquality_ = value;
}

// optional string inventoryQuality = 6;
inline bool CampaignProtoEntity_Targeting::has_inventoryquality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_inventoryquality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CampaignProtoEntity_Targeting::clear_has_inventoryquality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CampaignProtoEntity_Targeting::clear_inventoryquality() {
  if (inventoryquality_ != &::google::protobuf::internal::kEmptyString) {
    inventoryquality_->clear();
  }
  clear_has_inventoryquality();
}
inline const ::std::string& CampaignProtoEntity_Targeting::inventoryquality() const {
  return *inventoryquality_;
}
inline void CampaignProtoEntity_Targeting::set_inventoryquality(const ::std::string& value) {
  set_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    inventoryquality_ = new ::std::string;
  }
  inventoryquality_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_inventoryquality(const char* value) {
  set_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    inventoryquality_ = new ::std::string;
  }
  inventoryquality_->assign(value);
}
inline void CampaignProtoEntity_Targeting::set_inventoryquality(const char* value, size_t size) {
  set_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    inventoryquality_ = new ::std::string;
  }
  inventoryquality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity_Targeting::mutable_inventoryquality() {
  set_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    inventoryquality_ = new ::std::string;
  }
  return inventoryquality_;
}
inline ::std::string* CampaignProtoEntity_Targeting::release_inventoryquality() {
  clear_has_inventoryquality();
  if (inventoryquality_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inventoryquality_;
    inventoryquality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity_Targeting::set_allocated_inventoryquality(::std::string* inventoryquality) {
  if (inventoryquality_ != &::google::protobuf::internal::kEmptyString) {
    delete inventoryquality_;
  }
  if (inventoryquality) {
    set_has_inventoryquality();
    inventoryquality_ = inventoryquality;
  } else {
    clear_has_inventoryquality();
    inventoryquality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.targeting.protos.CampaignProtoEntity.Targeting.Frequency frequency = 7;
inline bool CampaignProtoEntity_Targeting::has_frequency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_frequency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CampaignProtoEntity_Targeting::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CampaignProtoEntity_Targeting::clear_frequency() {
  if (frequency_ != NULL) frequency_->::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency::Clear();
  clear_has_frequency();
}
inline const ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency& CampaignProtoEntity_Targeting::frequency() const {
  return frequency_ != NULL ? *frequency_ : *default_instance_->frequency_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency* CampaignProtoEntity_Targeting::mutable_frequency() {
  set_has_frequency();
  if (frequency_ == NULL) frequency_ = new ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency;
  return frequency_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency* CampaignProtoEntity_Targeting::release_frequency() {
  clear_has_frequency();
  ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency* temp = frequency_;
  frequency_ = NULL;
  return temp;
}
inline void CampaignProtoEntity_Targeting::set_allocated_frequency(::com::rj::targeting::protos::CampaignProtoEntity_Targeting_Frequency* frequency) {
  delete frequency_;
  frequency_ = frequency;
  if (frequency) {
    set_has_frequency();
  } else {
    clear_has_frequency();
  }
}

// optional .com.rj.targeting.protos.CampaignProtoEntity.Targeting.AppCriteria directApps = 8;
inline bool CampaignProtoEntity_Targeting::has_directapps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_directapps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CampaignProtoEntity_Targeting::clear_has_directapps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CampaignProtoEntity_Targeting::clear_directapps() {
  if (directapps_ != NULL) directapps_->::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria::Clear();
  clear_has_directapps();
}
inline const ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria& CampaignProtoEntity_Targeting::directapps() const {
  return directapps_ != NULL ? *directapps_ : *default_instance_->directapps_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* CampaignProtoEntity_Targeting::mutable_directapps() {
  set_has_directapps();
  if (directapps_ == NULL) directapps_ = new ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria;
  return directapps_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* CampaignProtoEntity_Targeting::release_directapps() {
  clear_has_directapps();
  ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* temp = directapps_;
  directapps_ = NULL;
  return temp;
}
inline void CampaignProtoEntity_Targeting::set_allocated_directapps(::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* directapps) {
  delete directapps_;
  directapps_ = directapps;
  if (directapps) {
    set_has_directapps();
  } else {
    clear_has_directapps();
  }
}

// optional .com.rj.targeting.protos.CampaignProtoEntity.Targeting.AppCriteria inDirectApps = 9;
inline bool CampaignProtoEntity_Targeting::has_indirectapps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_indirectapps() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CampaignProtoEntity_Targeting::clear_has_indirectapps() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CampaignProtoEntity_Targeting::clear_indirectapps() {
  if (indirectapps_ != NULL) indirectapps_->::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria::Clear();
  clear_has_indirectapps();
}
inline const ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria& CampaignProtoEntity_Targeting::indirectapps() const {
  return indirectapps_ != NULL ? *indirectapps_ : *default_instance_->indirectapps_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* CampaignProtoEntity_Targeting::mutable_indirectapps() {
  set_has_indirectapps();
  if (indirectapps_ == NULL) indirectapps_ = new ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria;
  return indirectapps_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* CampaignProtoEntity_Targeting::release_indirectapps() {
  clear_has_indirectapps();
  ::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* temp = indirectapps_;
  indirectapps_ = NULL;
  return temp;
}
inline void CampaignProtoEntity_Targeting::set_allocated_indirectapps(::com::rj::targeting::protos::CampaignProtoEntity_Targeting_AppCriteria* indirectapps) {
  delete indirectapps_;
  indirectapps_ = indirectapps;
  if (indirectapps) {
    set_has_indirectapps();
  } else {
    clear_has_indirectapps();
  }
}

// optional uint32 session = 10;
inline bool CampaignProtoEntity_Targeting::has_session() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CampaignProtoEntity_Targeting::set_has_session() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CampaignProtoEntity_Targeting::clear_has_session() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CampaignProtoEntity_Targeting::clear_session() {
  session_ = 0u;
  clear_has_session();
}
inline ::google::protobuf::uint32 CampaignProtoEntity_Targeting::session() const {
  return session_;
}
inline void CampaignProtoEntity_Targeting::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
}

// -------------------------------------------------------------------

// CampaignProtoEntity

// optional string id = 1;
inline bool CampaignProtoEntity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampaignProtoEntity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampaignProtoEntity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampaignProtoEntity::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CampaignProtoEntity::id() const {
  return *id_;
}
inline void CampaignProtoEntity::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void CampaignProtoEntity::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void CampaignProtoEntity::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* CampaignProtoEntity::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string currency = 2;
inline bool CampaignProtoEntity::has_currency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CampaignProtoEntity::set_has_currency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CampaignProtoEntity::clear_has_currency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CampaignProtoEntity::clear_currency() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& CampaignProtoEntity::currency() const {
  return *currency_;
}
inline void CampaignProtoEntity::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void CampaignProtoEntity::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void CampaignProtoEntity::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  return currency_;
}
inline ::std::string* CampaignProtoEntity::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string state = 3;
inline bool CampaignProtoEntity::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CampaignProtoEntity::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CampaignProtoEntity::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CampaignProtoEntity::clear_state() {
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& CampaignProtoEntity::state() const {
  return *state_;
}
inline void CampaignProtoEntity::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void CampaignProtoEntity::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void CampaignProtoEntity::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  return state_;
}
inline ::std::string* CampaignProtoEntity::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string biddingType = 4;
inline bool CampaignProtoEntity::has_biddingtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CampaignProtoEntity::set_has_biddingtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CampaignProtoEntity::clear_has_biddingtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CampaignProtoEntity::clear_biddingtype() {
  if (biddingtype_ != &::google::protobuf::internal::kEmptyString) {
    biddingtype_->clear();
  }
  clear_has_biddingtype();
}
inline const ::std::string& CampaignProtoEntity::biddingtype() const {
  return *biddingtype_;
}
inline void CampaignProtoEntity::set_biddingtype(const ::std::string& value) {
  set_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    biddingtype_ = new ::std::string;
  }
  biddingtype_->assign(value);
}
inline void CampaignProtoEntity::set_biddingtype(const char* value) {
  set_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    biddingtype_ = new ::std::string;
  }
  biddingtype_->assign(value);
}
inline void CampaignProtoEntity::set_biddingtype(const char* value, size_t size) {
  set_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    biddingtype_ = new ::std::string;
  }
  biddingtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_biddingtype() {
  set_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    biddingtype_ = new ::std::string;
  }
  return biddingtype_;
}
inline ::std::string* CampaignProtoEntity::release_biddingtype() {
  clear_has_biddingtype();
  if (biddingtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = biddingtype_;
    biddingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_biddingtype(::std::string* biddingtype) {
  if (biddingtype_ != &::google::protobuf::internal::kEmptyString) {
    delete biddingtype_;
  }
  if (biddingtype) {
    set_has_biddingtype();
    biddingtype_ = biddingtype;
  } else {
    clear_has_biddingtype();
    biddingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string biddingValue = 5;
inline bool CampaignProtoEntity::has_biddingvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CampaignProtoEntity::set_has_biddingvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CampaignProtoEntity::clear_has_biddingvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CampaignProtoEntity::clear_biddingvalue() {
  if (biddingvalue_ != &::google::protobuf::internal::kEmptyString) {
    biddingvalue_->clear();
  }
  clear_has_biddingvalue();
}
inline const ::std::string& CampaignProtoEntity::biddingvalue() const {
  return *biddingvalue_;
}
inline void CampaignProtoEntity::set_biddingvalue(const ::std::string& value) {
  set_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    biddingvalue_ = new ::std::string;
  }
  biddingvalue_->assign(value);
}
inline void CampaignProtoEntity::set_biddingvalue(const char* value) {
  set_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    biddingvalue_ = new ::std::string;
  }
  biddingvalue_->assign(value);
}
inline void CampaignProtoEntity::set_biddingvalue(const char* value, size_t size) {
  set_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    biddingvalue_ = new ::std::string;
  }
  biddingvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_biddingvalue() {
  set_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    biddingvalue_ = new ::std::string;
  }
  return biddingvalue_;
}
inline ::std::string* CampaignProtoEntity::release_biddingvalue() {
  clear_has_biddingvalue();
  if (biddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = biddingvalue_;
    biddingvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_biddingvalue(::std::string* biddingvalue) {
  if (biddingvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete biddingvalue_;
  }
  if (biddingvalue) {
    set_has_biddingvalue();
    biddingvalue_ = biddingvalue;
  } else {
    clear_has_biddingvalue();
    biddingvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string advertiserId = 6;
inline bool CampaignProtoEntity::has_advertiserid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CampaignProtoEntity::set_has_advertiserid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CampaignProtoEntity::clear_has_advertiserid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CampaignProtoEntity::clear_advertiserid() {
  if (advertiserid_ != &::google::protobuf::internal::kEmptyString) {
    advertiserid_->clear();
  }
  clear_has_advertiserid();
}
inline const ::std::string& CampaignProtoEntity::advertiserid() const {
  return *advertiserid_;
}
inline void CampaignProtoEntity::set_advertiserid(const ::std::string& value) {
  set_has_advertiserid();
  if (advertiserid_ == &::google::protobuf::internal::kEmptyString) {
    advertiserid_ = new ::std::string;
  }
  advertiserid_->assign(value);
}
inline void CampaignProtoEntity::set_advertiserid(const char* value) {
  set_has_advertiserid();
  if (advertiserid_ == &::google::protobuf::internal::kEmptyString) {
    advertiserid_ = new ::std::string;
  }
  advertiserid_->assign(value);
}
inline void CampaignProtoEntity::set_advertiserid(const char* value, size_t size) {
  set_has_advertiserid();
  if (advertiserid_ == &::google::protobuf::internal::kEmptyString) {
    advertiserid_ = new ::std::string;
  }
  advertiserid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_advertiserid() {
  set_has_advertiserid();
  if (advertiserid_ == &::google::protobuf::internal::kEmptyString) {
    advertiserid_ = new ::std::string;
  }
  return advertiserid_;
}
inline ::std::string* CampaignProtoEntity::release_advertiserid() {
  clear_has_advertiserid();
  if (advertiserid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = advertiserid_;
    advertiserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_advertiserid(::std::string* advertiserid) {
  if (advertiserid_ != &::google::protobuf::internal::kEmptyString) {
    delete advertiserid_;
  }
  if (advertiserid) {
    set_has_advertiserid();
    advertiserid_ = advertiserid;
  } else {
    clear_has_advertiserid();
    advertiserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double pacingRate = 7;
inline bool CampaignProtoEntity::has_pacingrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CampaignProtoEntity::set_has_pacingrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CampaignProtoEntity::clear_has_pacingrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CampaignProtoEntity::clear_pacingrate() {
  pacingrate_ = 0;
  clear_has_pacingrate();
}
inline double CampaignProtoEntity::pacingrate() const {
  return pacingrate_;
}
inline void CampaignProtoEntity::set_pacingrate(double value) {
  set_has_pacingrate();
  pacingrate_ = value;
}

// optional .com.rj.targeting.protos.CampaignProtoEntity.Action action = 8;
inline bool CampaignProtoEntity::has_action() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CampaignProtoEntity::set_has_action() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CampaignProtoEntity::clear_has_action() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CampaignProtoEntity::clear_action() {
  if (action_ != NULL) action_->::com::rj::targeting::protos::CampaignProtoEntity_Action::Clear();
  clear_has_action();
}
inline const ::com::rj::targeting::protos::CampaignProtoEntity_Action& CampaignProtoEntity::action() const {
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Action* CampaignProtoEntity::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::com::rj::targeting::protos::CampaignProtoEntity_Action;
  return action_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Action* CampaignProtoEntity::release_action() {
  clear_has_action();
  ::com::rj::targeting::protos::CampaignProtoEntity_Action* temp = action_;
  action_ = NULL;
  return temp;
}
inline void CampaignProtoEntity::set_allocated_action(::com::rj::targeting::protos::CampaignProtoEntity_Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
}

// repeated .com.rj.targeting.protos.CampaignProtoEntity.Creatives creatives = 9;
inline int CampaignProtoEntity::creatives_size() const {
  return creatives_.size();
}
inline void CampaignProtoEntity::clear_creatives() {
  creatives_.Clear();
}
inline const ::com::rj::targeting::protos::CampaignProtoEntity_Creatives& CampaignProtoEntity::creatives(int index) const {
  return creatives_.Get(index);
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Creatives* CampaignProtoEntity::mutable_creatives(int index) {
  return creatives_.Mutable(index);
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Creatives* CampaignProtoEntity::add_creatives() {
  return creatives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives >&
CampaignProtoEntity::creatives() const {
  return creatives_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::targeting::protos::CampaignProtoEntity_Creatives >*
CampaignProtoEntity::mutable_creatives() {
  return &creatives_;
}

// optional .com.rj.targeting.protos.CampaignProtoEntity.Targeting targeting = 10;
inline bool CampaignProtoEntity::has_targeting() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CampaignProtoEntity::set_has_targeting() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CampaignProtoEntity::clear_has_targeting() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CampaignProtoEntity::clear_targeting() {
  if (targeting_ != NULL) targeting_->::com::rj::targeting::protos::CampaignProtoEntity_Targeting::Clear();
  clear_has_targeting();
}
inline const ::com::rj::targeting::protos::CampaignProtoEntity_Targeting& CampaignProtoEntity::targeting() const {
  return targeting_ != NULL ? *targeting_ : *default_instance_->targeting_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting* CampaignProtoEntity::mutable_targeting() {
  set_has_targeting();
  if (targeting_ == NULL) targeting_ = new ::com::rj::targeting::protos::CampaignProtoEntity_Targeting;
  return targeting_;
}
inline ::com::rj::targeting::protos::CampaignProtoEntity_Targeting* CampaignProtoEntity::release_targeting() {
  clear_has_targeting();
  ::com::rj::targeting::protos::CampaignProtoEntity_Targeting* temp = targeting_;
  targeting_ = NULL;
  return temp;
}
inline void CampaignProtoEntity::set_allocated_targeting(::com::rj::targeting::protos::CampaignProtoEntity_Targeting* targeting) {
  delete targeting_;
  targeting_ = targeting;
  if (targeting) {
    set_has_targeting();
  } else {
    clear_has_targeting();
  }
}

// optional bool externalBuying = 11;
inline bool CampaignProtoEntity::has_externalbuying() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CampaignProtoEntity::set_has_externalbuying() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CampaignProtoEntity::clear_has_externalbuying() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CampaignProtoEntity::clear_externalbuying() {
  externalbuying_ = false;
  clear_has_externalbuying();
}
inline bool CampaignProtoEntity::externalbuying() const {
  return externalbuying_;
}
inline void CampaignProtoEntity::set_externalbuying(bool value) {
  set_has_externalbuying();
  externalbuying_ = value;
}

// optional string expectCpm = 12;
inline bool CampaignProtoEntity::has_expectcpm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CampaignProtoEntity::set_has_expectcpm() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CampaignProtoEntity::clear_has_expectcpm() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CampaignProtoEntity::clear_expectcpm() {
  if (expectcpm_ != &::google::protobuf::internal::kEmptyString) {
    expectcpm_->clear();
  }
  clear_has_expectcpm();
}
inline const ::std::string& CampaignProtoEntity::expectcpm() const {
  return *expectcpm_;
}
inline void CampaignProtoEntity::set_expectcpm(const ::std::string& value) {
  set_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    expectcpm_ = new ::std::string;
  }
  expectcpm_->assign(value);
}
inline void CampaignProtoEntity::set_expectcpm(const char* value) {
  set_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    expectcpm_ = new ::std::string;
  }
  expectcpm_->assign(value);
}
inline void CampaignProtoEntity::set_expectcpm(const char* value, size_t size) {
  set_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    expectcpm_ = new ::std::string;
  }
  expectcpm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_expectcpm() {
  set_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    expectcpm_ = new ::std::string;
  }
  return expectcpm_;
}
inline ::std::string* CampaignProtoEntity::release_expectcpm() {
  clear_has_expectcpm();
  if (expectcpm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expectcpm_;
    expectcpm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_expectcpm(::std::string* expectcpm) {
  if (expectcpm_ != &::google::protobuf::internal::kEmptyString) {
    delete expectcpm_;
  }
  if (expectcpm) {
    set_has_expectcpm();
    expectcpm_ = expectcpm;
  } else {
    clear_has_expectcpm();
    expectcpm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string thirdPartyExpectCpm = 13;
inline bool CampaignProtoEntity::has_thirdpartyexpectcpm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CampaignProtoEntity::set_has_thirdpartyexpectcpm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CampaignProtoEntity::clear_has_thirdpartyexpectcpm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CampaignProtoEntity::clear_thirdpartyexpectcpm() {
  if (thirdpartyexpectcpm_ != &::google::protobuf::internal::kEmptyString) {
    thirdpartyexpectcpm_->clear();
  }
  clear_has_thirdpartyexpectcpm();
}
inline const ::std::string& CampaignProtoEntity::thirdpartyexpectcpm() const {
  return *thirdpartyexpectcpm_;
}
inline void CampaignProtoEntity::set_thirdpartyexpectcpm(const ::std::string& value) {
  set_has_thirdpartyexpectcpm();
  if (thirdpartyexpectcpm_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartyexpectcpm_ = new ::std::string;
  }
  thirdpartyexpectcpm_->assign(value);
}
inline void CampaignProtoEntity::set_thirdpartyexpectcpm(const char* value) {
  set_has_thirdpartyexpectcpm();
  if (thirdpartyexpectcpm_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartyexpectcpm_ = new ::std::string;
  }
  thirdpartyexpectcpm_->assign(value);
}
inline void CampaignProtoEntity::set_thirdpartyexpectcpm(const char* value, size_t size) {
  set_has_thirdpartyexpectcpm();
  if (thirdpartyexpectcpm_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartyexpectcpm_ = new ::std::string;
  }
  thirdpartyexpectcpm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_thirdpartyexpectcpm() {
  set_has_thirdpartyexpectcpm();
  if (thirdpartyexpectcpm_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartyexpectcpm_ = new ::std::string;
  }
  return thirdpartyexpectcpm_;
}
inline ::std::string* CampaignProtoEntity::release_thirdpartyexpectcpm() {
  clear_has_thirdpartyexpectcpm();
  if (thirdpartyexpectcpm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thirdpartyexpectcpm_;
    thirdpartyexpectcpm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_thirdpartyexpectcpm(::std::string* thirdpartyexpectcpm) {
  if (thirdpartyexpectcpm_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdpartyexpectcpm_;
  }
  if (thirdpartyexpectcpm) {
    set_has_thirdpartyexpectcpm();
    thirdpartyexpectcpm_ = thirdpartyexpectcpm;
  } else {
    clear_has_thirdpartyexpectcpm();
    thirdpartyexpectcpm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string thirdPartyBiddingType = 14;
inline bool CampaignProtoEntity::has_thirdpartybiddingtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CampaignProtoEntity::set_has_thirdpartybiddingtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CampaignProtoEntity::clear_has_thirdpartybiddingtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CampaignProtoEntity::clear_thirdpartybiddingtype() {
  if (thirdpartybiddingtype_ != &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingtype_->clear();
  }
  clear_has_thirdpartybiddingtype();
}
inline const ::std::string& CampaignProtoEntity::thirdpartybiddingtype() const {
  return *thirdpartybiddingtype_;
}
inline void CampaignProtoEntity::set_thirdpartybiddingtype(const ::std::string& value) {
  set_has_thirdpartybiddingtype();
  if (thirdpartybiddingtype_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingtype_ = new ::std::string;
  }
  thirdpartybiddingtype_->assign(value);
}
inline void CampaignProtoEntity::set_thirdpartybiddingtype(const char* value) {
  set_has_thirdpartybiddingtype();
  if (thirdpartybiddingtype_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingtype_ = new ::std::string;
  }
  thirdpartybiddingtype_->assign(value);
}
inline void CampaignProtoEntity::set_thirdpartybiddingtype(const char* value, size_t size) {
  set_has_thirdpartybiddingtype();
  if (thirdpartybiddingtype_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingtype_ = new ::std::string;
  }
  thirdpartybiddingtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_thirdpartybiddingtype() {
  set_has_thirdpartybiddingtype();
  if (thirdpartybiddingtype_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingtype_ = new ::std::string;
  }
  return thirdpartybiddingtype_;
}
inline ::std::string* CampaignProtoEntity::release_thirdpartybiddingtype() {
  clear_has_thirdpartybiddingtype();
  if (thirdpartybiddingtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thirdpartybiddingtype_;
    thirdpartybiddingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_thirdpartybiddingtype(::std::string* thirdpartybiddingtype) {
  if (thirdpartybiddingtype_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdpartybiddingtype_;
  }
  if (thirdpartybiddingtype) {
    set_has_thirdpartybiddingtype();
    thirdpartybiddingtype_ = thirdpartybiddingtype;
  } else {
    clear_has_thirdpartybiddingtype();
    thirdpartybiddingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string thirdPartyBiddingValue = 15;
inline bool CampaignProtoEntity::has_thirdpartybiddingvalue() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CampaignProtoEntity::set_has_thirdpartybiddingvalue() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CampaignProtoEntity::clear_has_thirdpartybiddingvalue() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CampaignProtoEntity::clear_thirdpartybiddingvalue() {
  if (thirdpartybiddingvalue_ != &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingvalue_->clear();
  }
  clear_has_thirdpartybiddingvalue();
}
inline const ::std::string& CampaignProtoEntity::thirdpartybiddingvalue() const {
  return *thirdpartybiddingvalue_;
}
inline void CampaignProtoEntity::set_thirdpartybiddingvalue(const ::std::string& value) {
  set_has_thirdpartybiddingvalue();
  if (thirdpartybiddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingvalue_ = new ::std::string;
  }
  thirdpartybiddingvalue_->assign(value);
}
inline void CampaignProtoEntity::set_thirdpartybiddingvalue(const char* value) {
  set_has_thirdpartybiddingvalue();
  if (thirdpartybiddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingvalue_ = new ::std::string;
  }
  thirdpartybiddingvalue_->assign(value);
}
inline void CampaignProtoEntity::set_thirdpartybiddingvalue(const char* value, size_t size) {
  set_has_thirdpartybiddingvalue();
  if (thirdpartybiddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingvalue_ = new ::std::string;
  }
  thirdpartybiddingvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_thirdpartybiddingvalue() {
  set_has_thirdpartybiddingvalue();
  if (thirdpartybiddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    thirdpartybiddingvalue_ = new ::std::string;
  }
  return thirdpartybiddingvalue_;
}
inline ::std::string* CampaignProtoEntity::release_thirdpartybiddingvalue() {
  clear_has_thirdpartybiddingvalue();
  if (thirdpartybiddingvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thirdpartybiddingvalue_;
    thirdpartybiddingvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_thirdpartybiddingvalue(::std::string* thirdpartybiddingvalue) {
  if (thirdpartybiddingvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdpartybiddingvalue_;
  }
  if (thirdpartybiddingvalue) {
    set_has_thirdpartybiddingvalue();
    thirdpartybiddingvalue_ = thirdpartybiddingvalue;
  } else {
    clear_has_thirdpartybiddingvalue();
    thirdpartybiddingvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 networkId = 16;
inline bool CampaignProtoEntity::has_networkid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CampaignProtoEntity::set_has_networkid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CampaignProtoEntity::clear_has_networkid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CampaignProtoEntity::clear_networkid() {
  networkid_ = 0u;
  clear_has_networkid();
}
inline ::google::protobuf::uint32 CampaignProtoEntity::networkid() const {
  return networkid_;
}
inline void CampaignProtoEntity::set_networkid(::google::protobuf::uint32 value) {
  set_has_networkid();
  networkid_ = value;
}

// optional string publisherSource = 17;
inline bool CampaignProtoEntity::has_publishersource() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CampaignProtoEntity::set_has_publishersource() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CampaignProtoEntity::clear_has_publishersource() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CampaignProtoEntity::clear_publishersource() {
  if (publishersource_ != &::google::protobuf::internal::kEmptyString) {
    publishersource_->clear();
  }
  clear_has_publishersource();
}
inline const ::std::string& CampaignProtoEntity::publishersource() const {
  return *publishersource_;
}
inline void CampaignProtoEntity::set_publishersource(const ::std::string& value) {
  set_has_publishersource();
  if (publishersource_ == &::google::protobuf::internal::kEmptyString) {
    publishersource_ = new ::std::string;
  }
  publishersource_->assign(value);
}
inline void CampaignProtoEntity::set_publishersource(const char* value) {
  set_has_publishersource();
  if (publishersource_ == &::google::protobuf::internal::kEmptyString) {
    publishersource_ = new ::std::string;
  }
  publishersource_->assign(value);
}
inline void CampaignProtoEntity::set_publishersource(const char* value, size_t size) {
  set_has_publishersource();
  if (publishersource_ == &::google::protobuf::internal::kEmptyString) {
    publishersource_ = new ::std::string;
  }
  publishersource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampaignProtoEntity::mutable_publishersource() {
  set_has_publishersource();
  if (publishersource_ == &::google::protobuf::internal::kEmptyString) {
    publishersource_ = new ::std::string;
  }
  return publishersource_;
}
inline ::std::string* CampaignProtoEntity::release_publishersource() {
  clear_has_publishersource();
  if (publishersource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = publishersource_;
    publishersource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampaignProtoEntity::set_allocated_publishersource(::std::string* publishersource) {
  if (publishersource_ != &::google::protobuf::internal::kEmptyString) {
    delete publishersource_;
  }
  if (publishersource) {
    set_has_publishersource();
    publishersource_ = publishersource;
  } else {
    clear_has_publishersource();
    publishersource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace targeting
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_campaign_5fproto_2eproto__INCLUDED
