// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonMessage.proto

#ifndef PROTOBUF_CommonMessage_2eproto__INCLUDED
#define PROTOBUF_CommonMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CommonMessage_2eproto();
void protobuf_AssignDesc_CommonMessage_2eproto();
void protobuf_ShutdownFile_CommonMessage_2eproto();

class CommonMessage;

// ===================================================================

class CommonMessage : public ::google::protobuf::Message {
 public:
  CommonMessage();
  virtual ~CommonMessage();

  CommonMessage(const CommonMessage& from);

  inline CommonMessage& operator=(const CommonMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonMessage& default_instance();

  void Swap(CommonMessage* other);

  // implements Message ----------------------------------------------

  CommonMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonMessage& from);
  void MergeFrom(const CommonMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string businessCode = 1;
  inline bool has_businesscode() const;
  inline void clear_businesscode();
  static const int kBusinessCodeFieldNumber = 1;
  inline const ::std::string& businesscode() const;
  inline void set_businesscode(const ::std::string& value);
  inline void set_businesscode(const char* value);
  inline void set_businesscode(const char* value, size_t size);
  inline ::std::string* mutable_businesscode();
  inline ::std::string* release_businesscode();
  inline void set_allocated_businesscode(::std::string* businesscode);

  // optional string dataCodingType = 2;
  inline bool has_datacodingtype() const;
  inline void clear_datacodingtype();
  static const int kDataCodingTypeFieldNumber = 2;
  inline const ::std::string& datacodingtype() const;
  inline void set_datacodingtype(const ::std::string& value);
  inline void set_datacodingtype(const char* value);
  inline void set_datacodingtype(const char* value, size_t size);
  inline ::std::string* mutable_datacodingtype();
  inline ::std::string* release_datacodingtype();
  inline void set_allocated_datacodingtype(::std::string* datacodingtype);

  // required bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.CommonMessage)
 private:
  inline void set_has_businesscode();
  inline void clear_has_businesscode();
  inline void set_has_datacodingtype();
  inline void clear_has_datacodingtype();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* businesscode_;
  ::std::string* datacodingtype_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CommonMessage_2eproto();
  friend void protobuf_AssignDesc_CommonMessage_2eproto();
  friend void protobuf_ShutdownFile_CommonMessage_2eproto();

  void InitAsDefaultInstance();
  static CommonMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// CommonMessage

// required string businessCode = 1;
inline bool CommonMessage::has_businesscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonMessage::set_has_businesscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonMessage::clear_has_businesscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonMessage::clear_businesscode() {
  if (businesscode_ != &::google::protobuf::internal::kEmptyString) {
    businesscode_->clear();
  }
  clear_has_businesscode();
}
inline const ::std::string& CommonMessage::businesscode() const {
  return *businesscode_;
}
inline void CommonMessage::set_businesscode(const ::std::string& value) {
  set_has_businesscode();
  if (businesscode_ == &::google::protobuf::internal::kEmptyString) {
    businesscode_ = new ::std::string;
  }
  businesscode_->assign(value);
}
inline void CommonMessage::set_businesscode(const char* value) {
  set_has_businesscode();
  if (businesscode_ == &::google::protobuf::internal::kEmptyString) {
    businesscode_ = new ::std::string;
  }
  businesscode_->assign(value);
}
inline void CommonMessage::set_businesscode(const char* value, size_t size) {
  set_has_businesscode();
  if (businesscode_ == &::google::protobuf::internal::kEmptyString) {
    businesscode_ = new ::std::string;
  }
  businesscode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonMessage::mutable_businesscode() {
  set_has_businesscode();
  if (businesscode_ == &::google::protobuf::internal::kEmptyString) {
    businesscode_ = new ::std::string;
  }
  return businesscode_;
}
inline ::std::string* CommonMessage::release_businesscode() {
  clear_has_businesscode();
  if (businesscode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = businesscode_;
    businesscode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonMessage::set_allocated_businesscode(::std::string* businesscode) {
  if (businesscode_ != &::google::protobuf::internal::kEmptyString) {
    delete businesscode_;
  }
  if (businesscode) {
    set_has_businesscode();
    businesscode_ = businesscode;
  } else {
    clear_has_businesscode();
    businesscode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dataCodingType = 2;
inline bool CommonMessage::has_datacodingtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonMessage::set_has_datacodingtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonMessage::clear_has_datacodingtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonMessage::clear_datacodingtype() {
  if (datacodingtype_ != &::google::protobuf::internal::kEmptyString) {
    datacodingtype_->clear();
  }
  clear_has_datacodingtype();
}
inline const ::std::string& CommonMessage::datacodingtype() const {
  return *datacodingtype_;
}
inline void CommonMessage::set_datacodingtype(const ::std::string& value) {
  set_has_datacodingtype();
  if (datacodingtype_ == &::google::protobuf::internal::kEmptyString) {
    datacodingtype_ = new ::std::string;
  }
  datacodingtype_->assign(value);
}
inline void CommonMessage::set_datacodingtype(const char* value) {
  set_has_datacodingtype();
  if (datacodingtype_ == &::google::protobuf::internal::kEmptyString) {
    datacodingtype_ = new ::std::string;
  }
  datacodingtype_->assign(value);
}
inline void CommonMessage::set_datacodingtype(const char* value, size_t size) {
  set_has_datacodingtype();
  if (datacodingtype_ == &::google::protobuf::internal::kEmptyString) {
    datacodingtype_ = new ::std::string;
  }
  datacodingtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonMessage::mutable_datacodingtype() {
  set_has_datacodingtype();
  if (datacodingtype_ == &::google::protobuf::internal::kEmptyString) {
    datacodingtype_ = new ::std::string;
  }
  return datacodingtype_;
}
inline ::std::string* CommonMessage::release_datacodingtype() {
  clear_has_datacodingtype();
  if (datacodingtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datacodingtype_;
    datacodingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonMessage::set_allocated_datacodingtype(::std::string* datacodingtype) {
  if (datacodingtype_ != &::google::protobuf::internal::kEmptyString) {
    delete datacodingtype_;
  }
  if (datacodingtype) {
    set_has_datacodingtype();
    datacodingtype_ = datacodingtype;
  } else {
    clear_has_datacodingtype();
    datacodingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes data = 3;
inline bool CommonMessage::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonMessage::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CommonMessage::data() const {
  return *data_;
}
inline void CommonMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CommonMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CommonMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CommonMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonMessage::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CommonMessage_2eproto__INCLUDED
