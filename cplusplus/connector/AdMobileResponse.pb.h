// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdMobileResponse.proto

#ifndef PROTOBUF_AdMobileResponse_2eproto__INCLUDED
#define PROTOBUF_AdMobileResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace mobile {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AdMobileResponse_2eproto();
void protobuf_AssignDesc_AdMobileResponse_2eproto();
void protobuf_ShutdownFile_AdMobileResponse_2eproto();

class MobileAdResponse;
class MobileAdResponse_Banner;
class MobileAdResponse_VAD;
class MobileAdResponse_VAD_Navigation;
class MobileAdResponse_VAD_Interstitial;
class MobileAdResponse_VAD_Video;
class MobileAdResponse_VAD_Video_VideoTrackingEvents;
class MobileAdResponse_Native;
class MobileAdResponse_Native_Content;

enum MobileAdResponse_Banner_Type {
  MobileAdResponse_Banner_Type_IMAGEURL = 0,
  MobileAdResponse_Banner_Type_MARKUP = 1,
  MobileAdResponse_Banner_Type_ADLINK = 2
};
bool MobileAdResponse_Banner_Type_IsValid(int value);
const MobileAdResponse_Banner_Type MobileAdResponse_Banner_Type_Type_MIN = MobileAdResponse_Banner_Type_IMAGEURL;
const MobileAdResponse_Banner_Type MobileAdResponse_Banner_Type_Type_MAX = MobileAdResponse_Banner_Type_ADLINK;
const int MobileAdResponse_Banner_Type_Type_ARRAYSIZE = MobileAdResponse_Banner_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdResponse_Banner_Type_descriptor();
inline const ::std::string& MobileAdResponse_Banner_Type_Name(MobileAdResponse_Banner_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdResponse_Banner_Type_descriptor(), value);
}
inline bool MobileAdResponse_Banner_Type_Parse(
    const ::std::string& name, MobileAdResponse_Banner_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdResponse_Banner_Type>(
    MobileAdResponse_Banner_Type_descriptor(), name, value);
}
enum MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType {
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_start = 0,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_complete = 1,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_midpoint = 2,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_firstquartile = 3,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_thirdquartile = 4,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_pause = 5,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_unpause = 6,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_mute = 7,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_unmute = 8,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_replay = 9,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_skip = 10,
  MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_sec = 11
};
bool MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_IsValid(int value);
const MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_TrackingType_MIN = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_start;
const MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_TrackingType_MAX = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_sec;
const int MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_TrackingType_ARRAYSIZE = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_TrackingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_descriptor();
inline const ::std::string& MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_Name(MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_descriptor(), value);
}
inline bool MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_Parse(
    const ::std::string& name, MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType>(
    MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_descriptor(), name, value);
}
enum MobileAdResponse_VAD_VadType {
  MobileAdResponse_VAD_VadType_VIDEO = 0,
  MobileAdResponse_VAD_VadType_INTERSTITIAL = 1,
  MobileAdResponse_VAD_VadType_VideoToInterstitial = 2,
  MobileAdResponse_VAD_VadType_InterstitialToVideo = 3,
  MobileAdResponse_VAD_VadType_NoAd = 4
};
bool MobileAdResponse_VAD_VadType_IsValid(int value);
const MobileAdResponse_VAD_VadType MobileAdResponse_VAD_VadType_VadType_MIN = MobileAdResponse_VAD_VadType_VIDEO;
const MobileAdResponse_VAD_VadType MobileAdResponse_VAD_VadType_VadType_MAX = MobileAdResponse_VAD_VadType_NoAd;
const int MobileAdResponse_VAD_VadType_VadType_ARRAYSIZE = MobileAdResponse_VAD_VadType_VadType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdResponse_VAD_VadType_descriptor();
inline const ::std::string& MobileAdResponse_VAD_VadType_Name(MobileAdResponse_VAD_VadType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdResponse_VAD_VadType_descriptor(), value);
}
inline bool MobileAdResponse_VAD_VadType_Parse(
    const ::std::string& name, MobileAdResponse_VAD_VadType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdResponse_VAD_VadType>(
    MobileAdResponse_VAD_VadType_descriptor(), name, value);
}
enum MobileAdResponse_VAD_Animation {
  MobileAdResponse_VAD_Animation_FADEIN = 0,
  MobileAdResponse_VAD_Animation_FADEOUT = 1,
  MobileAdResponse_VAD_Animation_SLIDEBOTTOMIN = 2,
  MobileAdResponse_VAD_Animation_SLIDEBOTTOMOUT = 3,
  MobileAdResponse_VAD_Animation_SLIDELEFTIN = 4,
  MobileAdResponse_VAD_Animation_SLIDELEFTOUT = 5,
  MobileAdResponse_VAD_Animation_SLIDERIGHTIN = 6,
  MobileAdResponse_VAD_Animation_SLIDERIGHTOUT = 7,
  MobileAdResponse_VAD_Animation_SLIDETOPIN = 8,
  MobileAdResponse_VAD_Animation_SLIDETOPOUT = 9
};
bool MobileAdResponse_VAD_Animation_IsValid(int value);
const MobileAdResponse_VAD_Animation MobileAdResponse_VAD_Animation_Animation_MIN = MobileAdResponse_VAD_Animation_FADEIN;
const MobileAdResponse_VAD_Animation MobileAdResponse_VAD_Animation_Animation_MAX = MobileAdResponse_VAD_Animation_SLIDETOPOUT;
const int MobileAdResponse_VAD_Animation_Animation_ARRAYSIZE = MobileAdResponse_VAD_Animation_Animation_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdResponse_VAD_Animation_descriptor();
inline const ::std::string& MobileAdResponse_VAD_Animation_Name(MobileAdResponse_VAD_Animation value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdResponse_VAD_Animation_descriptor(), value);
}
inline bool MobileAdResponse_VAD_Animation_Parse(
    const ::std::string& name, MobileAdResponse_VAD_Animation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdResponse_VAD_Animation>(
    MobileAdResponse_VAD_Animation_descriptor(), name, value);
}
enum MobileAdResponse_VAD_Orientation {
  MobileAdResponse_VAD_Orientation_LANDSCAPE = 0,
  MobileAdResponse_VAD_Orientation_PORTRAIT = 1
};
bool MobileAdResponse_VAD_Orientation_IsValid(int value);
const MobileAdResponse_VAD_Orientation MobileAdResponse_VAD_Orientation_Orientation_MIN = MobileAdResponse_VAD_Orientation_LANDSCAPE;
const MobileAdResponse_VAD_Orientation MobileAdResponse_VAD_Orientation_Orientation_MAX = MobileAdResponse_VAD_Orientation_PORTRAIT;
const int MobileAdResponse_VAD_Orientation_Orientation_ARRAYSIZE = MobileAdResponse_VAD_Orientation_Orientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdResponse_VAD_Orientation_descriptor();
inline const ::std::string& MobileAdResponse_VAD_Orientation_Name(MobileAdResponse_VAD_Orientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdResponse_VAD_Orientation_descriptor(), value);
}
inline bool MobileAdResponse_VAD_Orientation_Parse(
    const ::std::string& name, MobileAdResponse_VAD_Orientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdResponse_VAD_Orientation>(
    MobileAdResponse_VAD_Orientation_descriptor(), name, value);
}
enum MobileAdResponse_Native_Content_MutipleMediaType {
  MobileAdResponse_Native_Content_MutipleMediaType_Video = 0,
  MobileAdResponse_Native_Content_MutipleMediaType_Youtube = 1,
  MobileAdResponse_Native_Content_MutipleMediaType_Mraid = 2
};
bool MobileAdResponse_Native_Content_MutipleMediaType_IsValid(int value);
const MobileAdResponse_Native_Content_MutipleMediaType MobileAdResponse_Native_Content_MutipleMediaType_MutipleMediaType_MIN = MobileAdResponse_Native_Content_MutipleMediaType_Video;
const MobileAdResponse_Native_Content_MutipleMediaType MobileAdResponse_Native_Content_MutipleMediaType_MutipleMediaType_MAX = MobileAdResponse_Native_Content_MutipleMediaType_Mraid;
const int MobileAdResponse_Native_Content_MutipleMediaType_MutipleMediaType_ARRAYSIZE = MobileAdResponse_Native_Content_MutipleMediaType_MutipleMediaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdResponse_Native_Content_MutipleMediaType_descriptor();
inline const ::std::string& MobileAdResponse_Native_Content_MutipleMediaType_Name(MobileAdResponse_Native_Content_MutipleMediaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdResponse_Native_Content_MutipleMediaType_descriptor(), value);
}
inline bool MobileAdResponse_Native_Content_MutipleMediaType_Parse(
    const ::std::string& name, MobileAdResponse_Native_Content_MutipleMediaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdResponse_Native_Content_MutipleMediaType>(
    MobileAdResponse_Native_Content_MutipleMediaType_descriptor(), name, value);
}
// ===================================================================

class MobileAdResponse_Banner : public ::google::protobuf::Message {
 public:
  MobileAdResponse_Banner();
  virtual ~MobileAdResponse_Banner();

  MobileAdResponse_Banner(const MobileAdResponse_Banner& from);

  inline MobileAdResponse_Banner& operator=(const MobileAdResponse_Banner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_Banner& default_instance();

  void Swap(MobileAdResponse_Banner* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_Banner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_Banner& from);
  void MergeFrom(const MobileAdResponse_Banner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_Banner_Type Type;
  static const Type IMAGEURL = MobileAdResponse_Banner_Type_IMAGEURL;
  static const Type MARKUP = MobileAdResponse_Banner_Type_MARKUP;
  static const Type ADLINK = MobileAdResponse_Banner_Type_ADLINK;
  static inline bool Type_IsValid(int value) {
    return MobileAdResponse_Banner_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MobileAdResponse_Banner_Type_Type_MIN;
  static const Type Type_MAX =
    MobileAdResponse_Banner_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MobileAdResponse_Banner_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MobileAdResponse_Banner_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MobileAdResponse_Banner_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MobileAdResponse_Banner_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .com.rj.protos.mobile.MobileAdResponse.Banner.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::rj::protos::mobile::MobileAdResponse_Banner_Type type() const;
  inline void set_type(::com::rj::protos::mobile::MobileAdResponse_Banner_Type value);

  // optional string htmlMarkup = 2;
  inline bool has_htmlmarkup() const;
  inline void clear_htmlmarkup();
  static const int kHtmlMarkupFieldNumber = 2;
  inline const ::std::string& htmlmarkup() const;
  inline void set_htmlmarkup(const ::std::string& value);
  inline void set_htmlmarkup(const char* value);
  inline void set_htmlmarkup(const char* value, size_t size);
  inline ::std::string* mutable_htmlmarkup();
  inline ::std::string* release_htmlmarkup();
  inline void set_allocated_htmlmarkup(::std::string* htmlmarkup);

  // optional string clickOpenType = 3;
  inline bool has_clickopentype() const;
  inline void clear_clickopentype();
  static const int kClickOpenTypeFieldNumber = 3;
  inline const ::std::string& clickopentype() const;
  inline void set_clickopentype(const ::std::string& value);
  inline void set_clickopentype(const char* value);
  inline void set_clickopentype(const char* value, size_t size);
  inline ::std::string* mutable_clickopentype();
  inline ::std::string* release_clickopentype();
  inline void set_allocated_clickopentype(::std::string* clickopentype);

  // optional string clickUrl = 4;
  inline bool has_clickurl() const;
  inline void clear_clickurl();
  static const int kClickUrlFieldNumber = 4;
  inline const ::std::string& clickurl() const;
  inline void set_clickurl(const ::std::string& value);
  inline void set_clickurl(const char* value);
  inline void set_clickurl(const char* value, size_t size);
  inline ::std::string* mutable_clickurl();
  inline ::std::string* release_clickurl();
  inline void set_allocated_clickurl(::std::string* clickurl);

  // optional string imageUrl = 5;
  inline bool has_imageurl() const;
  inline void clear_imageurl();
  static const int kImageUrlFieldNumber = 5;
  inline const ::std::string& imageurl() const;
  inline void set_imageurl(const ::std::string& value);
  inline void set_imageurl(const char* value);
  inline void set_imageurl(const char* value, size_t size);
  inline ::std::string* mutable_imageurl();
  inline ::std::string* release_imageurl();
  inline void set_allocated_imageurl(::std::string* imageurl);

  // optional string refresh = 6;
  inline bool has_refresh() const;
  inline void clear_refresh();
  static const int kRefreshFieldNumber = 6;
  inline const ::std::string& refresh() const;
  inline void set_refresh(const ::std::string& value);
  inline void set_refresh(const char* value);
  inline void set_refresh(const char* value, size_t size);
  inline ::std::string* mutable_refresh();
  inline ::std::string* release_refresh();
  inline void set_allocated_refresh(::std::string* refresh);

  // optional string reload = 7;
  inline bool has_reload() const;
  inline void clear_reload();
  static const int kReloadFieldNumber = 7;
  inline const ::std::string& reload() const;
  inline void set_reload(const ::std::string& value);
  inline void set_reload(const char* value);
  inline void set_reload(const char* value, size_t size);
  inline ::std::string* mutable_reload();
  inline ::std::string* release_reload();
  inline void set_allocated_reload(::std::string* reload);

  // optional string animation = 8;
  inline bool has_animation() const;
  inline void clear_animation();
  static const int kAnimationFieldNumber = 8;
  inline const ::std::string& animation() const;
  inline void set_animation(const ::std::string& value);
  inline void set_animation(const char* value);
  inline void set_animation(const char* value, size_t size);
  inline ::std::string* mutable_animation();
  inline ::std::string* release_animation();
  inline void set_allocated_animation(::std::string* animation);

  // repeated string impressionUrl = 9;
  inline int impressionurl_size() const;
  inline void clear_impressionurl();
  static const int kImpressionUrlFieldNumber = 9;
  inline const ::std::string& impressionurl(int index) const;
  inline ::std::string* mutable_impressionurl(int index);
  inline void set_impressionurl(int index, const ::std::string& value);
  inline void set_impressionurl(int index, const char* value);
  inline void set_impressionurl(int index, const char* value, size_t size);
  inline ::std::string* add_impressionurl();
  inline void add_impressionurl(const ::std::string& value);
  inline void add_impressionurl(const char* value);
  inline void add_impressionurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& impressionurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impressionurl();

  // repeated string clickTrackingUrl = 10;
  inline int clicktrackingurl_size() const;
  inline void clear_clicktrackingurl();
  static const int kClickTrackingUrlFieldNumber = 10;
  inline const ::std::string& clicktrackingurl(int index) const;
  inline ::std::string* mutable_clicktrackingurl(int index);
  inline void set_clicktrackingurl(int index, const ::std::string& value);
  inline void set_clicktrackingurl(int index, const char* value);
  inline void set_clicktrackingurl(int index, const char* value, size_t size);
  inline ::std::string* add_clicktrackingurl();
  inline void add_clicktrackingurl(const ::std::string& value);
  inline void add_clicktrackingurl(const char* value);
  inline void add_clicktrackingurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& clicktrackingurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_clicktrackingurl();

  // optional string adLink = 11;
  inline bool has_adlink() const;
  inline void clear_adlink();
  static const int kAdLinkFieldNumber = 11;
  inline const ::std::string& adlink() const;
  inline void set_adlink(const ::std::string& value);
  inline void set_adlink(const char* value);
  inline void set_adlink(const char* value, size_t size);
  inline ::std::string* mutable_adlink();
  inline ::std::string* release_adlink();
  inline void set_allocated_adlink(::std::string* adlink);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.Banner)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_htmlmarkup();
  inline void clear_has_htmlmarkup();
  inline void set_has_clickopentype();
  inline void clear_has_clickopentype();
  inline void set_has_clickurl();
  inline void clear_has_clickurl();
  inline void set_has_imageurl();
  inline void clear_has_imageurl();
  inline void set_has_refresh();
  inline void clear_has_refresh();
  inline void set_has_reload();
  inline void clear_has_reload();
  inline void set_has_animation();
  inline void clear_has_animation();
  inline void set_has_adlink();
  inline void clear_has_adlink();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* htmlmarkup_;
  ::std::string* clickopentype_;
  ::std::string* clickurl_;
  ::std::string* imageurl_;
  ::std::string* refresh_;
  ::std::string* reload_;
  ::std::string* animation_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impressionurl_;
  ::google::protobuf::RepeatedPtrField< ::std::string> clicktrackingurl_;
  ::std::string* adlink_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_Banner* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_VAD_Navigation : public ::google::protobuf::Message {
 public:
  MobileAdResponse_VAD_Navigation();
  virtual ~MobileAdResponse_VAD_Navigation();

  MobileAdResponse_VAD_Navigation(const MobileAdResponse_VAD_Navigation& from);

  inline MobileAdResponse_VAD_Navigation& operator=(const MobileAdResponse_VAD_Navigation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_VAD_Navigation& default_instance();

  void Swap(MobileAdResponse_VAD_Navigation* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_VAD_Navigation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_VAD_Navigation& from);
  void MergeFrom(const MobileAdResponse_VAD_Navigation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string show = 1;
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 1;
  inline const ::std::string& show() const;
  inline void set_show(const ::std::string& value);
  inline void set_show(const char* value);
  inline void set_show(const char* value, size_t size);
  inline ::std::string* mutable_show();
  inline ::std::string* release_show();
  inline void set_allocated_show(::std::string* show);

  // optional string topBackgroundUrl = 2;
  inline bool has_topbackgroundurl() const;
  inline void clear_topbackgroundurl();
  static const int kTopBackgroundUrlFieldNumber = 2;
  inline const ::std::string& topbackgroundurl() const;
  inline void set_topbackgroundurl(const ::std::string& value);
  inline void set_topbackgroundurl(const char* value);
  inline void set_topbackgroundurl(const char* value, size_t size);
  inline ::std::string* mutable_topbackgroundurl();
  inline ::std::string* release_topbackgroundurl();
  inline void set_allocated_topbackgroundurl(::std::string* topbackgroundurl);

  // optional string topShow = 3;
  inline bool has_topshow() const;
  inline void clear_topshow();
  static const int kTopShowFieldNumber = 3;
  inline const ::std::string& topshow() const;
  inline void set_topshow(const ::std::string& value);
  inline void set_topshow(const char* value);
  inline void set_topshow(const char* value, size_t size);
  inline ::std::string* mutable_topshow();
  inline ::std::string* release_topshow();
  inline void set_allocated_topshow(::std::string* topshow);

  // optional string topTitle = 4;
  inline bool has_toptitle() const;
  inline void clear_toptitle();
  static const int kTopTitleFieldNumber = 4;
  inline const ::std::string& toptitle() const;
  inline void set_toptitle(const ::std::string& value);
  inline void set_toptitle(const char* value);
  inline void set_toptitle(const char* value, size_t size);
  inline ::std::string* mutable_toptitle();
  inline ::std::string* release_toptitle();
  inline void set_allocated_toptitle(::std::string* toptitle);

  // optional string topTitleContent = 5;
  inline bool has_toptitlecontent() const;
  inline void clear_toptitlecontent();
  static const int kTopTitleContentFieldNumber = 5;
  inline const ::std::string& toptitlecontent() const;
  inline void set_toptitlecontent(const ::std::string& value);
  inline void set_toptitlecontent(const char* value);
  inline void set_toptitlecontent(const char* value, size_t size);
  inline ::std::string* mutable_toptitlecontent();
  inline ::std::string* release_toptitlecontent();
  inline void set_allocated_toptitlecontent(::std::string* toptitlecontent);

  // optional string bottomBackgroundUrl = 6;
  inline bool has_bottombackgroundurl() const;
  inline void clear_bottombackgroundurl();
  static const int kBottomBackgroundUrlFieldNumber = 6;
  inline const ::std::string& bottombackgroundurl() const;
  inline void set_bottombackgroundurl(const ::std::string& value);
  inline void set_bottombackgroundurl(const char* value);
  inline void set_bottombackgroundurl(const char* value, size_t size);
  inline ::std::string* mutable_bottombackgroundurl();
  inline ::std::string* release_bottombackgroundurl();
  inline void set_allocated_bottombackgroundurl(::std::string* bottombackgroundurl);

  // optional string bottomShow = 7;
  inline bool has_bottomshow() const;
  inline void clear_bottomshow();
  static const int kBottomShowFieldNumber = 7;
  inline const ::std::string& bottomshow() const;
  inline void set_bottomshow(const ::std::string& value);
  inline void set_bottomshow(const char* value);
  inline void set_bottomshow(const char* value, size_t size);
  inline ::std::string* mutable_bottomshow();
  inline ::std::string* release_bottomshow();
  inline void set_allocated_bottomshow(::std::string* bottomshow);

  // optional string bottomBackButton = 8;
  inline bool has_bottombackbutton() const;
  inline void clear_bottombackbutton();
  static const int kBottomBackButtonFieldNumber = 8;
  inline const ::std::string& bottombackbutton() const;
  inline void set_bottombackbutton(const ::std::string& value);
  inline void set_bottombackbutton(const char* value);
  inline void set_bottombackbutton(const char* value, size_t size);
  inline ::std::string* mutable_bottombackbutton();
  inline ::std::string* release_bottombackbutton();
  inline void set_allocated_bottombackbutton(::std::string* bottombackbutton);

  // optional string bottomForwardButton = 9;
  inline bool has_bottomforwardbutton() const;
  inline void clear_bottomforwardbutton();
  static const int kBottomForwardButtonFieldNumber = 9;
  inline const ::std::string& bottomforwardbutton() const;
  inline void set_bottomforwardbutton(const ::std::string& value);
  inline void set_bottomforwardbutton(const char* value);
  inline void set_bottomforwardbutton(const char* value, size_t size);
  inline ::std::string* mutable_bottomforwardbutton();
  inline ::std::string* release_bottomforwardbutton();
  inline void set_allocated_bottomforwardbutton(::std::string* bottomforwardbutton);

  // optional string bottomReloadButton = 10;
  inline bool has_bottomreloadbutton() const;
  inline void clear_bottomreloadbutton();
  static const int kBottomReloadButtonFieldNumber = 10;
  inline const ::std::string& bottomreloadbutton() const;
  inline void set_bottomreloadbutton(const ::std::string& value);
  inline void set_bottomreloadbutton(const char* value);
  inline void set_bottomreloadbutton(const char* value, size_t size);
  inline ::std::string* mutable_bottomreloadbutton();
  inline ::std::string* release_bottomreloadbutton();
  inline void set_allocated_bottomreloadbutton(::std::string* bottomreloadbutton);

  // optional string bottomExternalButton = 11;
  inline bool has_bottomexternalbutton() const;
  inline void clear_bottomexternalbutton();
  static const int kBottomExternalButtonFieldNumber = 11;
  inline const ::std::string& bottomexternalbutton() const;
  inline void set_bottomexternalbutton(const ::std::string& value);
  inline void set_bottomexternalbutton(const char* value);
  inline void set_bottomexternalbutton(const char* value, size_t size);
  inline ::std::string* mutable_bottomexternalbutton();
  inline ::std::string* release_bottomexternalbutton();
  inline void set_allocated_bottomexternalbutton(::std::string* bottomexternalbutton);

  // optional string bottomPausebutton = 12;
  inline bool has_bottompausebutton() const;
  inline void clear_bottompausebutton();
  static const int kBottomPausebuttonFieldNumber = 12;
  inline const ::std::string& bottompausebutton() const;
  inline void set_bottompausebutton(const ::std::string& value);
  inline void set_bottompausebutton(const char* value);
  inline void set_bottompausebutton(const char* value, size_t size);
  inline ::std::string* mutable_bottompausebutton();
  inline ::std::string* release_bottompausebutton();
  inline void set_allocated_bottompausebutton(::std::string* bottompausebutton);

  // optional string bottomReplaybutton = 13;
  inline bool has_bottomreplaybutton() const;
  inline void clear_bottomreplaybutton();
  static const int kBottomReplaybuttonFieldNumber = 13;
  inline const ::std::string& bottomreplaybutton() const;
  inline void set_bottomreplaybutton(const ::std::string& value);
  inline void set_bottomreplaybutton(const char* value);
  inline void set_bottomreplaybutton(const char* value, size_t size);
  inline ::std::string* mutable_bottomreplaybutton();
  inline ::std::string* release_bottomreplaybutton();
  inline void set_allocated_bottomreplaybutton(::std::string* bottomreplaybutton);

  // optional string bottomTimer = 14;
  inline bool has_bottomtimer() const;
  inline void clear_bottomtimer();
  static const int kBottomTimerFieldNumber = 14;
  inline const ::std::string& bottomtimer() const;
  inline void set_bottomtimer(const ::std::string& value);
  inline void set_bottomtimer(const char* value);
  inline void set_bottomtimer(const char* value, size_t size);
  inline ::std::string* mutable_bottomtimer();
  inline ::std::string* release_bottomtimer();
  inline void set_allocated_bottomtimer(::std::string* bottomtimer);

  // optional string allowtap = 15;
  inline bool has_allowtap() const;
  inline void clear_allowtap();
  static const int kAllowtapFieldNumber = 15;
  inline const ::std::string& allowtap() const;
  inline void set_allowtap(const ::std::string& value);
  inline void set_allowtap(const char* value);
  inline void set_allowtap(const char* value, size_t size);
  inline ::std::string* mutable_allowtap();
  inline ::std::string* release_allowtap();
  inline void set_allocated_allowtap(::std::string* allowtap);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.VAD.Navigation)
 private:
  inline void set_has_show();
  inline void clear_has_show();
  inline void set_has_topbackgroundurl();
  inline void clear_has_topbackgroundurl();
  inline void set_has_topshow();
  inline void clear_has_topshow();
  inline void set_has_toptitle();
  inline void clear_has_toptitle();
  inline void set_has_toptitlecontent();
  inline void clear_has_toptitlecontent();
  inline void set_has_bottombackgroundurl();
  inline void clear_has_bottombackgroundurl();
  inline void set_has_bottomshow();
  inline void clear_has_bottomshow();
  inline void set_has_bottombackbutton();
  inline void clear_has_bottombackbutton();
  inline void set_has_bottomforwardbutton();
  inline void clear_has_bottomforwardbutton();
  inline void set_has_bottomreloadbutton();
  inline void clear_has_bottomreloadbutton();
  inline void set_has_bottomexternalbutton();
  inline void clear_has_bottomexternalbutton();
  inline void set_has_bottompausebutton();
  inline void clear_has_bottompausebutton();
  inline void set_has_bottomreplaybutton();
  inline void clear_has_bottomreplaybutton();
  inline void set_has_bottomtimer();
  inline void clear_has_bottomtimer();
  inline void set_has_allowtap();
  inline void clear_has_allowtap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* show_;
  ::std::string* topbackgroundurl_;
  ::std::string* topshow_;
  ::std::string* toptitle_;
  ::std::string* toptitlecontent_;
  ::std::string* bottombackgroundurl_;
  ::std::string* bottomshow_;
  ::std::string* bottombackbutton_;
  ::std::string* bottomforwardbutton_;
  ::std::string* bottomreloadbutton_;
  ::std::string* bottomexternalbutton_;
  ::std::string* bottompausebutton_;
  ::std::string* bottomreplaybutton_;
  ::std::string* bottomtimer_;
  ::std::string* allowtap_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_VAD_Navigation* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_VAD_Interstitial : public ::google::protobuf::Message {
 public:
  MobileAdResponse_VAD_Interstitial();
  virtual ~MobileAdResponse_VAD_Interstitial();

  MobileAdResponse_VAD_Interstitial(const MobileAdResponse_VAD_Interstitial& from);

  inline MobileAdResponse_VAD_Interstitial& operator=(const MobileAdResponse_VAD_Interstitial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_VAD_Interstitial& default_instance();

  void Swap(MobileAdResponse_VAD_Interstitial* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_VAD_Interstitial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_VAD_Interstitial& from);
  void MergeFrom(const MobileAdResponse_VAD_Interstitial& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string preload = 1;
  inline bool has_preload() const;
  inline void clear_preload();
  static const int kPreloadFieldNumber = 1;
  inline const ::std::string& preload() const;
  inline void set_preload(const ::std::string& value);
  inline void set_preload(const char* value);
  inline void set_preload(const char* value, size_t size);
  inline ::std::string* mutable_preload();
  inline ::std::string* release_preload();
  inline void set_allocated_preload(::std::string* preload);

  // optional string autoClose = 2;
  inline bool has_autoclose() const;
  inline void clear_autoclose();
  static const int kAutoCloseFieldNumber = 2;
  inline const ::std::string& autoclose() const;
  inline void set_autoclose(const ::std::string& value);
  inline void set_autoclose(const char* value);
  inline void set_autoclose(const char* value, size_t size);
  inline ::std::string* mutable_autoclose();
  inline ::std::string* release_autoclose();
  inline void set_allocated_autoclose(::std::string* autoclose);

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.Orientation orientation = 3;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation orientation() const;
  inline void set_orientation(::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation value);

  // optional string htmlMarkup = 4;
  inline bool has_htmlmarkup() const;
  inline void clear_htmlmarkup();
  static const int kHtmlMarkupFieldNumber = 4;
  inline const ::std::string& htmlmarkup() const;
  inline void set_htmlmarkup(const ::std::string& value);
  inline void set_htmlmarkup(const char* value);
  inline void set_htmlmarkup(const char* value, size_t size);
  inline ::std::string* mutable_htmlmarkup();
  inline ::std::string* release_htmlmarkup();
  inline void set_allocated_htmlmarkup(::std::string* htmlmarkup);

  // optional string imageUrl = 5;
  inline bool has_imageurl() const;
  inline void clear_imageurl();
  static const int kImageUrlFieldNumber = 5;
  inline const ::std::string& imageurl() const;
  inline void set_imageurl(const ::std::string& value);
  inline void set_imageurl(const char* value);
  inline void set_imageurl(const char* value, size_t size);
  inline ::std::string* mutable_imageurl();
  inline ::std::string* release_imageurl();
  inline void set_allocated_imageurl(::std::string* imageurl);

  // optional string clickUrl = 6;
  inline bool has_clickurl() const;
  inline void clear_clickurl();
  static const int kClickUrlFieldNumber = 6;
  inline const ::std::string& clickurl() const;
  inline void set_clickurl(const ::std::string& value);
  inline void set_clickurl(const char* value);
  inline void set_clickurl(const char* value, size_t size);
  inline ::std::string* mutable_clickurl();
  inline ::std::string* release_clickurl();
  inline void set_allocated_clickurl(::std::string* clickurl);

  // optional string adLink = 7;
  inline bool has_adlink() const;
  inline void clear_adlink();
  static const int kAdLinkFieldNumber = 7;
  inline const ::std::string& adlink() const;
  inline void set_adlink(const ::std::string& value);
  inline void set_adlink(const char* value);
  inline void set_adlink(const char* value, size_t size);
  inline ::std::string* mutable_adlink();
  inline ::std::string* release_adlink();
  inline void set_allocated_adlink(::std::string* adlink);

  // optional string skipButtonShow = 8;
  inline bool has_skipbuttonshow() const;
  inline void clear_skipbuttonshow();
  static const int kSkipButtonShowFieldNumber = 8;
  inline const ::std::string& skipbuttonshow() const;
  inline void set_skipbuttonshow(const ::std::string& value);
  inline void set_skipbuttonshow(const char* value);
  inline void set_skipbuttonshow(const char* value, size_t size);
  inline ::std::string* mutable_skipbuttonshow();
  inline ::std::string* release_skipbuttonshow();
  inline void set_allocated_skipbuttonshow(::std::string* skipbuttonshow);

  // optional string skipBUttonShowAfter = 9;
  inline bool has_skipbuttonshowafter() const;
  inline void clear_skipbuttonshowafter();
  static const int kSkipBUttonShowAfterFieldNumber = 9;
  inline const ::std::string& skipbuttonshowafter() const;
  inline void set_skipbuttonshowafter(const ::std::string& value);
  inline void set_skipbuttonshowafter(const char* value);
  inline void set_skipbuttonshowafter(const char* value, size_t size);
  inline ::std::string* mutable_skipbuttonshowafter();
  inline ::std::string* release_skipbuttonshowafter();
  inline void set_allocated_skipbuttonshowafter(::std::string* skipbuttonshowafter);

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.Navigation navigation = 10;
  inline bool has_navigation() const;
  inline void clear_navigation();
  static const int kNavigationFieldNumber = 10;
  inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation& navigation() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* mutable_navigation();
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* release_navigation();
  inline void set_allocated_navigation(::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* navigation);

  // repeated string impressionUrl = 11;
  inline int impressionurl_size() const;
  inline void clear_impressionurl();
  static const int kImpressionUrlFieldNumber = 11;
  inline const ::std::string& impressionurl(int index) const;
  inline ::std::string* mutable_impressionurl(int index);
  inline void set_impressionurl(int index, const ::std::string& value);
  inline void set_impressionurl(int index, const char* value);
  inline void set_impressionurl(int index, const char* value, size_t size);
  inline ::std::string* add_impressionurl();
  inline void add_impressionurl(const ::std::string& value);
  inline void add_impressionurl(const char* value);
  inline void add_impressionurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& impressionurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impressionurl();

  // repeated string clickTrackingUrl = 12;
  inline int clicktrackingurl_size() const;
  inline void clear_clicktrackingurl();
  static const int kClickTrackingUrlFieldNumber = 12;
  inline const ::std::string& clicktrackingurl(int index) const;
  inline ::std::string* mutable_clicktrackingurl(int index);
  inline void set_clicktrackingurl(int index, const ::std::string& value);
  inline void set_clicktrackingurl(int index, const char* value);
  inline void set_clicktrackingurl(int index, const char* value, size_t size);
  inline ::std::string* add_clicktrackingurl();
  inline void add_clicktrackingurl(const ::std::string& value);
  inline void add_clicktrackingurl(const char* value);
  inline void add_clicktrackingurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& clicktrackingurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_clicktrackingurl();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.VAD.Interstitial)
 private:
  inline void set_has_preload();
  inline void clear_has_preload();
  inline void set_has_autoclose();
  inline void clear_has_autoclose();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_htmlmarkup();
  inline void clear_has_htmlmarkup();
  inline void set_has_imageurl();
  inline void clear_has_imageurl();
  inline void set_has_clickurl();
  inline void clear_has_clickurl();
  inline void set_has_adlink();
  inline void clear_has_adlink();
  inline void set_has_skipbuttonshow();
  inline void clear_has_skipbuttonshow();
  inline void set_has_skipbuttonshowafter();
  inline void clear_has_skipbuttonshowafter();
  inline void set_has_navigation();
  inline void clear_has_navigation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* preload_;
  ::std::string* autoclose_;
  ::std::string* htmlmarkup_;
  ::std::string* imageurl_;
  ::std::string* clickurl_;
  ::std::string* adlink_;
  ::std::string* skipbuttonshow_;
  ::std::string* skipbuttonshowafter_;
  ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* navigation_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impressionurl_;
  ::google::protobuf::RepeatedPtrField< ::std::string> clicktrackingurl_;
  int orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_VAD_Interstitial* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_VAD_Video_VideoTrackingEvents : public ::google::protobuf::Message {
 public:
  MobileAdResponse_VAD_Video_VideoTrackingEvents();
  virtual ~MobileAdResponse_VAD_Video_VideoTrackingEvents();

  MobileAdResponse_VAD_Video_VideoTrackingEvents(const MobileAdResponse_VAD_Video_VideoTrackingEvents& from);

  inline MobileAdResponse_VAD_Video_VideoTrackingEvents& operator=(const MobileAdResponse_VAD_Video_VideoTrackingEvents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_VAD_Video_VideoTrackingEvents& default_instance();

  void Swap(MobileAdResponse_VAD_Video_VideoTrackingEvents* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_VAD_Video_VideoTrackingEvents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_VAD_Video_VideoTrackingEvents& from);
  void MergeFrom(const MobileAdResponse_VAD_Video_VideoTrackingEvents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType TrackingType;
  static const TrackingType start = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_start;
  static const TrackingType complete = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_complete;
  static const TrackingType midpoint = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_midpoint;
  static const TrackingType firstquartile = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_firstquartile;
  static const TrackingType thirdquartile = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_thirdquartile;
  static const TrackingType pause = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_pause;
  static const TrackingType unpause = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_unpause;
  static const TrackingType mute = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_mute;
  static const TrackingType unmute = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_unmute;
  static const TrackingType replay = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_replay;
  static const TrackingType skip = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_skip;
  static const TrackingType sec = MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_sec;
  static inline bool TrackingType_IsValid(int value) {
    return MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_IsValid(value);
  }
  static const TrackingType TrackingType_MIN =
    MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_TrackingType_MIN;
  static const TrackingType TrackingType_MAX =
    MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_TrackingType_MAX;
  static const int TrackingType_ARRAYSIZE =
    MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_TrackingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrackingType_descriptor() {
    return MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_descriptor();
  }
  static inline const ::std::string& TrackingType_Name(TrackingType value) {
    return MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_Name(value);
  }
  static inline bool TrackingType_Parse(const ::std::string& name,
      TrackingType* value) {
    return MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.Video.VideoTrackingEvents.TrackingType trackingType = 1;
  inline bool has_trackingtype() const;
  inline void clear_trackingtype();
  static const int kTrackingTypeFieldNumber = 1;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType trackingtype() const;
  inline void set_trackingtype(::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType value);

  // optional string secondValue = 2;
  inline bool has_secondvalue() const;
  inline void clear_secondvalue();
  static const int kSecondValueFieldNumber = 2;
  inline const ::std::string& secondvalue() const;
  inline void set_secondvalue(const ::std::string& value);
  inline void set_secondvalue(const char* value);
  inline void set_secondvalue(const char* value, size_t size);
  inline ::std::string* mutable_secondvalue();
  inline ::std::string* release_secondvalue();
  inline void set_allocated_secondvalue(::std::string* secondvalue);

  // optional string trackingUrl = 3;
  inline bool has_trackingurl() const;
  inline void clear_trackingurl();
  static const int kTrackingUrlFieldNumber = 3;
  inline const ::std::string& trackingurl() const;
  inline void set_trackingurl(const ::std::string& value);
  inline void set_trackingurl(const char* value);
  inline void set_trackingurl(const char* value, size_t size);
  inline ::std::string* mutable_trackingurl();
  inline ::std::string* release_trackingurl();
  inline void set_allocated_trackingurl(::std::string* trackingurl);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.VAD.Video.VideoTrackingEvents)
 private:
  inline void set_has_trackingtype();
  inline void clear_has_trackingtype();
  inline void set_has_secondvalue();
  inline void clear_has_secondvalue();
  inline void set_has_trackingurl();
  inline void clear_has_trackingurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* secondvalue_;
  ::std::string* trackingurl_;
  int trackingtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_VAD_Video_VideoTrackingEvents* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_VAD_Video : public ::google::protobuf::Message {
 public:
  MobileAdResponse_VAD_Video();
  virtual ~MobileAdResponse_VAD_Video();

  MobileAdResponse_VAD_Video(const MobileAdResponse_VAD_Video& from);

  inline MobileAdResponse_VAD_Video& operator=(const MobileAdResponse_VAD_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_VAD_Video& default_instance();

  void Swap(MobileAdResponse_VAD_Video* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_VAD_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_VAD_Video& from);
  void MergeFrom(const MobileAdResponse_VAD_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_VAD_Video_VideoTrackingEvents VideoTrackingEvents;

  // accessors -------------------------------------------------------

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.Orientation orientation = 1;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 1;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation orientation() const;
  inline void set_orientation(::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation value);

  // optional string expiration = 2;
  inline bool has_expiration() const;
  inline void clear_expiration();
  static const int kExpirationFieldNumber = 2;
  inline const ::std::string& expiration() const;
  inline void set_expiration(const ::std::string& value);
  inline void set_expiration(const char* value);
  inline void set_expiration(const char* value, size_t size);
  inline ::std::string* mutable_expiration();
  inline ::std::string* release_expiration();
  inline void set_allocated_expiration(::std::string* expiration);

  // optional string creativeDisplay = 3;
  inline bool has_creativedisplay() const;
  inline void clear_creativedisplay();
  static const int kCreativeDisplayFieldNumber = 3;
  inline const ::std::string& creativedisplay() const;
  inline void set_creativedisplay(const ::std::string& value);
  inline void set_creativedisplay(const char* value);
  inline void set_creativedisplay(const char* value, size_t size);
  inline ::std::string* mutable_creativedisplay();
  inline ::std::string* release_creativedisplay();
  inline void set_allocated_creativedisplay(::std::string* creativedisplay);

  // optional string creativeDelivery = 4;
  inline bool has_creativedelivery() const;
  inline void clear_creativedelivery();
  static const int kCreativeDeliveryFieldNumber = 4;
  inline const ::std::string& creativedelivery() const;
  inline void set_creativedelivery(const ::std::string& value);
  inline void set_creativedelivery(const char* value);
  inline void set_creativedelivery(const char* value, size_t size);
  inline ::std::string* mutable_creativedelivery();
  inline ::std::string* release_creativedelivery();
  inline void set_allocated_creativedelivery(::std::string* creativedelivery);

  // optional string creativeType = 5;
  inline bool has_creativetype() const;
  inline void clear_creativetype();
  static const int kCreativeTypeFieldNumber = 5;
  inline const ::std::string& creativetype() const;
  inline void set_creativetype(const ::std::string& value);
  inline void set_creativetype(const char* value);
  inline void set_creativetype(const char* value, size_t size);
  inline ::std::string* mutable_creativetype();
  inline ::std::string* release_creativetype();
  inline void set_allocated_creativetype(::std::string* creativetype);

  // optional string creativeBitrate = 6;
  inline bool has_creativebitrate() const;
  inline void clear_creativebitrate();
  static const int kCreativeBitrateFieldNumber = 6;
  inline const ::std::string& creativebitrate() const;
  inline void set_creativebitrate(const ::std::string& value);
  inline void set_creativebitrate(const char* value);
  inline void set_creativebitrate(const char* value, size_t size);
  inline ::std::string* mutable_creativebitrate();
  inline ::std::string* release_creativebitrate();
  inline void set_allocated_creativebitrate(::std::string* creativebitrate);

  // optional string creativeWidth = 7;
  inline bool has_creativewidth() const;
  inline void clear_creativewidth();
  static const int kCreativeWidthFieldNumber = 7;
  inline const ::std::string& creativewidth() const;
  inline void set_creativewidth(const ::std::string& value);
  inline void set_creativewidth(const char* value);
  inline void set_creativewidth(const char* value, size_t size);
  inline ::std::string* mutable_creativewidth();
  inline ::std::string* release_creativewidth();
  inline void set_allocated_creativewidth(::std::string* creativewidth);

  // optional string creativeHeight = 8;
  inline bool has_creativeheight() const;
  inline void clear_creativeheight();
  static const int kCreativeHeightFieldNumber = 8;
  inline const ::std::string& creativeheight() const;
  inline void set_creativeheight(const ::std::string& value);
  inline void set_creativeheight(const char* value);
  inline void set_creativeheight(const char* value, size_t size);
  inline ::std::string* mutable_creativeheight();
  inline ::std::string* release_creativeheight();
  inline void set_allocated_creativeheight(::std::string* creativeheight);

  // optional string creativeVideoUrl = 9;
  inline bool has_creativevideourl() const;
  inline void clear_creativevideourl();
  static const int kCreativeVideoUrlFieldNumber = 9;
  inline const ::std::string& creativevideourl() const;
  inline void set_creativevideourl(const ::std::string& value);
  inline void set_creativevideourl(const char* value);
  inline void set_creativevideourl(const char* value, size_t size);
  inline ::std::string* mutable_creativevideourl();
  inline ::std::string* release_creativevideourl();
  inline void set_allocated_creativevideourl(::std::string* creativevideourl);

  // optional string videoDurational = 10;
  inline bool has_videodurational() const;
  inline void clear_videodurational();
  static const int kVideoDurationalFieldNumber = 10;
  inline const ::std::string& videodurational() const;
  inline void set_videodurational(const ::std::string& value);
  inline void set_videodurational(const char* value);
  inline void set_videodurational(const char* value, size_t size);
  inline ::std::string* mutable_videodurational();
  inline ::std::string* release_videodurational();
  inline void set_allocated_videodurational(::std::string* videodurational);

  // optional string skipButtonShow = 11;
  inline bool has_skipbuttonshow() const;
  inline void clear_skipbuttonshow();
  static const int kSkipButtonShowFieldNumber = 11;
  inline const ::std::string& skipbuttonshow() const;
  inline void set_skipbuttonshow(const ::std::string& value);
  inline void set_skipbuttonshow(const char* value);
  inline void set_skipbuttonshow(const char* value, size_t size);
  inline ::std::string* mutable_skipbuttonshow();
  inline ::std::string* release_skipbuttonshow();
  inline void set_allocated_skipbuttonshow(::std::string* skipbuttonshow);

  // optional string skipBUttonShowAfter = 12;
  inline bool has_skipbuttonshowafter() const;
  inline void clear_skipbuttonshowafter();
  static const int kSkipBUttonShowAfterFieldNumber = 12;
  inline const ::std::string& skipbuttonshowafter() const;
  inline void set_skipbuttonshowafter(const ::std::string& value);
  inline void set_skipbuttonshowafter(const char* value);
  inline void set_skipbuttonshowafter(const char* value, size_t size);
  inline ::std::string* mutable_skipbuttonshowafter();
  inline ::std::string* release_skipbuttonshowafter();
  inline void set_allocated_skipbuttonshowafter(::std::string* skipbuttonshowafter);

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.Navigation navigation = 13;
  inline bool has_navigation() const;
  inline void clear_navigation();
  static const int kNavigationFieldNumber = 13;
  inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation& navigation() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* mutable_navigation();
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* release_navigation();
  inline void set_allocated_navigation(::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* navigation);

  // optional string htmloverlayShow = 14;
  inline bool has_htmloverlayshow() const;
  inline void clear_htmloverlayshow();
  static const int kHtmloverlayShowFieldNumber = 14;
  inline const ::std::string& htmloverlayshow() const;
  inline void set_htmloverlayshow(const ::std::string& value);
  inline void set_htmloverlayshow(const char* value);
  inline void set_htmloverlayshow(const char* value, size_t size);
  inline ::std::string* mutable_htmloverlayshow();
  inline ::std::string* release_htmloverlayshow();
  inline void set_allocated_htmloverlayshow(::std::string* htmloverlayshow);

  // optional string htmloverlayShowAfter = 15;
  inline bool has_htmloverlayshowafter() const;
  inline void clear_htmloverlayshowafter();
  static const int kHtmloverlayShowAfterFieldNumber = 15;
  inline const ::std::string& htmloverlayshowafter() const;
  inline void set_htmloverlayshowafter(const ::std::string& value);
  inline void set_htmloverlayshowafter(const char* value);
  inline void set_htmloverlayshowafter(const char* value, size_t size);
  inline ::std::string* mutable_htmloverlayshowafter();
  inline ::std::string* release_htmloverlayshowafter();
  inline void set_allocated_htmloverlayshowafter(::std::string* htmloverlayshowafter);

  // optional string htmloverlayUrl = 16;
  inline bool has_htmloverlayurl() const;
  inline void clear_htmloverlayurl();
  static const int kHtmloverlayUrlFieldNumber = 16;
  inline const ::std::string& htmloverlayurl() const;
  inline void set_htmloverlayurl(const ::std::string& value);
  inline void set_htmloverlayurl(const char* value);
  inline void set_htmloverlayurl(const char* value, size_t size);
  inline ::std::string* mutable_htmloverlayurl();
  inline ::std::string* release_htmloverlayurl();
  inline void set_allocated_htmloverlayurl(::std::string* htmloverlayurl);

  // optional string htmloverlayContent = 17;
  inline bool has_htmloverlaycontent() const;
  inline void clear_htmloverlaycontent();
  static const int kHtmloverlayContentFieldNumber = 17;
  inline const ::std::string& htmloverlaycontent() const;
  inline void set_htmloverlaycontent(const ::std::string& value);
  inline void set_htmloverlaycontent(const char* value);
  inline void set_htmloverlaycontent(const char* value, size_t size);
  inline ::std::string* mutable_htmloverlaycontent();
  inline ::std::string* release_htmloverlaycontent();
  inline void set_allocated_htmloverlaycontent(::std::string* htmloverlaycontent);

  // repeated .com.rj.protos.mobile.MobileAdResponse.VAD.Video.VideoTrackingEvents videoTrackingEvents = 18;
  inline int videotrackingevents_size() const;
  inline void clear_videotrackingevents();
  static const int kVideoTrackingEventsFieldNumber = 18;
  inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents& videotrackingevents(int index) const;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents* mutable_videotrackingevents(int index);
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents* add_videotrackingevents();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents >&
      videotrackingevents() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents >*
      mutable_videotrackingevents();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.VAD.Video)
 private:
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_expiration();
  inline void clear_has_expiration();
  inline void set_has_creativedisplay();
  inline void clear_has_creativedisplay();
  inline void set_has_creativedelivery();
  inline void clear_has_creativedelivery();
  inline void set_has_creativetype();
  inline void clear_has_creativetype();
  inline void set_has_creativebitrate();
  inline void clear_has_creativebitrate();
  inline void set_has_creativewidth();
  inline void clear_has_creativewidth();
  inline void set_has_creativeheight();
  inline void clear_has_creativeheight();
  inline void set_has_creativevideourl();
  inline void clear_has_creativevideourl();
  inline void set_has_videodurational();
  inline void clear_has_videodurational();
  inline void set_has_skipbuttonshow();
  inline void clear_has_skipbuttonshow();
  inline void set_has_skipbuttonshowafter();
  inline void clear_has_skipbuttonshowafter();
  inline void set_has_navigation();
  inline void clear_has_navigation();
  inline void set_has_htmloverlayshow();
  inline void clear_has_htmloverlayshow();
  inline void set_has_htmloverlayshowafter();
  inline void clear_has_htmloverlayshowafter();
  inline void set_has_htmloverlayurl();
  inline void clear_has_htmloverlayurl();
  inline void set_has_htmloverlaycontent();
  inline void clear_has_htmloverlaycontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* expiration_;
  ::std::string* creativedisplay_;
  ::std::string* creativedelivery_;
  ::std::string* creativetype_;
  ::std::string* creativebitrate_;
  ::std::string* creativewidth_;
  ::std::string* creativeheight_;
  ::std::string* creativevideourl_;
  ::std::string* videodurational_;
  ::std::string* skipbuttonshow_;
  ::std::string* skipbuttonshowafter_;
  ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* navigation_;
  ::std::string* htmloverlayshow_;
  ::std::string* htmloverlayshowafter_;
  ::std::string* htmloverlayurl_;
  ::std::string* htmloverlaycontent_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents > videotrackingevents_;
  int orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_VAD_Video* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_VAD : public ::google::protobuf::Message {
 public:
  MobileAdResponse_VAD();
  virtual ~MobileAdResponse_VAD();

  MobileAdResponse_VAD(const MobileAdResponse_VAD& from);

  inline MobileAdResponse_VAD& operator=(const MobileAdResponse_VAD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_VAD& default_instance();

  void Swap(MobileAdResponse_VAD* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_VAD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_VAD& from);
  void MergeFrom(const MobileAdResponse_VAD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_VAD_Navigation Navigation;
  typedef MobileAdResponse_VAD_Interstitial Interstitial;
  typedef MobileAdResponse_VAD_Video Video;

  typedef MobileAdResponse_VAD_VadType VadType;
  static const VadType VIDEO = MobileAdResponse_VAD_VadType_VIDEO;
  static const VadType INTERSTITIAL = MobileAdResponse_VAD_VadType_INTERSTITIAL;
  static const VadType VideoToInterstitial = MobileAdResponse_VAD_VadType_VideoToInterstitial;
  static const VadType InterstitialToVideo = MobileAdResponse_VAD_VadType_InterstitialToVideo;
  static const VadType NoAd = MobileAdResponse_VAD_VadType_NoAd;
  static inline bool VadType_IsValid(int value) {
    return MobileAdResponse_VAD_VadType_IsValid(value);
  }
  static const VadType VadType_MIN =
    MobileAdResponse_VAD_VadType_VadType_MIN;
  static const VadType VadType_MAX =
    MobileAdResponse_VAD_VadType_VadType_MAX;
  static const int VadType_ARRAYSIZE =
    MobileAdResponse_VAD_VadType_VadType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VadType_descriptor() {
    return MobileAdResponse_VAD_VadType_descriptor();
  }
  static inline const ::std::string& VadType_Name(VadType value) {
    return MobileAdResponse_VAD_VadType_Name(value);
  }
  static inline bool VadType_Parse(const ::std::string& name,
      VadType* value) {
    return MobileAdResponse_VAD_VadType_Parse(name, value);
  }

  typedef MobileAdResponse_VAD_Animation Animation;
  static const Animation FADEIN = MobileAdResponse_VAD_Animation_FADEIN;
  static const Animation FADEOUT = MobileAdResponse_VAD_Animation_FADEOUT;
  static const Animation SLIDEBOTTOMIN = MobileAdResponse_VAD_Animation_SLIDEBOTTOMIN;
  static const Animation SLIDEBOTTOMOUT = MobileAdResponse_VAD_Animation_SLIDEBOTTOMOUT;
  static const Animation SLIDELEFTIN = MobileAdResponse_VAD_Animation_SLIDELEFTIN;
  static const Animation SLIDELEFTOUT = MobileAdResponse_VAD_Animation_SLIDELEFTOUT;
  static const Animation SLIDERIGHTIN = MobileAdResponse_VAD_Animation_SLIDERIGHTIN;
  static const Animation SLIDERIGHTOUT = MobileAdResponse_VAD_Animation_SLIDERIGHTOUT;
  static const Animation SLIDETOPIN = MobileAdResponse_VAD_Animation_SLIDETOPIN;
  static const Animation SLIDETOPOUT = MobileAdResponse_VAD_Animation_SLIDETOPOUT;
  static inline bool Animation_IsValid(int value) {
    return MobileAdResponse_VAD_Animation_IsValid(value);
  }
  static const Animation Animation_MIN =
    MobileAdResponse_VAD_Animation_Animation_MIN;
  static const Animation Animation_MAX =
    MobileAdResponse_VAD_Animation_Animation_MAX;
  static const int Animation_ARRAYSIZE =
    MobileAdResponse_VAD_Animation_Animation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Animation_descriptor() {
    return MobileAdResponse_VAD_Animation_descriptor();
  }
  static inline const ::std::string& Animation_Name(Animation value) {
    return MobileAdResponse_VAD_Animation_Name(value);
  }
  static inline bool Animation_Parse(const ::std::string& name,
      Animation* value) {
    return MobileAdResponse_VAD_Animation_Parse(name, value);
  }

  typedef MobileAdResponse_VAD_Orientation Orientation;
  static const Orientation LANDSCAPE = MobileAdResponse_VAD_Orientation_LANDSCAPE;
  static const Orientation PORTRAIT = MobileAdResponse_VAD_Orientation_PORTRAIT;
  static inline bool Orientation_IsValid(int value) {
    return MobileAdResponse_VAD_Orientation_IsValid(value);
  }
  static const Orientation Orientation_MIN =
    MobileAdResponse_VAD_Orientation_Orientation_MIN;
  static const Orientation Orientation_MAX =
    MobileAdResponse_VAD_Orientation_Orientation_MAX;
  static const int Orientation_ARRAYSIZE =
    MobileAdResponse_VAD_Orientation_Orientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Orientation_descriptor() {
    return MobileAdResponse_VAD_Orientation_descriptor();
  }
  static inline const ::std::string& Orientation_Name(Orientation value) {
    return MobileAdResponse_VAD_Orientation_Name(value);
  }
  static inline bool Orientation_Parse(const ::std::string& name,
      Orientation* value) {
    return MobileAdResponse_VAD_Orientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.VadType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_VadType type() const;
  inline void set_type(::com::rj::protos::mobile::MobileAdResponse_VAD_VadType value);

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.Animation animation = 2;
  inline bool has_animation() const;
  inline void clear_animation();
  static const int kAnimationFieldNumber = 2;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Animation animation() const;
  inline void set_animation(::com::rj::protos::mobile::MobileAdResponse_VAD_Animation value);

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.Interstitial interstitial = 3;
  inline bool has_interstitial() const;
  inline void clear_interstitial();
  static const int kInterstitialFieldNumber = 3;
  inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial& interstitial() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial* mutable_interstitial();
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial* release_interstitial();
  inline void set_allocated_interstitial(::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial* interstitial);

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD.Video video = 4;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 4;
  inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Video& video() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video* mutable_video();
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video* release_video();
  inline void set_allocated_video(::com::rj::protos::mobile::MobileAdResponse_VAD_Video* video);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.VAD)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_animation();
  inline void clear_has_animation();
  inline void set_has_interstitial();
  inline void clear_has_interstitial();
  inline void set_has_video();
  inline void clear_has_video();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int animation_;
  ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial* interstitial_;
  ::com::rj::protos::mobile::MobileAdResponse_VAD_Video* video_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_VAD* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_Native_Content : public ::google::protobuf::Message {
 public:
  MobileAdResponse_Native_Content();
  virtual ~MobileAdResponse_Native_Content();

  MobileAdResponse_Native_Content(const MobileAdResponse_Native_Content& from);

  inline MobileAdResponse_Native_Content& operator=(const MobileAdResponse_Native_Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_Native_Content& default_instance();

  void Swap(MobileAdResponse_Native_Content* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_Native_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_Native_Content& from);
  void MergeFrom(const MobileAdResponse_Native_Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_Native_Content_MutipleMediaType MutipleMediaType;
  static const MutipleMediaType Video = MobileAdResponse_Native_Content_MutipleMediaType_Video;
  static const MutipleMediaType Youtube = MobileAdResponse_Native_Content_MutipleMediaType_Youtube;
  static const MutipleMediaType Mraid = MobileAdResponse_Native_Content_MutipleMediaType_Mraid;
  static inline bool MutipleMediaType_IsValid(int value) {
    return MobileAdResponse_Native_Content_MutipleMediaType_IsValid(value);
  }
  static const MutipleMediaType MutipleMediaType_MIN =
    MobileAdResponse_Native_Content_MutipleMediaType_MutipleMediaType_MIN;
  static const MutipleMediaType MutipleMediaType_MAX =
    MobileAdResponse_Native_Content_MutipleMediaType_MutipleMediaType_MAX;
  static const int MutipleMediaType_ARRAYSIZE =
    MobileAdResponse_Native_Content_MutipleMediaType_MutipleMediaType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MutipleMediaType_descriptor() {
    return MobileAdResponse_Native_Content_MutipleMediaType_descriptor();
  }
  static inline const ::std::string& MutipleMediaType_Name(MutipleMediaType value) {
    return MobileAdResponse_Native_Content_MutipleMediaType_Name(value);
  }
  static inline bool MutipleMediaType_Parse(const ::std::string& name,
      MutipleMediaType* value) {
    return MobileAdResponse_Native_Content_MutipleMediaType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string contentType = 1;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 1;
  inline const ::std::string& contenttype() const;
  inline void set_contenttype(const ::std::string& value);
  inline void set_contenttype(const char* value);
  inline void set_contenttype(const char* value, size_t size);
  inline ::std::string* mutable_contenttype();
  inline ::std::string* release_contenttype();
  inline void set_allocated_contenttype(::std::string* contenttype);

  // optional string appType = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kAppTypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // optional string iconUrl = 3;
  inline bool has_iconurl() const;
  inline void clear_iconurl();
  static const int kIconUrlFieldNumber = 3;
  inline const ::std::string& iconurl() const;
  inline void set_iconurl(const ::std::string& value);
  inline void set_iconurl(const char* value);
  inline void set_iconurl(const char* value, size_t size);
  inline ::std::string* mutable_iconurl();
  inline ::std::string* release_iconurl();
  inline void set_allocated_iconurl(::std::string* iconurl);

  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string subTitle = 5;
  inline bool has_subtitle() const;
  inline void clear_subtitle();
  static const int kSubTitleFieldNumber = 5;
  inline const ::std::string& subtitle() const;
  inline void set_subtitle(const ::std::string& value);
  inline void set_subtitle(const char* value);
  inline void set_subtitle(const char* value, size_t size);
  inline ::std::string* mutable_subtitle();
  inline ::std::string* release_subtitle();
  inline void set_allocated_subtitle(::std::string* subtitle);

  // optional string description = 6;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 6;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .com.rj.protos.mobile.MobileAdResponse.Native.Content.MutipleMediaType mutipleMediaType = 7;
  inline bool has_mutiplemediatype() const;
  inline void clear_mutiplemediatype();
  static const int kMutipleMediaTypeFieldNumber = 7;
  inline ::com::rj::protos::mobile::MobileAdResponse_Native_Content_MutipleMediaType mutiplemediatype() const;
  inline void set_mutiplemediatype(::com::rj::protos::mobile::MobileAdResponse_Native_Content_MutipleMediaType value);

  // optional string imageUrl = 8;
  inline bool has_imageurl() const;
  inline void clear_imageurl();
  static const int kImageUrlFieldNumber = 8;
  inline const ::std::string& imageurl() const;
  inline void set_imageurl(const ::std::string& value);
  inline void set_imageurl(const char* value);
  inline void set_imageurl(const char* value, size_t size);
  inline ::std::string* mutable_imageurl();
  inline ::std::string* release_imageurl();
  inline void set_allocated_imageurl(::std::string* imageurl);

  // optional string videoUrl = 9;
  inline bool has_videourl() const;
  inline void clear_videourl();
  static const int kVideoUrlFieldNumber = 9;
  inline const ::std::string& videourl() const;
  inline void set_videourl(const ::std::string& value);
  inline void set_videourl(const char* value);
  inline void set_videourl(const char* value, size_t size);
  inline ::std::string* mutable_videourl();
  inline ::std::string* release_videourl();
  inline void set_allocated_videourl(::std::string* videourl);

  // optional string youtubeUrl = 10;
  inline bool has_youtubeurl() const;
  inline void clear_youtubeurl();
  static const int kYoutubeUrlFieldNumber = 10;
  inline const ::std::string& youtubeurl() const;
  inline void set_youtubeurl(const ::std::string& value);
  inline void set_youtubeurl(const char* value);
  inline void set_youtubeurl(const char* value, size_t size);
  inline ::std::string* mutable_youtubeurl();
  inline ::std::string* release_youtubeurl();
  inline void set_allocated_youtubeurl(::std::string* youtubeurl);

  // optional string mraidMarkUp = 11;
  inline bool has_mraidmarkup() const;
  inline void clear_mraidmarkup();
  static const int kMraidMarkUpFieldNumber = 11;
  inline const ::std::string& mraidmarkup() const;
  inline void set_mraidmarkup(const ::std::string& value);
  inline void set_mraidmarkup(const char* value);
  inline void set_mraidmarkup(const char* value, size_t size);
  inline ::std::string* mutable_mraidmarkup();
  inline ::std::string* release_mraidmarkup();
  inline void set_allocated_mraidmarkup(::std::string* mraidmarkup);

  // optional string clickUrl = 12;
  inline bool has_clickurl() const;
  inline void clear_clickurl();
  static const int kClickUrlFieldNumber = 12;
  inline const ::std::string& clickurl() const;
  inline void set_clickurl(const ::std::string& value);
  inline void set_clickurl(const char* value);
  inline void set_clickurl(const char* value, size_t size);
  inline ::std::string* mutable_clickurl();
  inline ::std::string* release_clickurl();
  inline void set_allocated_clickurl(::std::string* clickurl);

  // optional string relatedInfo = 13;
  inline bool has_relatedinfo() const;
  inline void clear_relatedinfo();
  static const int kRelatedInfoFieldNumber = 13;
  inline const ::std::string& relatedinfo() const;
  inline void set_relatedinfo(const ::std::string& value);
  inline void set_relatedinfo(const char* value);
  inline void set_relatedinfo(const char* value, size_t size);
  inline ::std::string* mutable_relatedinfo();
  inline ::std::string* release_relatedinfo();
  inline void set_allocated_relatedinfo(::std::string* relatedinfo);

  // optional string tracking = 14;
  inline bool has_tracking() const;
  inline void clear_tracking();
  static const int kTrackingFieldNumber = 14;
  inline const ::std::string& tracking() const;
  inline void set_tracking(const ::std::string& value);
  inline void set_tracking(const char* value);
  inline void set_tracking(const char* value, size_t size);
  inline ::std::string* mutable_tracking();
  inline ::std::string* release_tracking();
  inline void set_allocated_tracking(::std::string* tracking);

  // optional string appPackage = 15;
  inline bool has_apppackage() const;
  inline void clear_apppackage();
  static const int kAppPackageFieldNumber = 15;
  inline const ::std::string& apppackage() const;
  inline void set_apppackage(const ::std::string& value);
  inline void set_apppackage(const char* value);
  inline void set_apppackage(const char* value, size_t size);
  inline ::std::string* mutable_apppackage();
  inline ::std::string* release_apppackage();
  inline void set_allocated_apppackage(::std::string* apppackage);

  // optional string telNum = 16;
  inline bool has_telnum() const;
  inline void clear_telnum();
  static const int kTelNumFieldNumber = 16;
  inline const ::std::string& telnum() const;
  inline void set_telnum(const ::std::string& value);
  inline void set_telnum(const char* value);
  inline void set_telnum(const char* value, size_t size);
  inline ::std::string* mutable_telnum();
  inline ::std::string* release_telnum();
  inline void set_allocated_telnum(::std::string* telnum);

  // optional string adLink = 17;
  inline bool has_adlink() const;
  inline void clear_adlink();
  static const int kAdLinkFieldNumber = 17;
  inline const ::std::string& adlink() const;
  inline void set_adlink(const ::std::string& value);
  inline void set_adlink(const char* value);
  inline void set_adlink(const char* value, size_t size);
  inline ::std::string* mutable_adlink();
  inline ::std::string* release_adlink();
  inline void set_allocated_adlink(::std::string* adlink);

  // optional string shareUrl = 18;
  inline bool has_shareurl() const;
  inline void clear_shareurl();
  static const int kShareUrlFieldNumber = 18;
  inline const ::std::string& shareurl() const;
  inline void set_shareurl(const ::std::string& value);
  inline void set_shareurl(const char* value);
  inline void set_shareurl(const char* value, size_t size);
  inline ::std::string* mutable_shareurl();
  inline ::std::string* release_shareurl();
  inline void set_allocated_shareurl(::std::string* shareurl);

  // repeated string impressionUrl = 19;
  inline int impressionurl_size() const;
  inline void clear_impressionurl();
  static const int kImpressionUrlFieldNumber = 19;
  inline const ::std::string& impressionurl(int index) const;
  inline ::std::string* mutable_impressionurl(int index);
  inline void set_impressionurl(int index, const ::std::string& value);
  inline void set_impressionurl(int index, const char* value);
  inline void set_impressionurl(int index, const char* value, size_t size);
  inline ::std::string* add_impressionurl();
  inline void add_impressionurl(const ::std::string& value);
  inline void add_impressionurl(const char* value);
  inline void add_impressionurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& impressionurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impressionurl();

  // repeated string imageTrackingUrl = 20;
  inline int imagetrackingurl_size() const;
  inline void clear_imagetrackingurl();
  static const int kImageTrackingUrlFieldNumber = 20;
  inline const ::std::string& imagetrackingurl(int index) const;
  inline ::std::string* mutable_imagetrackingurl(int index);
  inline void set_imagetrackingurl(int index, const ::std::string& value);
  inline void set_imagetrackingurl(int index, const char* value);
  inline void set_imagetrackingurl(int index, const char* value, size_t size);
  inline ::std::string* add_imagetrackingurl();
  inline void add_imagetrackingurl(const ::std::string& value);
  inline void add_imagetrackingurl(const char* value);
  inline void add_imagetrackingurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& imagetrackingurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_imagetrackingurl();

  // repeated string buttonTrackingUrl = 21;
  inline int buttontrackingurl_size() const;
  inline void clear_buttontrackingurl();
  static const int kButtonTrackingUrlFieldNumber = 21;
  inline const ::std::string& buttontrackingurl(int index) const;
  inline ::std::string* mutable_buttontrackingurl(int index);
  inline void set_buttontrackingurl(int index, const ::std::string& value);
  inline void set_buttontrackingurl(int index, const char* value);
  inline void set_buttontrackingurl(int index, const char* value, size_t size);
  inline ::std::string* add_buttontrackingurl();
  inline void add_buttontrackingurl(const ::std::string& value);
  inline void add_buttontrackingurl(const char* value);
  inline void add_buttontrackingurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& buttontrackingurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_buttontrackingurl();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.Native.Content)
 private:
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_iconurl();
  inline void clear_has_iconurl();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_subtitle();
  inline void clear_has_subtitle();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_mutiplemediatype();
  inline void clear_has_mutiplemediatype();
  inline void set_has_imageurl();
  inline void clear_has_imageurl();
  inline void set_has_videourl();
  inline void clear_has_videourl();
  inline void set_has_youtubeurl();
  inline void clear_has_youtubeurl();
  inline void set_has_mraidmarkup();
  inline void clear_has_mraidmarkup();
  inline void set_has_clickurl();
  inline void clear_has_clickurl();
  inline void set_has_relatedinfo();
  inline void clear_has_relatedinfo();
  inline void set_has_tracking();
  inline void clear_has_tracking();
  inline void set_has_apppackage();
  inline void clear_has_apppackage();
  inline void set_has_telnum();
  inline void clear_has_telnum();
  inline void set_has_adlink();
  inline void clear_has_adlink();
  inline void set_has_shareurl();
  inline void clear_has_shareurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contenttype_;
  ::std::string* apptype_;
  ::std::string* iconurl_;
  ::std::string* title_;
  ::std::string* subtitle_;
  ::std::string* description_;
  ::std::string* imageurl_;
  ::std::string* videourl_;
  ::std::string* youtubeurl_;
  ::std::string* mraidmarkup_;
  ::std::string* clickurl_;
  ::std::string* relatedinfo_;
  ::std::string* tracking_;
  ::std::string* apppackage_;
  ::std::string* telnum_;
  ::std::string* adlink_;
  ::std::string* shareurl_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impressionurl_;
  ::google::protobuf::RepeatedPtrField< ::std::string> imagetrackingurl_;
  ::google::protobuf::RepeatedPtrField< ::std::string> buttontrackingurl_;
  int mutiplemediatype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_Native_Content* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse_Native : public ::google::protobuf::Message {
 public:
  MobileAdResponse_Native();
  virtual ~MobileAdResponse_Native();

  MobileAdResponse_Native(const MobileAdResponse_Native& from);

  inline MobileAdResponse_Native& operator=(const MobileAdResponse_Native& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_Native& default_instance();

  void Swap(MobileAdResponse_Native* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_Native* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_Native& from);
  void MergeFrom(const MobileAdResponse_Native& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_Native_Content Content;

  // accessors -------------------------------------------------------

  // optional string adType = 1;
  inline bool has_adtype() const;
  inline void clear_adtype();
  static const int kAdTypeFieldNumber = 1;
  inline const ::std::string& adtype() const;
  inline void set_adtype(const ::std::string& value);
  inline void set_adtype(const char* value);
  inline void set_adtype(const char* value, size_t size);
  inline ::std::string* mutable_adtype();
  inline ::std::string* release_adtype();
  inline void set_allocated_adtype(::std::string* adtype);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .com.rj.protos.mobile.MobileAdResponse.Native.Content content = 3;
  inline int content_size() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::com::rj::protos::mobile::MobileAdResponse_Native_Content& content(int index) const;
  inline ::com::rj::protos::mobile::MobileAdResponse_Native_Content* mutable_content(int index);
  inline ::com::rj::protos::mobile::MobileAdResponse_Native_Content* add_content();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Native_Content >&
      content() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Native_Content >*
      mutable_content();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.Native)
 private:
  inline void set_has_adtype();
  inline void clear_has_adtype();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* adtype_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Native_Content > content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_Native* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse : public ::google::protobuf::Message {
 public:
  MobileAdResponse();
  virtual ~MobileAdResponse();

  MobileAdResponse(const MobileAdResponse& from);

  inline MobileAdResponse& operator=(const MobileAdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse& default_instance();

  void Swap(MobileAdResponse* other);

  // implements Message ----------------------------------------------

  MobileAdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse& from);
  void MergeFrom(const MobileAdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_Banner Banner;
  typedef MobileAdResponse_VAD VAD;
  typedef MobileAdResponse_Native Native;

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string bidderId = 2;
  inline bool has_bidderid() const;
  inline void clear_bidderid();
  static const int kBidderIdFieldNumber = 2;
  inline const ::std::string& bidderid() const;
  inline void set_bidderid(const ::std::string& value);
  inline void set_bidderid(const char* value);
  inline void set_bidderid(const char* value, size_t size);
  inline ::std::string* mutable_bidderid();
  inline ::std::string* release_bidderid();
  inline void set_allocated_bidderid(::std::string* bidderid);

  // optional .com.rj.protos.mobile.MobileAdResponse.Banner banner = 3;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 3;
  inline const ::com::rj::protos::mobile::MobileAdResponse_Banner& banner() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_Banner* mutable_banner();
  inline ::com::rj::protos::mobile::MobileAdResponse_Banner* release_banner();
  inline void set_allocated_banner(::com::rj::protos::mobile::MobileAdResponse_Banner* banner);

  // optional .com.rj.protos.mobile.MobileAdResponse.VAD vad = 4;
  inline bool has_vad() const;
  inline void clear_vad();
  static const int kVadFieldNumber = 4;
  inline const ::com::rj::protos::mobile::MobileAdResponse_VAD& vad() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD* mutable_vad();
  inline ::com::rj::protos::mobile::MobileAdResponse_VAD* release_vad();
  inline void set_allocated_vad(::com::rj::protos::mobile::MobileAdResponse_VAD* vad);

  // optional .com.rj.protos.mobile.MobileAdResponse.Native native = 5;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 5;
  inline const ::com::rj::protos::mobile::MobileAdResponse_Native& native() const;
  inline ::com::rj::protos::mobile::MobileAdResponse_Native* mutable_native();
  inline ::com::rj::protos::mobile::MobileAdResponse_Native* release_native();
  inline void set_allocated_native(::com::rj::protos::mobile::MobileAdResponse_Native* native);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bidderid();
  inline void clear_has_bidderid();
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_vad();
  inline void clear_has_vad();
  inline void set_has_native();
  inline void clear_has_native();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* bidderid_;
  ::com::rj::protos::mobile::MobileAdResponse_Banner* banner_;
  ::com::rj::protos::mobile::MobileAdResponse_VAD* vad_;
  ::com::rj::protos::mobile::MobileAdResponse_Native* native_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileResponse_2eproto();
  friend void protobuf_AssignDesc_AdMobileResponse_2eproto();
  friend void protobuf_ShutdownFile_AdMobileResponse_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MobileAdResponse_Banner

// optional .com.rj.protos.mobile.MobileAdResponse.Banner.Type type = 1;
inline bool MobileAdResponse_Banner::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_Banner::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_Banner::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_Banner::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::rj::protos::mobile::MobileAdResponse_Banner_Type MobileAdResponse_Banner::type() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_Banner_Type >(type_);
}
inline void MobileAdResponse_Banner::set_type(::com::rj::protos::mobile::MobileAdResponse_Banner_Type value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_Banner_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string htmlMarkup = 2;
inline bool MobileAdResponse_Banner::has_htmlmarkup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_Banner::set_has_htmlmarkup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_Banner::clear_has_htmlmarkup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_Banner::clear_htmlmarkup() {
  if (htmlmarkup_ != &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_->clear();
  }
  clear_has_htmlmarkup();
}
inline const ::std::string& MobileAdResponse_Banner::htmlmarkup() const {
  return *htmlmarkup_;
}
inline void MobileAdResponse_Banner::set_htmlmarkup(const ::std::string& value) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(value);
}
inline void MobileAdResponse_Banner::set_htmlmarkup(const char* value) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(value);
}
inline void MobileAdResponse_Banner::set_htmlmarkup(const char* value, size_t size) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::mutable_htmlmarkup() {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  return htmlmarkup_;
}
inline ::std::string* MobileAdResponse_Banner::release_htmlmarkup() {
  clear_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = htmlmarkup_;
    htmlmarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Banner::set_allocated_htmlmarkup(::std::string* htmlmarkup) {
  if (htmlmarkup_ != &::google::protobuf::internal::kEmptyString) {
    delete htmlmarkup_;
  }
  if (htmlmarkup) {
    set_has_htmlmarkup();
    htmlmarkup_ = htmlmarkup;
  } else {
    clear_has_htmlmarkup();
    htmlmarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string clickOpenType = 3;
inline bool MobileAdResponse_Banner::has_clickopentype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_Banner::set_has_clickopentype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_Banner::clear_has_clickopentype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_Banner::clear_clickopentype() {
  if (clickopentype_ != &::google::protobuf::internal::kEmptyString) {
    clickopentype_->clear();
  }
  clear_has_clickopentype();
}
inline const ::std::string& MobileAdResponse_Banner::clickopentype() const {
  return *clickopentype_;
}
inline void MobileAdResponse_Banner::set_clickopentype(const ::std::string& value) {
  set_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    clickopentype_ = new ::std::string;
  }
  clickopentype_->assign(value);
}
inline void MobileAdResponse_Banner::set_clickopentype(const char* value) {
  set_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    clickopentype_ = new ::std::string;
  }
  clickopentype_->assign(value);
}
inline void MobileAdResponse_Banner::set_clickopentype(const char* value, size_t size) {
  set_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    clickopentype_ = new ::std::string;
  }
  clickopentype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::mutable_clickopentype() {
  set_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    clickopentype_ = new ::std::string;
  }
  return clickopentype_;
}
inline ::std::string* MobileAdResponse_Banner::release_clickopentype() {
  clear_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clickopentype_;
    clickopentype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Banner::set_allocated_clickopentype(::std::string* clickopentype) {
  if (clickopentype_ != &::google::protobuf::internal::kEmptyString) {
    delete clickopentype_;
  }
  if (clickopentype) {
    set_has_clickopentype();
    clickopentype_ = clickopentype;
  } else {
    clear_has_clickopentype();
    clickopentype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string clickUrl = 4;
inline bool MobileAdResponse_Banner::has_clickurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_Banner::set_has_clickurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_Banner::clear_has_clickurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_Banner::clear_clickurl() {
  if (clickurl_ != &::google::protobuf::internal::kEmptyString) {
    clickurl_->clear();
  }
  clear_has_clickurl();
}
inline const ::std::string& MobileAdResponse_Banner::clickurl() const {
  return *clickurl_;
}
inline void MobileAdResponse_Banner::set_clickurl(const ::std::string& value) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(value);
}
inline void MobileAdResponse_Banner::set_clickurl(const char* value) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(value);
}
inline void MobileAdResponse_Banner::set_clickurl(const char* value, size_t size) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::mutable_clickurl() {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  return clickurl_;
}
inline ::std::string* MobileAdResponse_Banner::release_clickurl() {
  clear_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clickurl_;
    clickurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Banner::set_allocated_clickurl(::std::string* clickurl) {
  if (clickurl_ != &::google::protobuf::internal::kEmptyString) {
    delete clickurl_;
  }
  if (clickurl) {
    set_has_clickurl();
    clickurl_ = clickurl;
  } else {
    clear_has_clickurl();
    clickurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imageUrl = 5;
inline bool MobileAdResponse_Banner::has_imageurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdResponse_Banner::set_has_imageurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdResponse_Banner::clear_has_imageurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdResponse_Banner::clear_imageurl() {
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    imageurl_->clear();
  }
  clear_has_imageurl();
}
inline const ::std::string& MobileAdResponse_Banner::imageurl() const {
  return *imageurl_;
}
inline void MobileAdResponse_Banner::set_imageurl(const ::std::string& value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
}
inline void MobileAdResponse_Banner::set_imageurl(const char* value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
}
inline void MobileAdResponse_Banner::set_imageurl(const char* value, size_t size) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::mutable_imageurl() {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  return imageurl_;
}
inline ::std::string* MobileAdResponse_Banner::release_imageurl() {
  clear_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageurl_;
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Banner::set_allocated_imageurl(::std::string* imageurl) {
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imageurl_;
  }
  if (imageurl) {
    set_has_imageurl();
    imageurl_ = imageurl;
  } else {
    clear_has_imageurl();
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refresh = 6;
inline bool MobileAdResponse_Banner::has_refresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdResponse_Banner::set_has_refresh() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdResponse_Banner::clear_has_refresh() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdResponse_Banner::clear_refresh() {
  if (refresh_ != &::google::protobuf::internal::kEmptyString) {
    refresh_->clear();
  }
  clear_has_refresh();
}
inline const ::std::string& MobileAdResponse_Banner::refresh() const {
  return *refresh_;
}
inline void MobileAdResponse_Banner::set_refresh(const ::std::string& value) {
  set_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    refresh_ = new ::std::string;
  }
  refresh_->assign(value);
}
inline void MobileAdResponse_Banner::set_refresh(const char* value) {
  set_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    refresh_ = new ::std::string;
  }
  refresh_->assign(value);
}
inline void MobileAdResponse_Banner::set_refresh(const char* value, size_t size) {
  set_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    refresh_ = new ::std::string;
  }
  refresh_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::mutable_refresh() {
  set_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    refresh_ = new ::std::string;
  }
  return refresh_;
}
inline ::std::string* MobileAdResponse_Banner::release_refresh() {
  clear_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refresh_;
    refresh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Banner::set_allocated_refresh(::std::string* refresh) {
  if (refresh_ != &::google::protobuf::internal::kEmptyString) {
    delete refresh_;
  }
  if (refresh) {
    set_has_refresh();
    refresh_ = refresh;
  } else {
    clear_has_refresh();
    refresh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string reload = 7;
inline bool MobileAdResponse_Banner::has_reload() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdResponse_Banner::set_has_reload() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdResponse_Banner::clear_has_reload() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdResponse_Banner::clear_reload() {
  if (reload_ != &::google::protobuf::internal::kEmptyString) {
    reload_->clear();
  }
  clear_has_reload();
}
inline const ::std::string& MobileAdResponse_Banner::reload() const {
  return *reload_;
}
inline void MobileAdResponse_Banner::set_reload(const ::std::string& value) {
  set_has_reload();
  if (reload_ == &::google::protobuf::internal::kEmptyString) {
    reload_ = new ::std::string;
  }
  reload_->assign(value);
}
inline void MobileAdResponse_Banner::set_reload(const char* value) {
  set_has_reload();
  if (reload_ == &::google::protobuf::internal::kEmptyString) {
    reload_ = new ::std::string;
  }
  reload_->assign(value);
}
inline void MobileAdResponse_Banner::set_reload(const char* value, size_t size) {
  set_has_reload();
  if (reload_ == &::google::protobuf::internal::kEmptyString) {
    reload_ = new ::std::string;
  }
  reload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::mutable_reload() {
  set_has_reload();
  if (reload_ == &::google::protobuf::internal::kEmptyString) {
    reload_ = new ::std::string;
  }
  return reload_;
}
inline ::std::string* MobileAdResponse_Banner::release_reload() {
  clear_has_reload();
  if (reload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reload_;
    reload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Banner::set_allocated_reload(::std::string* reload) {
  if (reload_ != &::google::protobuf::internal::kEmptyString) {
    delete reload_;
  }
  if (reload) {
    set_has_reload();
    reload_ = reload;
  } else {
    clear_has_reload();
    reload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string animation = 8;
inline bool MobileAdResponse_Banner::has_animation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdResponse_Banner::set_has_animation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdResponse_Banner::clear_has_animation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdResponse_Banner::clear_animation() {
  if (animation_ != &::google::protobuf::internal::kEmptyString) {
    animation_->clear();
  }
  clear_has_animation();
}
inline const ::std::string& MobileAdResponse_Banner::animation() const {
  return *animation_;
}
inline void MobileAdResponse_Banner::set_animation(const ::std::string& value) {
  set_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    animation_ = new ::std::string;
  }
  animation_->assign(value);
}
inline void MobileAdResponse_Banner::set_animation(const char* value) {
  set_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    animation_ = new ::std::string;
  }
  animation_->assign(value);
}
inline void MobileAdResponse_Banner::set_animation(const char* value, size_t size) {
  set_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    animation_ = new ::std::string;
  }
  animation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::mutable_animation() {
  set_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    animation_ = new ::std::string;
  }
  return animation_;
}
inline ::std::string* MobileAdResponse_Banner::release_animation() {
  clear_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = animation_;
    animation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Banner::set_allocated_animation(::std::string* animation) {
  if (animation_ != &::google::protobuf::internal::kEmptyString) {
    delete animation_;
  }
  if (animation) {
    set_has_animation();
    animation_ = animation;
  } else {
    clear_has_animation();
    animation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string impressionUrl = 9;
inline int MobileAdResponse_Banner::impressionurl_size() const {
  return impressionurl_.size();
}
inline void MobileAdResponse_Banner::clear_impressionurl() {
  impressionurl_.Clear();
}
inline const ::std::string& MobileAdResponse_Banner::impressionurl(int index) const {
  return impressionurl_.Get(index);
}
inline ::std::string* MobileAdResponse_Banner::mutable_impressionurl(int index) {
  return impressionurl_.Mutable(index);
}
inline void MobileAdResponse_Banner::set_impressionurl(int index, const ::std::string& value) {
  impressionurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Banner::set_impressionurl(int index, const char* value) {
  impressionurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Banner::set_impressionurl(int index, const char* value, size_t size) {
  impressionurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::add_impressionurl() {
  return impressionurl_.Add();
}
inline void MobileAdResponse_Banner::add_impressionurl(const ::std::string& value) {
  impressionurl_.Add()->assign(value);
}
inline void MobileAdResponse_Banner::add_impressionurl(const char* value) {
  impressionurl_.Add()->assign(value);
}
inline void MobileAdResponse_Banner::add_impressionurl(const char* value, size_t size) {
  impressionurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdResponse_Banner::impressionurl() const {
  return impressionurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdResponse_Banner::mutable_impressionurl() {
  return &impressionurl_;
}

// repeated string clickTrackingUrl = 10;
inline int MobileAdResponse_Banner::clicktrackingurl_size() const {
  return clicktrackingurl_.size();
}
inline void MobileAdResponse_Banner::clear_clicktrackingurl() {
  clicktrackingurl_.Clear();
}
inline const ::std::string& MobileAdResponse_Banner::clicktrackingurl(int index) const {
  return clicktrackingurl_.Get(index);
}
inline ::std::string* MobileAdResponse_Banner::mutable_clicktrackingurl(int index) {
  return clicktrackingurl_.Mutable(index);
}
inline void MobileAdResponse_Banner::set_clicktrackingurl(int index, const ::std::string& value) {
  clicktrackingurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Banner::set_clicktrackingurl(int index, const char* value) {
  clicktrackingurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Banner::set_clicktrackingurl(int index, const char* value, size_t size) {
  clicktrackingurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::add_clicktrackingurl() {
  return clicktrackingurl_.Add();
}
inline void MobileAdResponse_Banner::add_clicktrackingurl(const ::std::string& value) {
  clicktrackingurl_.Add()->assign(value);
}
inline void MobileAdResponse_Banner::add_clicktrackingurl(const char* value) {
  clicktrackingurl_.Add()->assign(value);
}
inline void MobileAdResponse_Banner::add_clicktrackingurl(const char* value, size_t size) {
  clicktrackingurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdResponse_Banner::clicktrackingurl() const {
  return clicktrackingurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdResponse_Banner::mutable_clicktrackingurl() {
  return &clicktrackingurl_;
}

// optional string adLink = 11;
inline bool MobileAdResponse_Banner::has_adlink() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdResponse_Banner::set_has_adlink() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdResponse_Banner::clear_has_adlink() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdResponse_Banner::clear_adlink() {
  if (adlink_ != &::google::protobuf::internal::kEmptyString) {
    adlink_->clear();
  }
  clear_has_adlink();
}
inline const ::std::string& MobileAdResponse_Banner::adlink() const {
  return *adlink_;
}
inline void MobileAdResponse_Banner::set_adlink(const ::std::string& value) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(value);
}
inline void MobileAdResponse_Banner::set_adlink(const char* value) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(value);
}
inline void MobileAdResponse_Banner::set_adlink(const char* value, size_t size) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Banner::mutable_adlink() {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  return adlink_;
}
inline ::std::string* MobileAdResponse_Banner::release_adlink() {
  clear_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adlink_;
    adlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Banner::set_allocated_adlink(::std::string* adlink) {
  if (adlink_ != &::google::protobuf::internal::kEmptyString) {
    delete adlink_;
  }
  if (adlink) {
    set_has_adlink();
    adlink_ = adlink;
  } else {
    clear_has_adlink();
    adlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_VAD_Navigation

// optional string show = 1;
inline bool MobileAdResponse_VAD_Navigation::has_show() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_show() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_show() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_VAD_Navigation::clear_show() {
  if (show_ != &::google::protobuf::internal::kEmptyString) {
    show_->clear();
  }
  clear_has_show();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::show() const {
  return *show_;
}
inline void MobileAdResponse_VAD_Navigation::set_show(const ::std::string& value) {
  set_has_show();
  if (show_ == &::google::protobuf::internal::kEmptyString) {
    show_ = new ::std::string;
  }
  show_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_show(const char* value) {
  set_has_show();
  if (show_ == &::google::protobuf::internal::kEmptyString) {
    show_ = new ::std::string;
  }
  show_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_show(const char* value, size_t size) {
  set_has_show();
  if (show_ == &::google::protobuf::internal::kEmptyString) {
    show_ = new ::std::string;
  }
  show_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_show() {
  set_has_show();
  if (show_ == &::google::protobuf::internal::kEmptyString) {
    show_ = new ::std::string;
  }
  return show_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_show() {
  clear_has_show();
  if (show_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = show_;
    show_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_show(::std::string* show) {
  if (show_ != &::google::protobuf::internal::kEmptyString) {
    delete show_;
  }
  if (show) {
    set_has_show();
    show_ = show;
  } else {
    clear_has_show();
    show_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string topBackgroundUrl = 2;
inline bool MobileAdResponse_VAD_Navigation::has_topbackgroundurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_topbackgroundurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_topbackgroundurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_VAD_Navigation::clear_topbackgroundurl() {
  if (topbackgroundurl_ != &::google::protobuf::internal::kEmptyString) {
    topbackgroundurl_->clear();
  }
  clear_has_topbackgroundurl();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::topbackgroundurl() const {
  return *topbackgroundurl_;
}
inline void MobileAdResponse_VAD_Navigation::set_topbackgroundurl(const ::std::string& value) {
  set_has_topbackgroundurl();
  if (topbackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    topbackgroundurl_ = new ::std::string;
  }
  topbackgroundurl_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_topbackgroundurl(const char* value) {
  set_has_topbackgroundurl();
  if (topbackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    topbackgroundurl_ = new ::std::string;
  }
  topbackgroundurl_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_topbackgroundurl(const char* value, size_t size) {
  set_has_topbackgroundurl();
  if (topbackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    topbackgroundurl_ = new ::std::string;
  }
  topbackgroundurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_topbackgroundurl() {
  set_has_topbackgroundurl();
  if (topbackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    topbackgroundurl_ = new ::std::string;
  }
  return topbackgroundurl_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_topbackgroundurl() {
  clear_has_topbackgroundurl();
  if (topbackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topbackgroundurl_;
    topbackgroundurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_topbackgroundurl(::std::string* topbackgroundurl) {
  if (topbackgroundurl_ != &::google::protobuf::internal::kEmptyString) {
    delete topbackgroundurl_;
  }
  if (topbackgroundurl) {
    set_has_topbackgroundurl();
    topbackgroundurl_ = topbackgroundurl;
  } else {
    clear_has_topbackgroundurl();
    topbackgroundurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string topShow = 3;
inline bool MobileAdResponse_VAD_Navigation::has_topshow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_topshow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_topshow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_VAD_Navigation::clear_topshow() {
  if (topshow_ != &::google::protobuf::internal::kEmptyString) {
    topshow_->clear();
  }
  clear_has_topshow();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::topshow() const {
  return *topshow_;
}
inline void MobileAdResponse_VAD_Navigation::set_topshow(const ::std::string& value) {
  set_has_topshow();
  if (topshow_ == &::google::protobuf::internal::kEmptyString) {
    topshow_ = new ::std::string;
  }
  topshow_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_topshow(const char* value) {
  set_has_topshow();
  if (topshow_ == &::google::protobuf::internal::kEmptyString) {
    topshow_ = new ::std::string;
  }
  topshow_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_topshow(const char* value, size_t size) {
  set_has_topshow();
  if (topshow_ == &::google::protobuf::internal::kEmptyString) {
    topshow_ = new ::std::string;
  }
  topshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_topshow() {
  set_has_topshow();
  if (topshow_ == &::google::protobuf::internal::kEmptyString) {
    topshow_ = new ::std::string;
  }
  return topshow_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_topshow() {
  clear_has_topshow();
  if (topshow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topshow_;
    topshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_topshow(::std::string* topshow) {
  if (topshow_ != &::google::protobuf::internal::kEmptyString) {
    delete topshow_;
  }
  if (topshow) {
    set_has_topshow();
    topshow_ = topshow;
  } else {
    clear_has_topshow();
    topshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string topTitle = 4;
inline bool MobileAdResponse_VAD_Navigation::has_toptitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_toptitle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_toptitle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_VAD_Navigation::clear_toptitle() {
  if (toptitle_ != &::google::protobuf::internal::kEmptyString) {
    toptitle_->clear();
  }
  clear_has_toptitle();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::toptitle() const {
  return *toptitle_;
}
inline void MobileAdResponse_VAD_Navigation::set_toptitle(const ::std::string& value) {
  set_has_toptitle();
  if (toptitle_ == &::google::protobuf::internal::kEmptyString) {
    toptitle_ = new ::std::string;
  }
  toptitle_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_toptitle(const char* value) {
  set_has_toptitle();
  if (toptitle_ == &::google::protobuf::internal::kEmptyString) {
    toptitle_ = new ::std::string;
  }
  toptitle_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_toptitle(const char* value, size_t size) {
  set_has_toptitle();
  if (toptitle_ == &::google::protobuf::internal::kEmptyString) {
    toptitle_ = new ::std::string;
  }
  toptitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_toptitle() {
  set_has_toptitle();
  if (toptitle_ == &::google::protobuf::internal::kEmptyString) {
    toptitle_ = new ::std::string;
  }
  return toptitle_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_toptitle() {
  clear_has_toptitle();
  if (toptitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = toptitle_;
    toptitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_toptitle(::std::string* toptitle) {
  if (toptitle_ != &::google::protobuf::internal::kEmptyString) {
    delete toptitle_;
  }
  if (toptitle) {
    set_has_toptitle();
    toptitle_ = toptitle;
  } else {
    clear_has_toptitle();
    toptitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string topTitleContent = 5;
inline bool MobileAdResponse_VAD_Navigation::has_toptitlecontent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_toptitlecontent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_toptitlecontent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdResponse_VAD_Navigation::clear_toptitlecontent() {
  if (toptitlecontent_ != &::google::protobuf::internal::kEmptyString) {
    toptitlecontent_->clear();
  }
  clear_has_toptitlecontent();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::toptitlecontent() const {
  return *toptitlecontent_;
}
inline void MobileAdResponse_VAD_Navigation::set_toptitlecontent(const ::std::string& value) {
  set_has_toptitlecontent();
  if (toptitlecontent_ == &::google::protobuf::internal::kEmptyString) {
    toptitlecontent_ = new ::std::string;
  }
  toptitlecontent_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_toptitlecontent(const char* value) {
  set_has_toptitlecontent();
  if (toptitlecontent_ == &::google::protobuf::internal::kEmptyString) {
    toptitlecontent_ = new ::std::string;
  }
  toptitlecontent_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_toptitlecontent(const char* value, size_t size) {
  set_has_toptitlecontent();
  if (toptitlecontent_ == &::google::protobuf::internal::kEmptyString) {
    toptitlecontent_ = new ::std::string;
  }
  toptitlecontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_toptitlecontent() {
  set_has_toptitlecontent();
  if (toptitlecontent_ == &::google::protobuf::internal::kEmptyString) {
    toptitlecontent_ = new ::std::string;
  }
  return toptitlecontent_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_toptitlecontent() {
  clear_has_toptitlecontent();
  if (toptitlecontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = toptitlecontent_;
    toptitlecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_toptitlecontent(::std::string* toptitlecontent) {
  if (toptitlecontent_ != &::google::protobuf::internal::kEmptyString) {
    delete toptitlecontent_;
  }
  if (toptitlecontent) {
    set_has_toptitlecontent();
    toptitlecontent_ = toptitlecontent;
  } else {
    clear_has_toptitlecontent();
    toptitlecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomBackgroundUrl = 6;
inline bool MobileAdResponse_VAD_Navigation::has_bottombackgroundurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottombackgroundurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottombackgroundurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottombackgroundurl() {
  if (bottombackgroundurl_ != &::google::protobuf::internal::kEmptyString) {
    bottombackgroundurl_->clear();
  }
  clear_has_bottombackgroundurl();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottombackgroundurl() const {
  return *bottombackgroundurl_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottombackgroundurl(const ::std::string& value) {
  set_has_bottombackgroundurl();
  if (bottombackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    bottombackgroundurl_ = new ::std::string;
  }
  bottombackgroundurl_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottombackgroundurl(const char* value) {
  set_has_bottombackgroundurl();
  if (bottombackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    bottombackgroundurl_ = new ::std::string;
  }
  bottombackgroundurl_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottombackgroundurl(const char* value, size_t size) {
  set_has_bottombackgroundurl();
  if (bottombackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    bottombackgroundurl_ = new ::std::string;
  }
  bottombackgroundurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottombackgroundurl() {
  set_has_bottombackgroundurl();
  if (bottombackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    bottombackgroundurl_ = new ::std::string;
  }
  return bottombackgroundurl_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottombackgroundurl() {
  clear_has_bottombackgroundurl();
  if (bottombackgroundurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottombackgroundurl_;
    bottombackgroundurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottombackgroundurl(::std::string* bottombackgroundurl) {
  if (bottombackgroundurl_ != &::google::protobuf::internal::kEmptyString) {
    delete bottombackgroundurl_;
  }
  if (bottombackgroundurl) {
    set_has_bottombackgroundurl();
    bottombackgroundurl_ = bottombackgroundurl;
  } else {
    clear_has_bottombackgroundurl();
    bottombackgroundurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomShow = 7;
inline bool MobileAdResponse_VAD_Navigation::has_bottomshow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottomshow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottomshow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottomshow() {
  if (bottomshow_ != &::google::protobuf::internal::kEmptyString) {
    bottomshow_->clear();
  }
  clear_has_bottomshow();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottomshow() const {
  return *bottomshow_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottomshow(const ::std::string& value) {
  set_has_bottomshow();
  if (bottomshow_ == &::google::protobuf::internal::kEmptyString) {
    bottomshow_ = new ::std::string;
  }
  bottomshow_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomshow(const char* value) {
  set_has_bottomshow();
  if (bottomshow_ == &::google::protobuf::internal::kEmptyString) {
    bottomshow_ = new ::std::string;
  }
  bottomshow_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomshow(const char* value, size_t size) {
  set_has_bottomshow();
  if (bottomshow_ == &::google::protobuf::internal::kEmptyString) {
    bottomshow_ = new ::std::string;
  }
  bottomshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottomshow() {
  set_has_bottomshow();
  if (bottomshow_ == &::google::protobuf::internal::kEmptyString) {
    bottomshow_ = new ::std::string;
  }
  return bottomshow_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottomshow() {
  clear_has_bottomshow();
  if (bottomshow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottomshow_;
    bottomshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottomshow(::std::string* bottomshow) {
  if (bottomshow_ != &::google::protobuf::internal::kEmptyString) {
    delete bottomshow_;
  }
  if (bottomshow) {
    set_has_bottomshow();
    bottomshow_ = bottomshow;
  } else {
    clear_has_bottomshow();
    bottomshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomBackButton = 8;
inline bool MobileAdResponse_VAD_Navigation::has_bottombackbutton() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottombackbutton() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottombackbutton() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottombackbutton() {
  if (bottombackbutton_ != &::google::protobuf::internal::kEmptyString) {
    bottombackbutton_->clear();
  }
  clear_has_bottombackbutton();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottombackbutton() const {
  return *bottombackbutton_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottombackbutton(const ::std::string& value) {
  set_has_bottombackbutton();
  if (bottombackbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottombackbutton_ = new ::std::string;
  }
  bottombackbutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottombackbutton(const char* value) {
  set_has_bottombackbutton();
  if (bottombackbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottombackbutton_ = new ::std::string;
  }
  bottombackbutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottombackbutton(const char* value, size_t size) {
  set_has_bottombackbutton();
  if (bottombackbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottombackbutton_ = new ::std::string;
  }
  bottombackbutton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottombackbutton() {
  set_has_bottombackbutton();
  if (bottombackbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottombackbutton_ = new ::std::string;
  }
  return bottombackbutton_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottombackbutton() {
  clear_has_bottombackbutton();
  if (bottombackbutton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottombackbutton_;
    bottombackbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottombackbutton(::std::string* bottombackbutton) {
  if (bottombackbutton_ != &::google::protobuf::internal::kEmptyString) {
    delete bottombackbutton_;
  }
  if (bottombackbutton) {
    set_has_bottombackbutton();
    bottombackbutton_ = bottombackbutton;
  } else {
    clear_has_bottombackbutton();
    bottombackbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomForwardButton = 9;
inline bool MobileAdResponse_VAD_Navigation::has_bottomforwardbutton() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottomforwardbutton() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottomforwardbutton() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottomforwardbutton() {
  if (bottomforwardbutton_ != &::google::protobuf::internal::kEmptyString) {
    bottomforwardbutton_->clear();
  }
  clear_has_bottomforwardbutton();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottomforwardbutton() const {
  return *bottomforwardbutton_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottomforwardbutton(const ::std::string& value) {
  set_has_bottomforwardbutton();
  if (bottomforwardbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomforwardbutton_ = new ::std::string;
  }
  bottomforwardbutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomforwardbutton(const char* value) {
  set_has_bottomforwardbutton();
  if (bottomforwardbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomforwardbutton_ = new ::std::string;
  }
  bottomforwardbutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomforwardbutton(const char* value, size_t size) {
  set_has_bottomforwardbutton();
  if (bottomforwardbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomforwardbutton_ = new ::std::string;
  }
  bottomforwardbutton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottomforwardbutton() {
  set_has_bottomforwardbutton();
  if (bottomforwardbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomforwardbutton_ = new ::std::string;
  }
  return bottomforwardbutton_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottomforwardbutton() {
  clear_has_bottomforwardbutton();
  if (bottomforwardbutton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottomforwardbutton_;
    bottomforwardbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottomforwardbutton(::std::string* bottomforwardbutton) {
  if (bottomforwardbutton_ != &::google::protobuf::internal::kEmptyString) {
    delete bottomforwardbutton_;
  }
  if (bottomforwardbutton) {
    set_has_bottomforwardbutton();
    bottomforwardbutton_ = bottomforwardbutton;
  } else {
    clear_has_bottomforwardbutton();
    bottomforwardbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomReloadButton = 10;
inline bool MobileAdResponse_VAD_Navigation::has_bottomreloadbutton() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottomreloadbutton() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottomreloadbutton() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottomreloadbutton() {
  if (bottomreloadbutton_ != &::google::protobuf::internal::kEmptyString) {
    bottomreloadbutton_->clear();
  }
  clear_has_bottomreloadbutton();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottomreloadbutton() const {
  return *bottomreloadbutton_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottomreloadbutton(const ::std::string& value) {
  set_has_bottomreloadbutton();
  if (bottomreloadbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomreloadbutton_ = new ::std::string;
  }
  bottomreloadbutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomreloadbutton(const char* value) {
  set_has_bottomreloadbutton();
  if (bottomreloadbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomreloadbutton_ = new ::std::string;
  }
  bottomreloadbutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomreloadbutton(const char* value, size_t size) {
  set_has_bottomreloadbutton();
  if (bottomreloadbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomreloadbutton_ = new ::std::string;
  }
  bottomreloadbutton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottomreloadbutton() {
  set_has_bottomreloadbutton();
  if (bottomreloadbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomreloadbutton_ = new ::std::string;
  }
  return bottomreloadbutton_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottomreloadbutton() {
  clear_has_bottomreloadbutton();
  if (bottomreloadbutton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottomreloadbutton_;
    bottomreloadbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottomreloadbutton(::std::string* bottomreloadbutton) {
  if (bottomreloadbutton_ != &::google::protobuf::internal::kEmptyString) {
    delete bottomreloadbutton_;
  }
  if (bottomreloadbutton) {
    set_has_bottomreloadbutton();
    bottomreloadbutton_ = bottomreloadbutton;
  } else {
    clear_has_bottomreloadbutton();
    bottomreloadbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomExternalButton = 11;
inline bool MobileAdResponse_VAD_Navigation::has_bottomexternalbutton() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottomexternalbutton() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottomexternalbutton() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottomexternalbutton() {
  if (bottomexternalbutton_ != &::google::protobuf::internal::kEmptyString) {
    bottomexternalbutton_->clear();
  }
  clear_has_bottomexternalbutton();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottomexternalbutton() const {
  return *bottomexternalbutton_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottomexternalbutton(const ::std::string& value) {
  set_has_bottomexternalbutton();
  if (bottomexternalbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomexternalbutton_ = new ::std::string;
  }
  bottomexternalbutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomexternalbutton(const char* value) {
  set_has_bottomexternalbutton();
  if (bottomexternalbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomexternalbutton_ = new ::std::string;
  }
  bottomexternalbutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomexternalbutton(const char* value, size_t size) {
  set_has_bottomexternalbutton();
  if (bottomexternalbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomexternalbutton_ = new ::std::string;
  }
  bottomexternalbutton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottomexternalbutton() {
  set_has_bottomexternalbutton();
  if (bottomexternalbutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomexternalbutton_ = new ::std::string;
  }
  return bottomexternalbutton_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottomexternalbutton() {
  clear_has_bottomexternalbutton();
  if (bottomexternalbutton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottomexternalbutton_;
    bottomexternalbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottomexternalbutton(::std::string* bottomexternalbutton) {
  if (bottomexternalbutton_ != &::google::protobuf::internal::kEmptyString) {
    delete bottomexternalbutton_;
  }
  if (bottomexternalbutton) {
    set_has_bottomexternalbutton();
    bottomexternalbutton_ = bottomexternalbutton;
  } else {
    clear_has_bottomexternalbutton();
    bottomexternalbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomPausebutton = 12;
inline bool MobileAdResponse_VAD_Navigation::has_bottompausebutton() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottompausebutton() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottompausebutton() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottompausebutton() {
  if (bottompausebutton_ != &::google::protobuf::internal::kEmptyString) {
    bottompausebutton_->clear();
  }
  clear_has_bottompausebutton();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottompausebutton() const {
  return *bottompausebutton_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottompausebutton(const ::std::string& value) {
  set_has_bottompausebutton();
  if (bottompausebutton_ == &::google::protobuf::internal::kEmptyString) {
    bottompausebutton_ = new ::std::string;
  }
  bottompausebutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottompausebutton(const char* value) {
  set_has_bottompausebutton();
  if (bottompausebutton_ == &::google::protobuf::internal::kEmptyString) {
    bottompausebutton_ = new ::std::string;
  }
  bottompausebutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottompausebutton(const char* value, size_t size) {
  set_has_bottompausebutton();
  if (bottompausebutton_ == &::google::protobuf::internal::kEmptyString) {
    bottompausebutton_ = new ::std::string;
  }
  bottompausebutton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottompausebutton() {
  set_has_bottompausebutton();
  if (bottompausebutton_ == &::google::protobuf::internal::kEmptyString) {
    bottompausebutton_ = new ::std::string;
  }
  return bottompausebutton_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottompausebutton() {
  clear_has_bottompausebutton();
  if (bottompausebutton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottompausebutton_;
    bottompausebutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottompausebutton(::std::string* bottompausebutton) {
  if (bottompausebutton_ != &::google::protobuf::internal::kEmptyString) {
    delete bottompausebutton_;
  }
  if (bottompausebutton) {
    set_has_bottompausebutton();
    bottompausebutton_ = bottompausebutton;
  } else {
    clear_has_bottompausebutton();
    bottompausebutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomReplaybutton = 13;
inline bool MobileAdResponse_VAD_Navigation::has_bottomreplaybutton() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottomreplaybutton() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottomreplaybutton() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottomreplaybutton() {
  if (bottomreplaybutton_ != &::google::protobuf::internal::kEmptyString) {
    bottomreplaybutton_->clear();
  }
  clear_has_bottomreplaybutton();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottomreplaybutton() const {
  return *bottomreplaybutton_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottomreplaybutton(const ::std::string& value) {
  set_has_bottomreplaybutton();
  if (bottomreplaybutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomreplaybutton_ = new ::std::string;
  }
  bottomreplaybutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomreplaybutton(const char* value) {
  set_has_bottomreplaybutton();
  if (bottomreplaybutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomreplaybutton_ = new ::std::string;
  }
  bottomreplaybutton_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomreplaybutton(const char* value, size_t size) {
  set_has_bottomreplaybutton();
  if (bottomreplaybutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomreplaybutton_ = new ::std::string;
  }
  bottomreplaybutton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottomreplaybutton() {
  set_has_bottomreplaybutton();
  if (bottomreplaybutton_ == &::google::protobuf::internal::kEmptyString) {
    bottomreplaybutton_ = new ::std::string;
  }
  return bottomreplaybutton_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottomreplaybutton() {
  clear_has_bottomreplaybutton();
  if (bottomreplaybutton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottomreplaybutton_;
    bottomreplaybutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottomreplaybutton(::std::string* bottomreplaybutton) {
  if (bottomreplaybutton_ != &::google::protobuf::internal::kEmptyString) {
    delete bottomreplaybutton_;
  }
  if (bottomreplaybutton) {
    set_has_bottomreplaybutton();
    bottomreplaybutton_ = bottomreplaybutton;
  } else {
    clear_has_bottomreplaybutton();
    bottomreplaybutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bottomTimer = 14;
inline bool MobileAdResponse_VAD_Navigation::has_bottomtimer() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_bottomtimer() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_bottomtimer() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MobileAdResponse_VAD_Navigation::clear_bottomtimer() {
  if (bottomtimer_ != &::google::protobuf::internal::kEmptyString) {
    bottomtimer_->clear();
  }
  clear_has_bottomtimer();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::bottomtimer() const {
  return *bottomtimer_;
}
inline void MobileAdResponse_VAD_Navigation::set_bottomtimer(const ::std::string& value) {
  set_has_bottomtimer();
  if (bottomtimer_ == &::google::protobuf::internal::kEmptyString) {
    bottomtimer_ = new ::std::string;
  }
  bottomtimer_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomtimer(const char* value) {
  set_has_bottomtimer();
  if (bottomtimer_ == &::google::protobuf::internal::kEmptyString) {
    bottomtimer_ = new ::std::string;
  }
  bottomtimer_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_bottomtimer(const char* value, size_t size) {
  set_has_bottomtimer();
  if (bottomtimer_ == &::google::protobuf::internal::kEmptyString) {
    bottomtimer_ = new ::std::string;
  }
  bottomtimer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_bottomtimer() {
  set_has_bottomtimer();
  if (bottomtimer_ == &::google::protobuf::internal::kEmptyString) {
    bottomtimer_ = new ::std::string;
  }
  return bottomtimer_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_bottomtimer() {
  clear_has_bottomtimer();
  if (bottomtimer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bottomtimer_;
    bottomtimer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_bottomtimer(::std::string* bottomtimer) {
  if (bottomtimer_ != &::google::protobuf::internal::kEmptyString) {
    delete bottomtimer_;
  }
  if (bottomtimer) {
    set_has_bottomtimer();
    bottomtimer_ = bottomtimer;
  } else {
    clear_has_bottomtimer();
    bottomtimer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string allowtap = 15;
inline bool MobileAdResponse_VAD_Navigation::has_allowtap() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileAdResponse_VAD_Navigation::set_has_allowtap() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileAdResponse_VAD_Navigation::clear_has_allowtap() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileAdResponse_VAD_Navigation::clear_allowtap() {
  if (allowtap_ != &::google::protobuf::internal::kEmptyString) {
    allowtap_->clear();
  }
  clear_has_allowtap();
}
inline const ::std::string& MobileAdResponse_VAD_Navigation::allowtap() const {
  return *allowtap_;
}
inline void MobileAdResponse_VAD_Navigation::set_allowtap(const ::std::string& value) {
  set_has_allowtap();
  if (allowtap_ == &::google::protobuf::internal::kEmptyString) {
    allowtap_ = new ::std::string;
  }
  allowtap_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_allowtap(const char* value) {
  set_has_allowtap();
  if (allowtap_ == &::google::protobuf::internal::kEmptyString) {
    allowtap_ = new ::std::string;
  }
  allowtap_->assign(value);
}
inline void MobileAdResponse_VAD_Navigation::set_allowtap(const char* value, size_t size) {
  set_has_allowtap();
  if (allowtap_ == &::google::protobuf::internal::kEmptyString) {
    allowtap_ = new ::std::string;
  }
  allowtap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Navigation::mutable_allowtap() {
  set_has_allowtap();
  if (allowtap_ == &::google::protobuf::internal::kEmptyString) {
    allowtap_ = new ::std::string;
  }
  return allowtap_;
}
inline ::std::string* MobileAdResponse_VAD_Navigation::release_allowtap() {
  clear_has_allowtap();
  if (allowtap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = allowtap_;
    allowtap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Navigation::set_allocated_allowtap(::std::string* allowtap) {
  if (allowtap_ != &::google::protobuf::internal::kEmptyString) {
    delete allowtap_;
  }
  if (allowtap) {
    set_has_allowtap();
    allowtap_ = allowtap;
  } else {
    clear_has_allowtap();
    allowtap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_VAD_Interstitial

// optional string preload = 1;
inline bool MobileAdResponse_VAD_Interstitial::has_preload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_preload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_preload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_preload() {
  if (preload_ != &::google::protobuf::internal::kEmptyString) {
    preload_->clear();
  }
  clear_has_preload();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::preload() const {
  return *preload_;
}
inline void MobileAdResponse_VAD_Interstitial::set_preload(const ::std::string& value) {
  set_has_preload();
  if (preload_ == &::google::protobuf::internal::kEmptyString) {
    preload_ = new ::std::string;
  }
  preload_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_preload(const char* value) {
  set_has_preload();
  if (preload_ == &::google::protobuf::internal::kEmptyString) {
    preload_ = new ::std::string;
  }
  preload_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_preload(const char* value, size_t size) {
  set_has_preload();
  if (preload_ == &::google::protobuf::internal::kEmptyString) {
    preload_ = new ::std::string;
  }
  preload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_preload() {
  set_has_preload();
  if (preload_ == &::google::protobuf::internal::kEmptyString) {
    preload_ = new ::std::string;
  }
  return preload_;
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::release_preload() {
  clear_has_preload();
  if (preload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preload_;
    preload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_preload(::std::string* preload) {
  if (preload_ != &::google::protobuf::internal::kEmptyString) {
    delete preload_;
  }
  if (preload) {
    set_has_preload();
    preload_ = preload;
  } else {
    clear_has_preload();
    preload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string autoClose = 2;
inline bool MobileAdResponse_VAD_Interstitial::has_autoclose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_autoclose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_autoclose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_autoclose() {
  if (autoclose_ != &::google::protobuf::internal::kEmptyString) {
    autoclose_->clear();
  }
  clear_has_autoclose();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::autoclose() const {
  return *autoclose_;
}
inline void MobileAdResponse_VAD_Interstitial::set_autoclose(const ::std::string& value) {
  set_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    autoclose_ = new ::std::string;
  }
  autoclose_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_autoclose(const char* value) {
  set_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    autoclose_ = new ::std::string;
  }
  autoclose_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_autoclose(const char* value, size_t size) {
  set_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    autoclose_ = new ::std::string;
  }
  autoclose_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_autoclose() {
  set_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    autoclose_ = new ::std::string;
  }
  return autoclose_;
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::release_autoclose() {
  clear_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = autoclose_;
    autoclose_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_autoclose(::std::string* autoclose) {
  if (autoclose_ != &::google::protobuf::internal::kEmptyString) {
    delete autoclose_;
  }
  if (autoclose) {
    set_has_autoclose();
    autoclose_ = autoclose;
  } else {
    clear_has_autoclose();
    autoclose_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.Orientation orientation = 3;
inline bool MobileAdResponse_VAD_Interstitial::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation MobileAdResponse_VAD_Interstitial::orientation() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation >(orientation_);
}
inline void MobileAdResponse_VAD_Interstitial::set_orientation(::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// optional string htmlMarkup = 4;
inline bool MobileAdResponse_VAD_Interstitial::has_htmlmarkup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_htmlmarkup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_htmlmarkup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_htmlmarkup() {
  if (htmlmarkup_ != &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_->clear();
  }
  clear_has_htmlmarkup();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::htmlmarkup() const {
  return *htmlmarkup_;
}
inline void MobileAdResponse_VAD_Interstitial::set_htmlmarkup(const ::std::string& value) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_htmlmarkup(const char* value) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_htmlmarkup(const char* value, size_t size) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_htmlmarkup() {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  return htmlmarkup_;
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::release_htmlmarkup() {
  clear_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = htmlmarkup_;
    htmlmarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_htmlmarkup(::std::string* htmlmarkup) {
  if (htmlmarkup_ != &::google::protobuf::internal::kEmptyString) {
    delete htmlmarkup_;
  }
  if (htmlmarkup) {
    set_has_htmlmarkup();
    htmlmarkup_ = htmlmarkup;
  } else {
    clear_has_htmlmarkup();
    htmlmarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imageUrl = 5;
inline bool MobileAdResponse_VAD_Interstitial::has_imageurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_imageurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_imageurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_imageurl() {
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    imageurl_->clear();
  }
  clear_has_imageurl();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::imageurl() const {
  return *imageurl_;
}
inline void MobileAdResponse_VAD_Interstitial::set_imageurl(const ::std::string& value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_imageurl(const char* value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_imageurl(const char* value, size_t size) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_imageurl() {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  return imageurl_;
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::release_imageurl() {
  clear_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageurl_;
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_imageurl(::std::string* imageurl) {
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imageurl_;
  }
  if (imageurl) {
    set_has_imageurl();
    imageurl_ = imageurl;
  } else {
    clear_has_imageurl();
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string clickUrl = 6;
inline bool MobileAdResponse_VAD_Interstitial::has_clickurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_clickurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_clickurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_clickurl() {
  if (clickurl_ != &::google::protobuf::internal::kEmptyString) {
    clickurl_->clear();
  }
  clear_has_clickurl();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::clickurl() const {
  return *clickurl_;
}
inline void MobileAdResponse_VAD_Interstitial::set_clickurl(const ::std::string& value) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_clickurl(const char* value) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_clickurl(const char* value, size_t size) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_clickurl() {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  return clickurl_;
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::release_clickurl() {
  clear_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clickurl_;
    clickurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_clickurl(::std::string* clickurl) {
  if (clickurl_ != &::google::protobuf::internal::kEmptyString) {
    delete clickurl_;
  }
  if (clickurl) {
    set_has_clickurl();
    clickurl_ = clickurl;
  } else {
    clear_has_clickurl();
    clickurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adLink = 7;
inline bool MobileAdResponse_VAD_Interstitial::has_adlink() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_adlink() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_adlink() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_adlink() {
  if (adlink_ != &::google::protobuf::internal::kEmptyString) {
    adlink_->clear();
  }
  clear_has_adlink();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::adlink() const {
  return *adlink_;
}
inline void MobileAdResponse_VAD_Interstitial::set_adlink(const ::std::string& value) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_adlink(const char* value) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_adlink(const char* value, size_t size) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_adlink() {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  return adlink_;
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::release_adlink() {
  clear_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adlink_;
    adlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_adlink(::std::string* adlink) {
  if (adlink_ != &::google::protobuf::internal::kEmptyString) {
    delete adlink_;
  }
  if (adlink) {
    set_has_adlink();
    adlink_ = adlink;
  } else {
    clear_has_adlink();
    adlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string skipButtonShow = 8;
inline bool MobileAdResponse_VAD_Interstitial::has_skipbuttonshow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_skipbuttonshow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_skipbuttonshow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_skipbuttonshow() {
  if (skipbuttonshow_ != &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_->clear();
  }
  clear_has_skipbuttonshow();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::skipbuttonshow() const {
  return *skipbuttonshow_;
}
inline void MobileAdResponse_VAD_Interstitial::set_skipbuttonshow(const ::std::string& value) {
  set_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_ = new ::std::string;
  }
  skipbuttonshow_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_skipbuttonshow(const char* value) {
  set_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_ = new ::std::string;
  }
  skipbuttonshow_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_skipbuttonshow(const char* value, size_t size) {
  set_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_ = new ::std::string;
  }
  skipbuttonshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_skipbuttonshow() {
  set_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_ = new ::std::string;
  }
  return skipbuttonshow_;
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::release_skipbuttonshow() {
  clear_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skipbuttonshow_;
    skipbuttonshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_skipbuttonshow(::std::string* skipbuttonshow) {
  if (skipbuttonshow_ != &::google::protobuf::internal::kEmptyString) {
    delete skipbuttonshow_;
  }
  if (skipbuttonshow) {
    set_has_skipbuttonshow();
    skipbuttonshow_ = skipbuttonshow;
  } else {
    clear_has_skipbuttonshow();
    skipbuttonshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string skipBUttonShowAfter = 9;
inline bool MobileAdResponse_VAD_Interstitial::has_skipbuttonshowafter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_skipbuttonshowafter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_skipbuttonshowafter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_skipbuttonshowafter() {
  if (skipbuttonshowafter_ != &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_->clear();
  }
  clear_has_skipbuttonshowafter();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::skipbuttonshowafter() const {
  return *skipbuttonshowafter_;
}
inline void MobileAdResponse_VAD_Interstitial::set_skipbuttonshowafter(const ::std::string& value) {
  set_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_ = new ::std::string;
  }
  skipbuttonshowafter_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_skipbuttonshowafter(const char* value) {
  set_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_ = new ::std::string;
  }
  skipbuttonshowafter_->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_skipbuttonshowafter(const char* value, size_t size) {
  set_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_ = new ::std::string;
  }
  skipbuttonshowafter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_skipbuttonshowafter() {
  set_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_ = new ::std::string;
  }
  return skipbuttonshowafter_;
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::release_skipbuttonshowafter() {
  clear_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skipbuttonshowafter_;
    skipbuttonshowafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_skipbuttonshowafter(::std::string* skipbuttonshowafter) {
  if (skipbuttonshowafter_ != &::google::protobuf::internal::kEmptyString) {
    delete skipbuttonshowafter_;
  }
  if (skipbuttonshowafter) {
    set_has_skipbuttonshowafter();
    skipbuttonshowafter_ = skipbuttonshowafter;
  } else {
    clear_has_skipbuttonshowafter();
    skipbuttonshowafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.Navigation navigation = 10;
inline bool MobileAdResponse_VAD_Interstitial::has_navigation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdResponse_VAD_Interstitial::set_has_navigation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_has_navigation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdResponse_VAD_Interstitial::clear_navigation() {
  if (navigation_ != NULL) navigation_->::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation::Clear();
  clear_has_navigation();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation& MobileAdResponse_VAD_Interstitial::navigation() const {
  return navigation_ != NULL ? *navigation_ : *default_instance_->navigation_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* MobileAdResponse_VAD_Interstitial::mutable_navigation() {
  set_has_navigation();
  if (navigation_ == NULL) navigation_ = new ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation;
  return navigation_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* MobileAdResponse_VAD_Interstitial::release_navigation() {
  clear_has_navigation();
  ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* temp = navigation_;
  navigation_ = NULL;
  return temp;
}
inline void MobileAdResponse_VAD_Interstitial::set_allocated_navigation(::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* navigation) {
  delete navigation_;
  navigation_ = navigation;
  if (navigation) {
    set_has_navigation();
  } else {
    clear_has_navigation();
  }
}

// repeated string impressionUrl = 11;
inline int MobileAdResponse_VAD_Interstitial::impressionurl_size() const {
  return impressionurl_.size();
}
inline void MobileAdResponse_VAD_Interstitial::clear_impressionurl() {
  impressionurl_.Clear();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::impressionurl(int index) const {
  return impressionurl_.Get(index);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_impressionurl(int index) {
  return impressionurl_.Mutable(index);
}
inline void MobileAdResponse_VAD_Interstitial::set_impressionurl(int index, const ::std::string& value) {
  impressionurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_impressionurl(int index, const char* value) {
  impressionurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_impressionurl(int index, const char* value, size_t size) {
  impressionurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::add_impressionurl() {
  return impressionurl_.Add();
}
inline void MobileAdResponse_VAD_Interstitial::add_impressionurl(const ::std::string& value) {
  impressionurl_.Add()->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::add_impressionurl(const char* value) {
  impressionurl_.Add()->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::add_impressionurl(const char* value, size_t size) {
  impressionurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdResponse_VAD_Interstitial::impressionurl() const {
  return impressionurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdResponse_VAD_Interstitial::mutable_impressionurl() {
  return &impressionurl_;
}

// repeated string clickTrackingUrl = 12;
inline int MobileAdResponse_VAD_Interstitial::clicktrackingurl_size() const {
  return clicktrackingurl_.size();
}
inline void MobileAdResponse_VAD_Interstitial::clear_clicktrackingurl() {
  clicktrackingurl_.Clear();
}
inline const ::std::string& MobileAdResponse_VAD_Interstitial::clicktrackingurl(int index) const {
  return clicktrackingurl_.Get(index);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::mutable_clicktrackingurl(int index) {
  return clicktrackingurl_.Mutable(index);
}
inline void MobileAdResponse_VAD_Interstitial::set_clicktrackingurl(int index, const ::std::string& value) {
  clicktrackingurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_clicktrackingurl(int index, const char* value) {
  clicktrackingurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::set_clicktrackingurl(int index, const char* value, size_t size) {
  clicktrackingurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Interstitial::add_clicktrackingurl() {
  return clicktrackingurl_.Add();
}
inline void MobileAdResponse_VAD_Interstitial::add_clicktrackingurl(const ::std::string& value) {
  clicktrackingurl_.Add()->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::add_clicktrackingurl(const char* value) {
  clicktrackingurl_.Add()->assign(value);
}
inline void MobileAdResponse_VAD_Interstitial::add_clicktrackingurl(const char* value, size_t size) {
  clicktrackingurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdResponse_VAD_Interstitial::clicktrackingurl() const {
  return clicktrackingurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdResponse_VAD_Interstitial::mutable_clicktrackingurl() {
  return &clicktrackingurl_;
}

// -------------------------------------------------------------------

// MobileAdResponse_VAD_Video_VideoTrackingEvents

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.Video.VideoTrackingEvents.TrackingType trackingType = 1;
inline bool MobileAdResponse_VAD_Video_VideoTrackingEvents::has_trackingtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_has_trackingtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::clear_has_trackingtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::clear_trackingtype() {
  trackingtype_ = 0;
  clear_has_trackingtype();
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType MobileAdResponse_VAD_Video_VideoTrackingEvents::trackingtype() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType >(trackingtype_);
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_trackingtype(::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_IsValid(value));
  set_has_trackingtype();
  trackingtype_ = value;
}

// optional string secondValue = 2;
inline bool MobileAdResponse_VAD_Video_VideoTrackingEvents::has_secondvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_has_secondvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::clear_has_secondvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::clear_secondvalue() {
  if (secondvalue_ != &::google::protobuf::internal::kEmptyString) {
    secondvalue_->clear();
  }
  clear_has_secondvalue();
}
inline const ::std::string& MobileAdResponse_VAD_Video_VideoTrackingEvents::secondvalue() const {
  return *secondvalue_;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_secondvalue(const ::std::string& value) {
  set_has_secondvalue();
  if (secondvalue_ == &::google::protobuf::internal::kEmptyString) {
    secondvalue_ = new ::std::string;
  }
  secondvalue_->assign(value);
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_secondvalue(const char* value) {
  set_has_secondvalue();
  if (secondvalue_ == &::google::protobuf::internal::kEmptyString) {
    secondvalue_ = new ::std::string;
  }
  secondvalue_->assign(value);
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_secondvalue(const char* value, size_t size) {
  set_has_secondvalue();
  if (secondvalue_ == &::google::protobuf::internal::kEmptyString) {
    secondvalue_ = new ::std::string;
  }
  secondvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video_VideoTrackingEvents::mutable_secondvalue() {
  set_has_secondvalue();
  if (secondvalue_ == &::google::protobuf::internal::kEmptyString) {
    secondvalue_ = new ::std::string;
  }
  return secondvalue_;
}
inline ::std::string* MobileAdResponse_VAD_Video_VideoTrackingEvents::release_secondvalue() {
  clear_has_secondvalue();
  if (secondvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secondvalue_;
    secondvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_allocated_secondvalue(::std::string* secondvalue) {
  if (secondvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete secondvalue_;
  }
  if (secondvalue) {
    set_has_secondvalue();
    secondvalue_ = secondvalue;
  } else {
    clear_has_secondvalue();
    secondvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string trackingUrl = 3;
inline bool MobileAdResponse_VAD_Video_VideoTrackingEvents::has_trackingurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_has_trackingurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::clear_has_trackingurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::clear_trackingurl() {
  if (trackingurl_ != &::google::protobuf::internal::kEmptyString) {
    trackingurl_->clear();
  }
  clear_has_trackingurl();
}
inline const ::std::string& MobileAdResponse_VAD_Video_VideoTrackingEvents::trackingurl() const {
  return *trackingurl_;
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_trackingurl(const ::std::string& value) {
  set_has_trackingurl();
  if (trackingurl_ == &::google::protobuf::internal::kEmptyString) {
    trackingurl_ = new ::std::string;
  }
  trackingurl_->assign(value);
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_trackingurl(const char* value) {
  set_has_trackingurl();
  if (trackingurl_ == &::google::protobuf::internal::kEmptyString) {
    trackingurl_ = new ::std::string;
  }
  trackingurl_->assign(value);
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_trackingurl(const char* value, size_t size) {
  set_has_trackingurl();
  if (trackingurl_ == &::google::protobuf::internal::kEmptyString) {
    trackingurl_ = new ::std::string;
  }
  trackingurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video_VideoTrackingEvents::mutable_trackingurl() {
  set_has_trackingurl();
  if (trackingurl_ == &::google::protobuf::internal::kEmptyString) {
    trackingurl_ = new ::std::string;
  }
  return trackingurl_;
}
inline ::std::string* MobileAdResponse_VAD_Video_VideoTrackingEvents::release_trackingurl() {
  clear_has_trackingurl();
  if (trackingurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackingurl_;
    trackingurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video_VideoTrackingEvents::set_allocated_trackingurl(::std::string* trackingurl) {
  if (trackingurl_ != &::google::protobuf::internal::kEmptyString) {
    delete trackingurl_;
  }
  if (trackingurl) {
    set_has_trackingurl();
    trackingurl_ = trackingurl;
  } else {
    clear_has_trackingurl();
    trackingurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_VAD_Video

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.Orientation orientation = 1;
inline bool MobileAdResponse_VAD_Video::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_VAD_Video::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_VAD_Video::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation MobileAdResponse_VAD_Video::orientation() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation >(orientation_);
}
inline void MobileAdResponse_VAD_Video::set_orientation(::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// optional string expiration = 2;
inline bool MobileAdResponse_VAD_Video::has_expiration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_expiration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_VAD_Video::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_VAD_Video::clear_expiration() {
  if (expiration_ != &::google::protobuf::internal::kEmptyString) {
    expiration_->clear();
  }
  clear_has_expiration();
}
inline const ::std::string& MobileAdResponse_VAD_Video::expiration() const {
  return *expiration_;
}
inline void MobileAdResponse_VAD_Video::set_expiration(const ::std::string& value) {
  set_has_expiration();
  if (expiration_ == &::google::protobuf::internal::kEmptyString) {
    expiration_ = new ::std::string;
  }
  expiration_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_expiration(const char* value) {
  set_has_expiration();
  if (expiration_ == &::google::protobuf::internal::kEmptyString) {
    expiration_ = new ::std::string;
  }
  expiration_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_expiration(const char* value, size_t size) {
  set_has_expiration();
  if (expiration_ == &::google::protobuf::internal::kEmptyString) {
    expiration_ = new ::std::string;
  }
  expiration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_expiration() {
  set_has_expiration();
  if (expiration_ == &::google::protobuf::internal::kEmptyString) {
    expiration_ = new ::std::string;
  }
  return expiration_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_expiration() {
  clear_has_expiration();
  if (expiration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expiration_;
    expiration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_expiration(::std::string* expiration) {
  if (expiration_ != &::google::protobuf::internal::kEmptyString) {
    delete expiration_;
  }
  if (expiration) {
    set_has_expiration();
    expiration_ = expiration;
  } else {
    clear_has_expiration();
    expiration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeDisplay = 3;
inline bool MobileAdResponse_VAD_Video::has_creativedisplay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_creativedisplay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_VAD_Video::clear_has_creativedisplay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_VAD_Video::clear_creativedisplay() {
  if (creativedisplay_ != &::google::protobuf::internal::kEmptyString) {
    creativedisplay_->clear();
  }
  clear_has_creativedisplay();
}
inline const ::std::string& MobileAdResponse_VAD_Video::creativedisplay() const {
  return *creativedisplay_;
}
inline void MobileAdResponse_VAD_Video::set_creativedisplay(const ::std::string& value) {
  set_has_creativedisplay();
  if (creativedisplay_ == &::google::protobuf::internal::kEmptyString) {
    creativedisplay_ = new ::std::string;
  }
  creativedisplay_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativedisplay(const char* value) {
  set_has_creativedisplay();
  if (creativedisplay_ == &::google::protobuf::internal::kEmptyString) {
    creativedisplay_ = new ::std::string;
  }
  creativedisplay_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativedisplay(const char* value, size_t size) {
  set_has_creativedisplay();
  if (creativedisplay_ == &::google::protobuf::internal::kEmptyString) {
    creativedisplay_ = new ::std::string;
  }
  creativedisplay_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_creativedisplay() {
  set_has_creativedisplay();
  if (creativedisplay_ == &::google::protobuf::internal::kEmptyString) {
    creativedisplay_ = new ::std::string;
  }
  return creativedisplay_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_creativedisplay() {
  clear_has_creativedisplay();
  if (creativedisplay_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativedisplay_;
    creativedisplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_creativedisplay(::std::string* creativedisplay) {
  if (creativedisplay_ != &::google::protobuf::internal::kEmptyString) {
    delete creativedisplay_;
  }
  if (creativedisplay) {
    set_has_creativedisplay();
    creativedisplay_ = creativedisplay;
  } else {
    clear_has_creativedisplay();
    creativedisplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeDelivery = 4;
inline bool MobileAdResponse_VAD_Video::has_creativedelivery() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_creativedelivery() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_VAD_Video::clear_has_creativedelivery() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_VAD_Video::clear_creativedelivery() {
  if (creativedelivery_ != &::google::protobuf::internal::kEmptyString) {
    creativedelivery_->clear();
  }
  clear_has_creativedelivery();
}
inline const ::std::string& MobileAdResponse_VAD_Video::creativedelivery() const {
  return *creativedelivery_;
}
inline void MobileAdResponse_VAD_Video::set_creativedelivery(const ::std::string& value) {
  set_has_creativedelivery();
  if (creativedelivery_ == &::google::protobuf::internal::kEmptyString) {
    creativedelivery_ = new ::std::string;
  }
  creativedelivery_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativedelivery(const char* value) {
  set_has_creativedelivery();
  if (creativedelivery_ == &::google::protobuf::internal::kEmptyString) {
    creativedelivery_ = new ::std::string;
  }
  creativedelivery_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativedelivery(const char* value, size_t size) {
  set_has_creativedelivery();
  if (creativedelivery_ == &::google::protobuf::internal::kEmptyString) {
    creativedelivery_ = new ::std::string;
  }
  creativedelivery_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_creativedelivery() {
  set_has_creativedelivery();
  if (creativedelivery_ == &::google::protobuf::internal::kEmptyString) {
    creativedelivery_ = new ::std::string;
  }
  return creativedelivery_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_creativedelivery() {
  clear_has_creativedelivery();
  if (creativedelivery_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativedelivery_;
    creativedelivery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_creativedelivery(::std::string* creativedelivery) {
  if (creativedelivery_ != &::google::protobuf::internal::kEmptyString) {
    delete creativedelivery_;
  }
  if (creativedelivery) {
    set_has_creativedelivery();
    creativedelivery_ = creativedelivery;
  } else {
    clear_has_creativedelivery();
    creativedelivery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeType = 5;
inline bool MobileAdResponse_VAD_Video::has_creativetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_creativetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdResponse_VAD_Video::clear_has_creativetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdResponse_VAD_Video::clear_creativetype() {
  if (creativetype_ != &::google::protobuf::internal::kEmptyString) {
    creativetype_->clear();
  }
  clear_has_creativetype();
}
inline const ::std::string& MobileAdResponse_VAD_Video::creativetype() const {
  return *creativetype_;
}
inline void MobileAdResponse_VAD_Video::set_creativetype(const ::std::string& value) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativetype(const char* value) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativetype(const char* value, size_t size) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_creativetype() {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  return creativetype_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_creativetype() {
  clear_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativetype_;
    creativetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_creativetype(::std::string* creativetype) {
  if (creativetype_ != &::google::protobuf::internal::kEmptyString) {
    delete creativetype_;
  }
  if (creativetype) {
    set_has_creativetype();
    creativetype_ = creativetype;
  } else {
    clear_has_creativetype();
    creativetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeBitrate = 6;
inline bool MobileAdResponse_VAD_Video::has_creativebitrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_creativebitrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdResponse_VAD_Video::clear_has_creativebitrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdResponse_VAD_Video::clear_creativebitrate() {
  if (creativebitrate_ != &::google::protobuf::internal::kEmptyString) {
    creativebitrate_->clear();
  }
  clear_has_creativebitrate();
}
inline const ::std::string& MobileAdResponse_VAD_Video::creativebitrate() const {
  return *creativebitrate_;
}
inline void MobileAdResponse_VAD_Video::set_creativebitrate(const ::std::string& value) {
  set_has_creativebitrate();
  if (creativebitrate_ == &::google::protobuf::internal::kEmptyString) {
    creativebitrate_ = new ::std::string;
  }
  creativebitrate_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativebitrate(const char* value) {
  set_has_creativebitrate();
  if (creativebitrate_ == &::google::protobuf::internal::kEmptyString) {
    creativebitrate_ = new ::std::string;
  }
  creativebitrate_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativebitrate(const char* value, size_t size) {
  set_has_creativebitrate();
  if (creativebitrate_ == &::google::protobuf::internal::kEmptyString) {
    creativebitrate_ = new ::std::string;
  }
  creativebitrate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_creativebitrate() {
  set_has_creativebitrate();
  if (creativebitrate_ == &::google::protobuf::internal::kEmptyString) {
    creativebitrate_ = new ::std::string;
  }
  return creativebitrate_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_creativebitrate() {
  clear_has_creativebitrate();
  if (creativebitrate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativebitrate_;
    creativebitrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_creativebitrate(::std::string* creativebitrate) {
  if (creativebitrate_ != &::google::protobuf::internal::kEmptyString) {
    delete creativebitrate_;
  }
  if (creativebitrate) {
    set_has_creativebitrate();
    creativebitrate_ = creativebitrate;
  } else {
    clear_has_creativebitrate();
    creativebitrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeWidth = 7;
inline bool MobileAdResponse_VAD_Video::has_creativewidth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_creativewidth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdResponse_VAD_Video::clear_has_creativewidth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdResponse_VAD_Video::clear_creativewidth() {
  if (creativewidth_ != &::google::protobuf::internal::kEmptyString) {
    creativewidth_->clear();
  }
  clear_has_creativewidth();
}
inline const ::std::string& MobileAdResponse_VAD_Video::creativewidth() const {
  return *creativewidth_;
}
inline void MobileAdResponse_VAD_Video::set_creativewidth(const ::std::string& value) {
  set_has_creativewidth();
  if (creativewidth_ == &::google::protobuf::internal::kEmptyString) {
    creativewidth_ = new ::std::string;
  }
  creativewidth_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativewidth(const char* value) {
  set_has_creativewidth();
  if (creativewidth_ == &::google::protobuf::internal::kEmptyString) {
    creativewidth_ = new ::std::string;
  }
  creativewidth_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativewidth(const char* value, size_t size) {
  set_has_creativewidth();
  if (creativewidth_ == &::google::protobuf::internal::kEmptyString) {
    creativewidth_ = new ::std::string;
  }
  creativewidth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_creativewidth() {
  set_has_creativewidth();
  if (creativewidth_ == &::google::protobuf::internal::kEmptyString) {
    creativewidth_ = new ::std::string;
  }
  return creativewidth_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_creativewidth() {
  clear_has_creativewidth();
  if (creativewidth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativewidth_;
    creativewidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_creativewidth(::std::string* creativewidth) {
  if (creativewidth_ != &::google::protobuf::internal::kEmptyString) {
    delete creativewidth_;
  }
  if (creativewidth) {
    set_has_creativewidth();
    creativewidth_ = creativewidth;
  } else {
    clear_has_creativewidth();
    creativewidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeHeight = 8;
inline bool MobileAdResponse_VAD_Video::has_creativeheight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_creativeheight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdResponse_VAD_Video::clear_has_creativeheight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdResponse_VAD_Video::clear_creativeheight() {
  if (creativeheight_ != &::google::protobuf::internal::kEmptyString) {
    creativeheight_->clear();
  }
  clear_has_creativeheight();
}
inline const ::std::string& MobileAdResponse_VAD_Video::creativeheight() const {
  return *creativeheight_;
}
inline void MobileAdResponse_VAD_Video::set_creativeheight(const ::std::string& value) {
  set_has_creativeheight();
  if (creativeheight_ == &::google::protobuf::internal::kEmptyString) {
    creativeheight_ = new ::std::string;
  }
  creativeheight_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativeheight(const char* value) {
  set_has_creativeheight();
  if (creativeheight_ == &::google::protobuf::internal::kEmptyString) {
    creativeheight_ = new ::std::string;
  }
  creativeheight_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativeheight(const char* value, size_t size) {
  set_has_creativeheight();
  if (creativeheight_ == &::google::protobuf::internal::kEmptyString) {
    creativeheight_ = new ::std::string;
  }
  creativeheight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_creativeheight() {
  set_has_creativeheight();
  if (creativeheight_ == &::google::protobuf::internal::kEmptyString) {
    creativeheight_ = new ::std::string;
  }
  return creativeheight_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_creativeheight() {
  clear_has_creativeheight();
  if (creativeheight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativeheight_;
    creativeheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_creativeheight(::std::string* creativeheight) {
  if (creativeheight_ != &::google::protobuf::internal::kEmptyString) {
    delete creativeheight_;
  }
  if (creativeheight) {
    set_has_creativeheight();
    creativeheight_ = creativeheight;
  } else {
    clear_has_creativeheight();
    creativeheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeVideoUrl = 9;
inline bool MobileAdResponse_VAD_Video::has_creativevideourl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_creativevideourl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdResponse_VAD_Video::clear_has_creativevideourl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdResponse_VAD_Video::clear_creativevideourl() {
  if (creativevideourl_ != &::google::protobuf::internal::kEmptyString) {
    creativevideourl_->clear();
  }
  clear_has_creativevideourl();
}
inline const ::std::string& MobileAdResponse_VAD_Video::creativevideourl() const {
  return *creativevideourl_;
}
inline void MobileAdResponse_VAD_Video::set_creativevideourl(const ::std::string& value) {
  set_has_creativevideourl();
  if (creativevideourl_ == &::google::protobuf::internal::kEmptyString) {
    creativevideourl_ = new ::std::string;
  }
  creativevideourl_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativevideourl(const char* value) {
  set_has_creativevideourl();
  if (creativevideourl_ == &::google::protobuf::internal::kEmptyString) {
    creativevideourl_ = new ::std::string;
  }
  creativevideourl_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_creativevideourl(const char* value, size_t size) {
  set_has_creativevideourl();
  if (creativevideourl_ == &::google::protobuf::internal::kEmptyString) {
    creativevideourl_ = new ::std::string;
  }
  creativevideourl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_creativevideourl() {
  set_has_creativevideourl();
  if (creativevideourl_ == &::google::protobuf::internal::kEmptyString) {
    creativevideourl_ = new ::std::string;
  }
  return creativevideourl_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_creativevideourl() {
  clear_has_creativevideourl();
  if (creativevideourl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativevideourl_;
    creativevideourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_creativevideourl(::std::string* creativevideourl) {
  if (creativevideourl_ != &::google::protobuf::internal::kEmptyString) {
    delete creativevideourl_;
  }
  if (creativevideourl) {
    set_has_creativevideourl();
    creativevideourl_ = creativevideourl;
  } else {
    clear_has_creativevideourl();
    creativevideourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoDurational = 10;
inline bool MobileAdResponse_VAD_Video::has_videodurational() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_videodurational() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdResponse_VAD_Video::clear_has_videodurational() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdResponse_VAD_Video::clear_videodurational() {
  if (videodurational_ != &::google::protobuf::internal::kEmptyString) {
    videodurational_->clear();
  }
  clear_has_videodurational();
}
inline const ::std::string& MobileAdResponse_VAD_Video::videodurational() const {
  return *videodurational_;
}
inline void MobileAdResponse_VAD_Video::set_videodurational(const ::std::string& value) {
  set_has_videodurational();
  if (videodurational_ == &::google::protobuf::internal::kEmptyString) {
    videodurational_ = new ::std::string;
  }
  videodurational_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_videodurational(const char* value) {
  set_has_videodurational();
  if (videodurational_ == &::google::protobuf::internal::kEmptyString) {
    videodurational_ = new ::std::string;
  }
  videodurational_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_videodurational(const char* value, size_t size) {
  set_has_videodurational();
  if (videodurational_ == &::google::protobuf::internal::kEmptyString) {
    videodurational_ = new ::std::string;
  }
  videodurational_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_videodurational() {
  set_has_videodurational();
  if (videodurational_ == &::google::protobuf::internal::kEmptyString) {
    videodurational_ = new ::std::string;
  }
  return videodurational_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_videodurational() {
  clear_has_videodurational();
  if (videodurational_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videodurational_;
    videodurational_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_videodurational(::std::string* videodurational) {
  if (videodurational_ != &::google::protobuf::internal::kEmptyString) {
    delete videodurational_;
  }
  if (videodurational) {
    set_has_videodurational();
    videodurational_ = videodurational;
  } else {
    clear_has_videodurational();
    videodurational_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string skipButtonShow = 11;
inline bool MobileAdResponse_VAD_Video::has_skipbuttonshow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_skipbuttonshow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdResponse_VAD_Video::clear_has_skipbuttonshow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdResponse_VAD_Video::clear_skipbuttonshow() {
  if (skipbuttonshow_ != &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_->clear();
  }
  clear_has_skipbuttonshow();
}
inline const ::std::string& MobileAdResponse_VAD_Video::skipbuttonshow() const {
  return *skipbuttonshow_;
}
inline void MobileAdResponse_VAD_Video::set_skipbuttonshow(const ::std::string& value) {
  set_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_ = new ::std::string;
  }
  skipbuttonshow_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_skipbuttonshow(const char* value) {
  set_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_ = new ::std::string;
  }
  skipbuttonshow_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_skipbuttonshow(const char* value, size_t size) {
  set_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_ = new ::std::string;
  }
  skipbuttonshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_skipbuttonshow() {
  set_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshow_ = new ::std::string;
  }
  return skipbuttonshow_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_skipbuttonshow() {
  clear_has_skipbuttonshow();
  if (skipbuttonshow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skipbuttonshow_;
    skipbuttonshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_skipbuttonshow(::std::string* skipbuttonshow) {
  if (skipbuttonshow_ != &::google::protobuf::internal::kEmptyString) {
    delete skipbuttonshow_;
  }
  if (skipbuttonshow) {
    set_has_skipbuttonshow();
    skipbuttonshow_ = skipbuttonshow;
  } else {
    clear_has_skipbuttonshow();
    skipbuttonshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string skipBUttonShowAfter = 12;
inline bool MobileAdResponse_VAD_Video::has_skipbuttonshowafter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_skipbuttonshowafter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileAdResponse_VAD_Video::clear_has_skipbuttonshowafter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileAdResponse_VAD_Video::clear_skipbuttonshowafter() {
  if (skipbuttonshowafter_ != &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_->clear();
  }
  clear_has_skipbuttonshowafter();
}
inline const ::std::string& MobileAdResponse_VAD_Video::skipbuttonshowafter() const {
  return *skipbuttonshowafter_;
}
inline void MobileAdResponse_VAD_Video::set_skipbuttonshowafter(const ::std::string& value) {
  set_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_ = new ::std::string;
  }
  skipbuttonshowafter_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_skipbuttonshowafter(const char* value) {
  set_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_ = new ::std::string;
  }
  skipbuttonshowafter_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_skipbuttonshowafter(const char* value, size_t size) {
  set_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_ = new ::std::string;
  }
  skipbuttonshowafter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_skipbuttonshowafter() {
  set_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    skipbuttonshowafter_ = new ::std::string;
  }
  return skipbuttonshowafter_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_skipbuttonshowafter() {
  clear_has_skipbuttonshowafter();
  if (skipbuttonshowafter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skipbuttonshowafter_;
    skipbuttonshowafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_skipbuttonshowafter(::std::string* skipbuttonshowafter) {
  if (skipbuttonshowafter_ != &::google::protobuf::internal::kEmptyString) {
    delete skipbuttonshowafter_;
  }
  if (skipbuttonshowafter) {
    set_has_skipbuttonshowafter();
    skipbuttonshowafter_ = skipbuttonshowafter;
  } else {
    clear_has_skipbuttonshowafter();
    skipbuttonshowafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.Navigation navigation = 13;
inline bool MobileAdResponse_VAD_Video::has_navigation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_navigation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MobileAdResponse_VAD_Video::clear_has_navigation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MobileAdResponse_VAD_Video::clear_navigation() {
  if (navigation_ != NULL) navigation_->::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation::Clear();
  clear_has_navigation();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation& MobileAdResponse_VAD_Video::navigation() const {
  return navigation_ != NULL ? *navigation_ : *default_instance_->navigation_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* MobileAdResponse_VAD_Video::mutable_navigation() {
  set_has_navigation();
  if (navigation_ == NULL) navigation_ = new ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation;
  return navigation_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* MobileAdResponse_VAD_Video::release_navigation() {
  clear_has_navigation();
  ::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* temp = navigation_;
  navigation_ = NULL;
  return temp;
}
inline void MobileAdResponse_VAD_Video::set_allocated_navigation(::com::rj::protos::mobile::MobileAdResponse_VAD_Navigation* navigation) {
  delete navigation_;
  navigation_ = navigation;
  if (navigation) {
    set_has_navigation();
  } else {
    clear_has_navigation();
  }
}

// optional string htmloverlayShow = 14;
inline bool MobileAdResponse_VAD_Video::has_htmloverlayshow() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_htmloverlayshow() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MobileAdResponse_VAD_Video::clear_has_htmloverlayshow() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MobileAdResponse_VAD_Video::clear_htmloverlayshow() {
  if (htmloverlayshow_ != &::google::protobuf::internal::kEmptyString) {
    htmloverlayshow_->clear();
  }
  clear_has_htmloverlayshow();
}
inline const ::std::string& MobileAdResponse_VAD_Video::htmloverlayshow() const {
  return *htmloverlayshow_;
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayshow(const ::std::string& value) {
  set_has_htmloverlayshow();
  if (htmloverlayshow_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayshow_ = new ::std::string;
  }
  htmloverlayshow_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayshow(const char* value) {
  set_has_htmloverlayshow();
  if (htmloverlayshow_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayshow_ = new ::std::string;
  }
  htmloverlayshow_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayshow(const char* value, size_t size) {
  set_has_htmloverlayshow();
  if (htmloverlayshow_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayshow_ = new ::std::string;
  }
  htmloverlayshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_htmloverlayshow() {
  set_has_htmloverlayshow();
  if (htmloverlayshow_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayshow_ = new ::std::string;
  }
  return htmloverlayshow_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_htmloverlayshow() {
  clear_has_htmloverlayshow();
  if (htmloverlayshow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = htmloverlayshow_;
    htmloverlayshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_htmloverlayshow(::std::string* htmloverlayshow) {
  if (htmloverlayshow_ != &::google::protobuf::internal::kEmptyString) {
    delete htmloverlayshow_;
  }
  if (htmloverlayshow) {
    set_has_htmloverlayshow();
    htmloverlayshow_ = htmloverlayshow;
  } else {
    clear_has_htmloverlayshow();
    htmloverlayshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string htmloverlayShowAfter = 15;
inline bool MobileAdResponse_VAD_Video::has_htmloverlayshowafter() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_htmloverlayshowafter() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileAdResponse_VAD_Video::clear_has_htmloverlayshowafter() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileAdResponse_VAD_Video::clear_htmloverlayshowafter() {
  if (htmloverlayshowafter_ != &::google::protobuf::internal::kEmptyString) {
    htmloverlayshowafter_->clear();
  }
  clear_has_htmloverlayshowafter();
}
inline const ::std::string& MobileAdResponse_VAD_Video::htmloverlayshowafter() const {
  return *htmloverlayshowafter_;
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayshowafter(const ::std::string& value) {
  set_has_htmloverlayshowafter();
  if (htmloverlayshowafter_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayshowafter_ = new ::std::string;
  }
  htmloverlayshowafter_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayshowafter(const char* value) {
  set_has_htmloverlayshowafter();
  if (htmloverlayshowafter_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayshowafter_ = new ::std::string;
  }
  htmloverlayshowafter_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayshowafter(const char* value, size_t size) {
  set_has_htmloverlayshowafter();
  if (htmloverlayshowafter_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayshowafter_ = new ::std::string;
  }
  htmloverlayshowafter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_htmloverlayshowafter() {
  set_has_htmloverlayshowafter();
  if (htmloverlayshowafter_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayshowafter_ = new ::std::string;
  }
  return htmloverlayshowafter_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_htmloverlayshowafter() {
  clear_has_htmloverlayshowafter();
  if (htmloverlayshowafter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = htmloverlayshowafter_;
    htmloverlayshowafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_htmloverlayshowafter(::std::string* htmloverlayshowafter) {
  if (htmloverlayshowafter_ != &::google::protobuf::internal::kEmptyString) {
    delete htmloverlayshowafter_;
  }
  if (htmloverlayshowafter) {
    set_has_htmloverlayshowafter();
    htmloverlayshowafter_ = htmloverlayshowafter;
  } else {
    clear_has_htmloverlayshowafter();
    htmloverlayshowafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string htmloverlayUrl = 16;
inline bool MobileAdResponse_VAD_Video::has_htmloverlayurl() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_htmloverlayurl() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MobileAdResponse_VAD_Video::clear_has_htmloverlayurl() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MobileAdResponse_VAD_Video::clear_htmloverlayurl() {
  if (htmloverlayurl_ != &::google::protobuf::internal::kEmptyString) {
    htmloverlayurl_->clear();
  }
  clear_has_htmloverlayurl();
}
inline const ::std::string& MobileAdResponse_VAD_Video::htmloverlayurl() const {
  return *htmloverlayurl_;
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayurl(const ::std::string& value) {
  set_has_htmloverlayurl();
  if (htmloverlayurl_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayurl_ = new ::std::string;
  }
  htmloverlayurl_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayurl(const char* value) {
  set_has_htmloverlayurl();
  if (htmloverlayurl_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayurl_ = new ::std::string;
  }
  htmloverlayurl_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_htmloverlayurl(const char* value, size_t size) {
  set_has_htmloverlayurl();
  if (htmloverlayurl_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayurl_ = new ::std::string;
  }
  htmloverlayurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_htmloverlayurl() {
  set_has_htmloverlayurl();
  if (htmloverlayurl_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlayurl_ = new ::std::string;
  }
  return htmloverlayurl_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_htmloverlayurl() {
  clear_has_htmloverlayurl();
  if (htmloverlayurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = htmloverlayurl_;
    htmloverlayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_htmloverlayurl(::std::string* htmloverlayurl) {
  if (htmloverlayurl_ != &::google::protobuf::internal::kEmptyString) {
    delete htmloverlayurl_;
  }
  if (htmloverlayurl) {
    set_has_htmloverlayurl();
    htmloverlayurl_ = htmloverlayurl;
  } else {
    clear_has_htmloverlayurl();
    htmloverlayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string htmloverlayContent = 17;
inline bool MobileAdResponse_VAD_Video::has_htmloverlaycontent() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MobileAdResponse_VAD_Video::set_has_htmloverlaycontent() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MobileAdResponse_VAD_Video::clear_has_htmloverlaycontent() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MobileAdResponse_VAD_Video::clear_htmloverlaycontent() {
  if (htmloverlaycontent_ != &::google::protobuf::internal::kEmptyString) {
    htmloverlaycontent_->clear();
  }
  clear_has_htmloverlaycontent();
}
inline const ::std::string& MobileAdResponse_VAD_Video::htmloverlaycontent() const {
  return *htmloverlaycontent_;
}
inline void MobileAdResponse_VAD_Video::set_htmloverlaycontent(const ::std::string& value) {
  set_has_htmloverlaycontent();
  if (htmloverlaycontent_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlaycontent_ = new ::std::string;
  }
  htmloverlaycontent_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_htmloverlaycontent(const char* value) {
  set_has_htmloverlaycontent();
  if (htmloverlaycontent_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlaycontent_ = new ::std::string;
  }
  htmloverlaycontent_->assign(value);
}
inline void MobileAdResponse_VAD_Video::set_htmloverlaycontent(const char* value, size_t size) {
  set_has_htmloverlaycontent();
  if (htmloverlaycontent_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlaycontent_ = new ::std::string;
  }
  htmloverlaycontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_VAD_Video::mutable_htmloverlaycontent() {
  set_has_htmloverlaycontent();
  if (htmloverlaycontent_ == &::google::protobuf::internal::kEmptyString) {
    htmloverlaycontent_ = new ::std::string;
  }
  return htmloverlaycontent_;
}
inline ::std::string* MobileAdResponse_VAD_Video::release_htmloverlaycontent() {
  clear_has_htmloverlaycontent();
  if (htmloverlaycontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = htmloverlaycontent_;
    htmloverlaycontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_VAD_Video::set_allocated_htmloverlaycontent(::std::string* htmloverlaycontent) {
  if (htmloverlaycontent_ != &::google::protobuf::internal::kEmptyString) {
    delete htmloverlaycontent_;
  }
  if (htmloverlaycontent) {
    set_has_htmloverlaycontent();
    htmloverlaycontent_ = htmloverlaycontent;
  } else {
    clear_has_htmloverlaycontent();
    htmloverlaycontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.mobile.MobileAdResponse.VAD.Video.VideoTrackingEvents videoTrackingEvents = 18;
inline int MobileAdResponse_VAD_Video::videotrackingevents_size() const {
  return videotrackingevents_.size();
}
inline void MobileAdResponse_VAD_Video::clear_videotrackingevents() {
  videotrackingevents_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents& MobileAdResponse_VAD_Video::videotrackingevents(int index) const {
  return videotrackingevents_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents* MobileAdResponse_VAD_Video::mutable_videotrackingevents(int index) {
  return videotrackingevents_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents* MobileAdResponse_VAD_Video::add_videotrackingevents() {
  return videotrackingevents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents >&
MobileAdResponse_VAD_Video::videotrackingevents() const {
  return videotrackingevents_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents >*
MobileAdResponse_VAD_Video::mutable_videotrackingevents() {
  return &videotrackingevents_;
}

// -------------------------------------------------------------------

// MobileAdResponse_VAD

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.VadType type = 1;
inline bool MobileAdResponse_VAD::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_VAD::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_VAD::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_VAD::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_VadType MobileAdResponse_VAD::type() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_VAD_VadType >(type_);
}
inline void MobileAdResponse_VAD::set_type(::com::rj::protos::mobile::MobileAdResponse_VAD_VadType value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_VAD_VadType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.Animation animation = 2;
inline bool MobileAdResponse_VAD::has_animation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_VAD::set_has_animation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_VAD::clear_has_animation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_VAD::clear_animation() {
  animation_ = 0;
  clear_has_animation();
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Animation MobileAdResponse_VAD::animation() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_VAD_Animation >(animation_);
}
inline void MobileAdResponse_VAD::set_animation(::com::rj::protos::mobile::MobileAdResponse_VAD_Animation value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_VAD_Animation_IsValid(value));
  set_has_animation();
  animation_ = value;
}

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.Interstitial interstitial = 3;
inline bool MobileAdResponse_VAD::has_interstitial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_VAD::set_has_interstitial() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_VAD::clear_has_interstitial() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_VAD::clear_interstitial() {
  if (interstitial_ != NULL) interstitial_->::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial::Clear();
  clear_has_interstitial();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial& MobileAdResponse_VAD::interstitial() const {
  return interstitial_ != NULL ? *interstitial_ : *default_instance_->interstitial_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial* MobileAdResponse_VAD::mutable_interstitial() {
  set_has_interstitial();
  if (interstitial_ == NULL) interstitial_ = new ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial;
  return interstitial_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial* MobileAdResponse_VAD::release_interstitial() {
  clear_has_interstitial();
  ::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial* temp = interstitial_;
  interstitial_ = NULL;
  return temp;
}
inline void MobileAdResponse_VAD::set_allocated_interstitial(::com::rj::protos::mobile::MobileAdResponse_VAD_Interstitial* interstitial) {
  delete interstitial_;
  interstitial_ = interstitial;
  if (interstitial) {
    set_has_interstitial();
  } else {
    clear_has_interstitial();
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.VAD.Video video = 4;
inline bool MobileAdResponse_VAD::has_video() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_VAD::set_has_video() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_VAD::clear_has_video() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_VAD::clear_video() {
  if (video_ != NULL) video_->::com::rj::protos::mobile::MobileAdResponse_VAD_Video::Clear();
  clear_has_video();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_VAD_Video& MobileAdResponse_VAD::video() const {
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video* MobileAdResponse_VAD::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::com::rj::protos::mobile::MobileAdResponse_VAD_Video;
  return video_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD_Video* MobileAdResponse_VAD::release_video() {
  clear_has_video();
  ::com::rj::protos::mobile::MobileAdResponse_VAD_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void MobileAdResponse_VAD::set_allocated_video(::com::rj::protos::mobile::MobileAdResponse_VAD_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
}

// -------------------------------------------------------------------

// MobileAdResponse_Native_Content

// optional string contentType = 1;
inline bool MobileAdResponse_Native_Content::has_contenttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_contenttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_Native_Content::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_Native_Content::clear_contenttype() {
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    contenttype_->clear();
  }
  clear_has_contenttype();
}
inline const ::std::string& MobileAdResponse_Native_Content::contenttype() const {
  return *contenttype_;
}
inline void MobileAdResponse_Native_Content::set_contenttype(const ::std::string& value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_contenttype(const char* value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_contenttype(const char* value, size_t size) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_contenttype() {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  return contenttype_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_contenttype() {
  clear_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contenttype_;
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttype_;
  }
  if (contenttype) {
    set_has_contenttype();
    contenttype_ = contenttype;
  } else {
    clear_has_contenttype();
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appType = 2;
inline bool MobileAdResponse_Native_Content::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_Native_Content::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_Native_Content::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& MobileAdResponse_Native_Content::apptype() const {
  return *apptype_;
}
inline void MobileAdResponse_Native_Content::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string iconUrl = 3;
inline bool MobileAdResponse_Native_Content::has_iconurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_iconurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse_Native_Content::clear_has_iconurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse_Native_Content::clear_iconurl() {
  if (iconurl_ != &::google::protobuf::internal::kEmptyString) {
    iconurl_->clear();
  }
  clear_has_iconurl();
}
inline const ::std::string& MobileAdResponse_Native_Content::iconurl() const {
  return *iconurl_;
}
inline void MobileAdResponse_Native_Content::set_iconurl(const ::std::string& value) {
  set_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    iconurl_ = new ::std::string;
  }
  iconurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_iconurl(const char* value) {
  set_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    iconurl_ = new ::std::string;
  }
  iconurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_iconurl(const char* value, size_t size) {
  set_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    iconurl_ = new ::std::string;
  }
  iconurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_iconurl() {
  set_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    iconurl_ = new ::std::string;
  }
  return iconurl_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_iconurl() {
  clear_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iconurl_;
    iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl_ != &::google::protobuf::internal::kEmptyString) {
    delete iconurl_;
  }
  if (iconurl) {
    set_has_iconurl();
    iconurl_ = iconurl;
  } else {
    clear_has_iconurl();
    iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 4;
inline bool MobileAdResponse_Native_Content::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse_Native_Content::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse_Native_Content::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MobileAdResponse_Native_Content::title() const {
  return *title_;
}
inline void MobileAdResponse_Native_Content::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string subTitle = 5;
inline bool MobileAdResponse_Native_Content::has_subtitle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_subtitle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdResponse_Native_Content::clear_has_subtitle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdResponse_Native_Content::clear_subtitle() {
  if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
    subtitle_->clear();
  }
  clear_has_subtitle();
}
inline const ::std::string& MobileAdResponse_Native_Content::subtitle() const {
  return *subtitle_;
}
inline void MobileAdResponse_Native_Content::set_subtitle(const ::std::string& value) {
  set_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    subtitle_ = new ::std::string;
  }
  subtitle_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_subtitle(const char* value) {
  set_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    subtitle_ = new ::std::string;
  }
  subtitle_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_subtitle(const char* value, size_t size) {
  set_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    subtitle_ = new ::std::string;
  }
  subtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_subtitle() {
  set_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    subtitle_ = new ::std::string;
  }
  return subtitle_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_subtitle() {
  clear_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subtitle_;
    subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete subtitle_;
  }
  if (subtitle) {
    set_has_subtitle();
    subtitle_ = subtitle;
  } else {
    clear_has_subtitle();
    subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 6;
inline bool MobileAdResponse_Native_Content::has_description() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_description() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdResponse_Native_Content::clear_has_description() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdResponse_Native_Content::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& MobileAdResponse_Native_Content::description() const {
  return *description_;
}
inline void MobileAdResponse_Native_Content::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.Native.Content.MutipleMediaType mutipleMediaType = 7;
inline bool MobileAdResponse_Native_Content::has_mutiplemediatype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_mutiplemediatype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdResponse_Native_Content::clear_has_mutiplemediatype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdResponse_Native_Content::clear_mutiplemediatype() {
  mutiplemediatype_ = 0;
  clear_has_mutiplemediatype();
}
inline ::com::rj::protos::mobile::MobileAdResponse_Native_Content_MutipleMediaType MobileAdResponse_Native_Content::mutiplemediatype() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_Native_Content_MutipleMediaType >(mutiplemediatype_);
}
inline void MobileAdResponse_Native_Content::set_mutiplemediatype(::com::rj::protos::mobile::MobileAdResponse_Native_Content_MutipleMediaType value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_Native_Content_MutipleMediaType_IsValid(value));
  set_has_mutiplemediatype();
  mutiplemediatype_ = value;
}

// optional string imageUrl = 8;
inline bool MobileAdResponse_Native_Content::has_imageurl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_imageurl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdResponse_Native_Content::clear_has_imageurl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdResponse_Native_Content::clear_imageurl() {
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    imageurl_->clear();
  }
  clear_has_imageurl();
}
inline const ::std::string& MobileAdResponse_Native_Content::imageurl() const {
  return *imageurl_;
}
inline void MobileAdResponse_Native_Content::set_imageurl(const ::std::string& value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_imageurl(const char* value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_imageurl(const char* value, size_t size) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_imageurl() {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  return imageurl_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_imageurl() {
  clear_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageurl_;
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_imageurl(::std::string* imageurl) {
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imageurl_;
  }
  if (imageurl) {
    set_has_imageurl();
    imageurl_ = imageurl;
  } else {
    clear_has_imageurl();
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoUrl = 9;
inline bool MobileAdResponse_Native_Content::has_videourl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_videourl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdResponse_Native_Content::clear_has_videourl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdResponse_Native_Content::clear_videourl() {
  if (videourl_ != &::google::protobuf::internal::kEmptyString) {
    videourl_->clear();
  }
  clear_has_videourl();
}
inline const ::std::string& MobileAdResponse_Native_Content::videourl() const {
  return *videourl_;
}
inline void MobileAdResponse_Native_Content::set_videourl(const ::std::string& value) {
  set_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    videourl_ = new ::std::string;
  }
  videourl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_videourl(const char* value) {
  set_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    videourl_ = new ::std::string;
  }
  videourl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_videourl(const char* value, size_t size) {
  set_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    videourl_ = new ::std::string;
  }
  videourl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_videourl() {
  set_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    videourl_ = new ::std::string;
  }
  return videourl_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_videourl() {
  clear_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videourl_;
    videourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_videourl(::std::string* videourl) {
  if (videourl_ != &::google::protobuf::internal::kEmptyString) {
    delete videourl_;
  }
  if (videourl) {
    set_has_videourl();
    videourl_ = videourl;
  } else {
    clear_has_videourl();
    videourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string youtubeUrl = 10;
inline bool MobileAdResponse_Native_Content::has_youtubeurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_youtubeurl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdResponse_Native_Content::clear_has_youtubeurl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdResponse_Native_Content::clear_youtubeurl() {
  if (youtubeurl_ != &::google::protobuf::internal::kEmptyString) {
    youtubeurl_->clear();
  }
  clear_has_youtubeurl();
}
inline const ::std::string& MobileAdResponse_Native_Content::youtubeurl() const {
  return *youtubeurl_;
}
inline void MobileAdResponse_Native_Content::set_youtubeurl(const ::std::string& value) {
  set_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    youtubeurl_ = new ::std::string;
  }
  youtubeurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_youtubeurl(const char* value) {
  set_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    youtubeurl_ = new ::std::string;
  }
  youtubeurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_youtubeurl(const char* value, size_t size) {
  set_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    youtubeurl_ = new ::std::string;
  }
  youtubeurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_youtubeurl() {
  set_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    youtubeurl_ = new ::std::string;
  }
  return youtubeurl_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_youtubeurl() {
  clear_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = youtubeurl_;
    youtubeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_youtubeurl(::std::string* youtubeurl) {
  if (youtubeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete youtubeurl_;
  }
  if (youtubeurl) {
    set_has_youtubeurl();
    youtubeurl_ = youtubeurl;
  } else {
    clear_has_youtubeurl();
    youtubeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mraidMarkUp = 11;
inline bool MobileAdResponse_Native_Content::has_mraidmarkup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_mraidmarkup() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdResponse_Native_Content::clear_has_mraidmarkup() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdResponse_Native_Content::clear_mraidmarkup() {
  if (mraidmarkup_ != &::google::protobuf::internal::kEmptyString) {
    mraidmarkup_->clear();
  }
  clear_has_mraidmarkup();
}
inline const ::std::string& MobileAdResponse_Native_Content::mraidmarkup() const {
  return *mraidmarkup_;
}
inline void MobileAdResponse_Native_Content::set_mraidmarkup(const ::std::string& value) {
  set_has_mraidmarkup();
  if (mraidmarkup_ == &::google::protobuf::internal::kEmptyString) {
    mraidmarkup_ = new ::std::string;
  }
  mraidmarkup_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_mraidmarkup(const char* value) {
  set_has_mraidmarkup();
  if (mraidmarkup_ == &::google::protobuf::internal::kEmptyString) {
    mraidmarkup_ = new ::std::string;
  }
  mraidmarkup_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_mraidmarkup(const char* value, size_t size) {
  set_has_mraidmarkup();
  if (mraidmarkup_ == &::google::protobuf::internal::kEmptyString) {
    mraidmarkup_ = new ::std::string;
  }
  mraidmarkup_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_mraidmarkup() {
  set_has_mraidmarkup();
  if (mraidmarkup_ == &::google::protobuf::internal::kEmptyString) {
    mraidmarkup_ = new ::std::string;
  }
  return mraidmarkup_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_mraidmarkup() {
  clear_has_mraidmarkup();
  if (mraidmarkup_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mraidmarkup_;
    mraidmarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_mraidmarkup(::std::string* mraidmarkup) {
  if (mraidmarkup_ != &::google::protobuf::internal::kEmptyString) {
    delete mraidmarkup_;
  }
  if (mraidmarkup) {
    set_has_mraidmarkup();
    mraidmarkup_ = mraidmarkup;
  } else {
    clear_has_mraidmarkup();
    mraidmarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string clickUrl = 12;
inline bool MobileAdResponse_Native_Content::has_clickurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_clickurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileAdResponse_Native_Content::clear_has_clickurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileAdResponse_Native_Content::clear_clickurl() {
  if (clickurl_ != &::google::protobuf::internal::kEmptyString) {
    clickurl_->clear();
  }
  clear_has_clickurl();
}
inline const ::std::string& MobileAdResponse_Native_Content::clickurl() const {
  return *clickurl_;
}
inline void MobileAdResponse_Native_Content::set_clickurl(const ::std::string& value) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_clickurl(const char* value) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_clickurl(const char* value, size_t size) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_clickurl() {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  return clickurl_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_clickurl() {
  clear_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clickurl_;
    clickurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_clickurl(::std::string* clickurl) {
  if (clickurl_ != &::google::protobuf::internal::kEmptyString) {
    delete clickurl_;
  }
  if (clickurl) {
    set_has_clickurl();
    clickurl_ = clickurl;
  } else {
    clear_has_clickurl();
    clickurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string relatedInfo = 13;
inline bool MobileAdResponse_Native_Content::has_relatedinfo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_relatedinfo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MobileAdResponse_Native_Content::clear_has_relatedinfo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MobileAdResponse_Native_Content::clear_relatedinfo() {
  if (relatedinfo_ != &::google::protobuf::internal::kEmptyString) {
    relatedinfo_->clear();
  }
  clear_has_relatedinfo();
}
inline const ::std::string& MobileAdResponse_Native_Content::relatedinfo() const {
  return *relatedinfo_;
}
inline void MobileAdResponse_Native_Content::set_relatedinfo(const ::std::string& value) {
  set_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    relatedinfo_ = new ::std::string;
  }
  relatedinfo_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_relatedinfo(const char* value) {
  set_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    relatedinfo_ = new ::std::string;
  }
  relatedinfo_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_relatedinfo(const char* value, size_t size) {
  set_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    relatedinfo_ = new ::std::string;
  }
  relatedinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_relatedinfo() {
  set_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    relatedinfo_ = new ::std::string;
  }
  return relatedinfo_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_relatedinfo() {
  clear_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relatedinfo_;
    relatedinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_relatedinfo(::std::string* relatedinfo) {
  if (relatedinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete relatedinfo_;
  }
  if (relatedinfo) {
    set_has_relatedinfo();
    relatedinfo_ = relatedinfo;
  } else {
    clear_has_relatedinfo();
    relatedinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tracking = 14;
inline bool MobileAdResponse_Native_Content::has_tracking() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_tracking() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MobileAdResponse_Native_Content::clear_has_tracking() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MobileAdResponse_Native_Content::clear_tracking() {
  if (tracking_ != &::google::protobuf::internal::kEmptyString) {
    tracking_->clear();
  }
  clear_has_tracking();
}
inline const ::std::string& MobileAdResponse_Native_Content::tracking() const {
  return *tracking_;
}
inline void MobileAdResponse_Native_Content::set_tracking(const ::std::string& value) {
  set_has_tracking();
  if (tracking_ == &::google::protobuf::internal::kEmptyString) {
    tracking_ = new ::std::string;
  }
  tracking_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_tracking(const char* value) {
  set_has_tracking();
  if (tracking_ == &::google::protobuf::internal::kEmptyString) {
    tracking_ = new ::std::string;
  }
  tracking_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_tracking(const char* value, size_t size) {
  set_has_tracking();
  if (tracking_ == &::google::protobuf::internal::kEmptyString) {
    tracking_ = new ::std::string;
  }
  tracking_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_tracking() {
  set_has_tracking();
  if (tracking_ == &::google::protobuf::internal::kEmptyString) {
    tracking_ = new ::std::string;
  }
  return tracking_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_tracking() {
  clear_has_tracking();
  if (tracking_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tracking_;
    tracking_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_tracking(::std::string* tracking) {
  if (tracking_ != &::google::protobuf::internal::kEmptyString) {
    delete tracking_;
  }
  if (tracking) {
    set_has_tracking();
    tracking_ = tracking;
  } else {
    clear_has_tracking();
    tracking_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appPackage = 15;
inline bool MobileAdResponse_Native_Content::has_apppackage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_apppackage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileAdResponse_Native_Content::clear_has_apppackage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileAdResponse_Native_Content::clear_apppackage() {
  if (apppackage_ != &::google::protobuf::internal::kEmptyString) {
    apppackage_->clear();
  }
  clear_has_apppackage();
}
inline const ::std::string& MobileAdResponse_Native_Content::apppackage() const {
  return *apppackage_;
}
inline void MobileAdResponse_Native_Content::set_apppackage(const ::std::string& value) {
  set_has_apppackage();
  if (apppackage_ == &::google::protobuf::internal::kEmptyString) {
    apppackage_ = new ::std::string;
  }
  apppackage_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_apppackage(const char* value) {
  set_has_apppackage();
  if (apppackage_ == &::google::protobuf::internal::kEmptyString) {
    apppackage_ = new ::std::string;
  }
  apppackage_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_apppackage(const char* value, size_t size) {
  set_has_apppackage();
  if (apppackage_ == &::google::protobuf::internal::kEmptyString) {
    apppackage_ = new ::std::string;
  }
  apppackage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_apppackage() {
  set_has_apppackage();
  if (apppackage_ == &::google::protobuf::internal::kEmptyString) {
    apppackage_ = new ::std::string;
  }
  return apppackage_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_apppackage() {
  clear_has_apppackage();
  if (apppackage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apppackage_;
    apppackage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_apppackage(::std::string* apppackage) {
  if (apppackage_ != &::google::protobuf::internal::kEmptyString) {
    delete apppackage_;
  }
  if (apppackage) {
    set_has_apppackage();
    apppackage_ = apppackage;
  } else {
    clear_has_apppackage();
    apppackage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string telNum = 16;
inline bool MobileAdResponse_Native_Content::has_telnum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_telnum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MobileAdResponse_Native_Content::clear_has_telnum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MobileAdResponse_Native_Content::clear_telnum() {
  if (telnum_ != &::google::protobuf::internal::kEmptyString) {
    telnum_->clear();
  }
  clear_has_telnum();
}
inline const ::std::string& MobileAdResponse_Native_Content::telnum() const {
  return *telnum_;
}
inline void MobileAdResponse_Native_Content::set_telnum(const ::std::string& value) {
  set_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    telnum_ = new ::std::string;
  }
  telnum_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_telnum(const char* value) {
  set_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    telnum_ = new ::std::string;
  }
  telnum_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_telnum(const char* value, size_t size) {
  set_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    telnum_ = new ::std::string;
  }
  telnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_telnum() {
  set_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    telnum_ = new ::std::string;
  }
  return telnum_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_telnum() {
  clear_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = telnum_;
    telnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_telnum(::std::string* telnum) {
  if (telnum_ != &::google::protobuf::internal::kEmptyString) {
    delete telnum_;
  }
  if (telnum) {
    set_has_telnum();
    telnum_ = telnum;
  } else {
    clear_has_telnum();
    telnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adLink = 17;
inline bool MobileAdResponse_Native_Content::has_adlink() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_adlink() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MobileAdResponse_Native_Content::clear_has_adlink() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MobileAdResponse_Native_Content::clear_adlink() {
  if (adlink_ != &::google::protobuf::internal::kEmptyString) {
    adlink_->clear();
  }
  clear_has_adlink();
}
inline const ::std::string& MobileAdResponse_Native_Content::adlink() const {
  return *adlink_;
}
inline void MobileAdResponse_Native_Content::set_adlink(const ::std::string& value) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_adlink(const char* value) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_adlink(const char* value, size_t size) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_adlink() {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  return adlink_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_adlink() {
  clear_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adlink_;
    adlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_adlink(::std::string* adlink) {
  if (adlink_ != &::google::protobuf::internal::kEmptyString) {
    delete adlink_;
  }
  if (adlink) {
    set_has_adlink();
    adlink_ = adlink;
  } else {
    clear_has_adlink();
    adlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string shareUrl = 18;
inline bool MobileAdResponse_Native_Content::has_shareurl() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MobileAdResponse_Native_Content::set_has_shareurl() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MobileAdResponse_Native_Content::clear_has_shareurl() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MobileAdResponse_Native_Content::clear_shareurl() {
  if (shareurl_ != &::google::protobuf::internal::kEmptyString) {
    shareurl_->clear();
  }
  clear_has_shareurl();
}
inline const ::std::string& MobileAdResponse_Native_Content::shareurl() const {
  return *shareurl_;
}
inline void MobileAdResponse_Native_Content::set_shareurl(const ::std::string& value) {
  set_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    shareurl_ = new ::std::string;
  }
  shareurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_shareurl(const char* value) {
  set_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    shareurl_ = new ::std::string;
  }
  shareurl_->assign(value);
}
inline void MobileAdResponse_Native_Content::set_shareurl(const char* value, size_t size) {
  set_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    shareurl_ = new ::std::string;
  }
  shareurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_shareurl() {
  set_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    shareurl_ = new ::std::string;
  }
  return shareurl_;
}
inline ::std::string* MobileAdResponse_Native_Content::release_shareurl() {
  clear_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shareurl_;
    shareurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native_Content::set_allocated_shareurl(::std::string* shareurl) {
  if (shareurl_ != &::google::protobuf::internal::kEmptyString) {
    delete shareurl_;
  }
  if (shareurl) {
    set_has_shareurl();
    shareurl_ = shareurl;
  } else {
    clear_has_shareurl();
    shareurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string impressionUrl = 19;
inline int MobileAdResponse_Native_Content::impressionurl_size() const {
  return impressionurl_.size();
}
inline void MobileAdResponse_Native_Content::clear_impressionurl() {
  impressionurl_.Clear();
}
inline const ::std::string& MobileAdResponse_Native_Content::impressionurl(int index) const {
  return impressionurl_.Get(index);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_impressionurl(int index) {
  return impressionurl_.Mutable(index);
}
inline void MobileAdResponse_Native_Content::set_impressionurl(int index, const ::std::string& value) {
  impressionurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Native_Content::set_impressionurl(int index, const char* value) {
  impressionurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Native_Content::set_impressionurl(int index, const char* value, size_t size) {
  impressionurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::add_impressionurl() {
  return impressionurl_.Add();
}
inline void MobileAdResponse_Native_Content::add_impressionurl(const ::std::string& value) {
  impressionurl_.Add()->assign(value);
}
inline void MobileAdResponse_Native_Content::add_impressionurl(const char* value) {
  impressionurl_.Add()->assign(value);
}
inline void MobileAdResponse_Native_Content::add_impressionurl(const char* value, size_t size) {
  impressionurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdResponse_Native_Content::impressionurl() const {
  return impressionurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdResponse_Native_Content::mutable_impressionurl() {
  return &impressionurl_;
}

// repeated string imageTrackingUrl = 20;
inline int MobileAdResponse_Native_Content::imagetrackingurl_size() const {
  return imagetrackingurl_.size();
}
inline void MobileAdResponse_Native_Content::clear_imagetrackingurl() {
  imagetrackingurl_.Clear();
}
inline const ::std::string& MobileAdResponse_Native_Content::imagetrackingurl(int index) const {
  return imagetrackingurl_.Get(index);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_imagetrackingurl(int index) {
  return imagetrackingurl_.Mutable(index);
}
inline void MobileAdResponse_Native_Content::set_imagetrackingurl(int index, const ::std::string& value) {
  imagetrackingurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Native_Content::set_imagetrackingurl(int index, const char* value) {
  imagetrackingurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Native_Content::set_imagetrackingurl(int index, const char* value, size_t size) {
  imagetrackingurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::add_imagetrackingurl() {
  return imagetrackingurl_.Add();
}
inline void MobileAdResponse_Native_Content::add_imagetrackingurl(const ::std::string& value) {
  imagetrackingurl_.Add()->assign(value);
}
inline void MobileAdResponse_Native_Content::add_imagetrackingurl(const char* value) {
  imagetrackingurl_.Add()->assign(value);
}
inline void MobileAdResponse_Native_Content::add_imagetrackingurl(const char* value, size_t size) {
  imagetrackingurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdResponse_Native_Content::imagetrackingurl() const {
  return imagetrackingurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdResponse_Native_Content::mutable_imagetrackingurl() {
  return &imagetrackingurl_;
}

// repeated string buttonTrackingUrl = 21;
inline int MobileAdResponse_Native_Content::buttontrackingurl_size() const {
  return buttontrackingurl_.size();
}
inline void MobileAdResponse_Native_Content::clear_buttontrackingurl() {
  buttontrackingurl_.Clear();
}
inline const ::std::string& MobileAdResponse_Native_Content::buttontrackingurl(int index) const {
  return buttontrackingurl_.Get(index);
}
inline ::std::string* MobileAdResponse_Native_Content::mutable_buttontrackingurl(int index) {
  return buttontrackingurl_.Mutable(index);
}
inline void MobileAdResponse_Native_Content::set_buttontrackingurl(int index, const ::std::string& value) {
  buttontrackingurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Native_Content::set_buttontrackingurl(int index, const char* value) {
  buttontrackingurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse_Native_Content::set_buttontrackingurl(int index, const char* value, size_t size) {
  buttontrackingurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native_Content::add_buttontrackingurl() {
  return buttontrackingurl_.Add();
}
inline void MobileAdResponse_Native_Content::add_buttontrackingurl(const ::std::string& value) {
  buttontrackingurl_.Add()->assign(value);
}
inline void MobileAdResponse_Native_Content::add_buttontrackingurl(const char* value) {
  buttontrackingurl_.Add()->assign(value);
}
inline void MobileAdResponse_Native_Content::add_buttontrackingurl(const char* value, size_t size) {
  buttontrackingurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdResponse_Native_Content::buttontrackingurl() const {
  return buttontrackingurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdResponse_Native_Content::mutable_buttontrackingurl() {
  return &buttontrackingurl_;
}

// -------------------------------------------------------------------

// MobileAdResponse_Native

// optional string adType = 1;
inline bool MobileAdResponse_Native::has_adtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_Native::set_has_adtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_Native::clear_has_adtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_Native::clear_adtype() {
  if (adtype_ != &::google::protobuf::internal::kEmptyString) {
    adtype_->clear();
  }
  clear_has_adtype();
}
inline const ::std::string& MobileAdResponse_Native::adtype() const {
  return *adtype_;
}
inline void MobileAdResponse_Native::set_adtype(const ::std::string& value) {
  set_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    adtype_ = new ::std::string;
  }
  adtype_->assign(value);
}
inline void MobileAdResponse_Native::set_adtype(const char* value) {
  set_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    adtype_ = new ::std::string;
  }
  adtype_->assign(value);
}
inline void MobileAdResponse_Native::set_adtype(const char* value, size_t size) {
  set_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    adtype_ = new ::std::string;
  }
  adtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native::mutable_adtype() {
  set_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    adtype_ = new ::std::string;
  }
  return adtype_;
}
inline ::std::string* MobileAdResponse_Native::release_adtype() {
  clear_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adtype_;
    adtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native::set_allocated_adtype(::std::string* adtype) {
  if (adtype_ != &::google::protobuf::internal::kEmptyString) {
    delete adtype_;
  }
  if (adtype) {
    set_has_adtype();
    adtype_ = adtype;
  } else {
    clear_has_adtype();
    adtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool MobileAdResponse_Native::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_Native::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_Native::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_Native::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdResponse_Native::id() const {
  return *id_;
}
inline void MobileAdResponse_Native::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdResponse_Native::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdResponse_Native::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_Native::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdResponse_Native::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_Native::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.mobile.MobileAdResponse.Native.Content content = 3;
inline int MobileAdResponse_Native::content_size() const {
  return content_.size();
}
inline void MobileAdResponse_Native::clear_content() {
  content_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_Native_Content& MobileAdResponse_Native::content(int index) const {
  return content_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_Native_Content* MobileAdResponse_Native::mutable_content(int index) {
  return content_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_Native_Content* MobileAdResponse_Native::add_content() {
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Native_Content >&
MobileAdResponse_Native::content() const {
  return content_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_Native_Content >*
MobileAdResponse_Native::mutable_content() {
  return &content_;
}

// -------------------------------------------------------------------

// MobileAdResponse

// required string id = 1;
inline bool MobileAdResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdResponse::id() const {
  return *id_;
}
inline void MobileAdResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdResponse::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bidderId = 2;
inline bool MobileAdResponse::has_bidderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse::set_has_bidderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse::clear_has_bidderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse::clear_bidderid() {
  if (bidderid_ != &::google::protobuf::internal::kEmptyString) {
    bidderid_->clear();
  }
  clear_has_bidderid();
}
inline const ::std::string& MobileAdResponse::bidderid() const {
  return *bidderid_;
}
inline void MobileAdResponse::set_bidderid(const ::std::string& value) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(value);
}
inline void MobileAdResponse::set_bidderid(const char* value) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(value);
}
inline void MobileAdResponse::set_bidderid(const char* value, size_t size) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_bidderid() {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  return bidderid_;
}
inline ::std::string* MobileAdResponse::release_bidderid() {
  clear_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bidderid_;
    bidderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_bidderid(::std::string* bidderid) {
  if (bidderid_ != &::google::protobuf::internal::kEmptyString) {
    delete bidderid_;
  }
  if (bidderid) {
    set_has_bidderid();
    bidderid_ = bidderid;
  } else {
    clear_has_bidderid();
    bidderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.Banner banner = 3;
inline bool MobileAdResponse::has_banner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse::set_has_banner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse::clear_has_banner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse::clear_banner() {
  if (banner_ != NULL) banner_->::com::rj::protos::mobile::MobileAdResponse_Banner::Clear();
  clear_has_banner();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_Banner& MobileAdResponse::banner() const {
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_Banner* MobileAdResponse::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::com::rj::protos::mobile::MobileAdResponse_Banner;
  return banner_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_Banner* MobileAdResponse::release_banner() {
  clear_has_banner();
  ::com::rj::protos::mobile::MobileAdResponse_Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline void MobileAdResponse::set_allocated_banner(::com::rj::protos::mobile::MobileAdResponse_Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.VAD vad = 4;
inline bool MobileAdResponse::has_vad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse::set_has_vad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse::clear_has_vad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse::clear_vad() {
  if (vad_ != NULL) vad_->::com::rj::protos::mobile::MobileAdResponse_VAD::Clear();
  clear_has_vad();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_VAD& MobileAdResponse::vad() const {
  return vad_ != NULL ? *vad_ : *default_instance_->vad_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD* MobileAdResponse::mutable_vad() {
  set_has_vad();
  if (vad_ == NULL) vad_ = new ::com::rj::protos::mobile::MobileAdResponse_VAD;
  return vad_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_VAD* MobileAdResponse::release_vad() {
  clear_has_vad();
  ::com::rj::protos::mobile::MobileAdResponse_VAD* temp = vad_;
  vad_ = NULL;
  return temp;
}
inline void MobileAdResponse::set_allocated_vad(::com::rj::protos::mobile::MobileAdResponse_VAD* vad) {
  delete vad_;
  vad_ = vad;
  if (vad) {
    set_has_vad();
  } else {
    clear_has_vad();
  }
}

// optional .com.rj.protos.mobile.MobileAdResponse.Native native = 5;
inline bool MobileAdResponse::has_native() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdResponse::set_has_native() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdResponse::clear_has_native() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdResponse::clear_native() {
  if (native_ != NULL) native_->::com::rj::protos::mobile::MobileAdResponse_Native::Clear();
  clear_has_native();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_Native& MobileAdResponse::native() const {
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_Native* MobileAdResponse::mutable_native() {
  set_has_native();
  if (native_ == NULL) native_ = new ::com::rj::protos::mobile::MobileAdResponse_Native;
  return native_;
}
inline ::com::rj::protos::mobile::MobileAdResponse_Native* MobileAdResponse::release_native() {
  clear_has_native();
  ::com::rj::protos::mobile::MobileAdResponse_Native* temp = native_;
  native_ = NULL;
  return temp;
}
inline void MobileAdResponse::set_allocated_native(::com::rj::protos::mobile::MobileAdResponse_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mobile
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdResponse_Banner_Type>() {
  return ::com::rj::protos::mobile::MobileAdResponse_Banner_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType>() {
  return ::com::rj::protos::mobile::MobileAdResponse_VAD_Video_VideoTrackingEvents_TrackingType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdResponse_VAD_VadType>() {
  return ::com::rj::protos::mobile::MobileAdResponse_VAD_VadType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdResponse_VAD_Animation>() {
  return ::com::rj::protos::mobile::MobileAdResponse_VAD_Animation_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation>() {
  return ::com::rj::protos::mobile::MobileAdResponse_VAD_Orientation_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdResponse_Native_Content_MutipleMediaType>() {
  return ::com::rj::protos::mobile::MobileAdResponse_Native_Content_MutipleMediaType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AdMobileResponse_2eproto__INCLUDED
