// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdBidderResponseTemplate.proto

#ifndef PROTOBUF_AdBidderResponseTemplate_2eproto__INCLUDED
#define PROTOBUF_AdBidderResponseTemplate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

class BidderResponse;
class BidderResponse_Ad;
class BidderResponse_Ad_AdSystem;
class BidderResponse_Ad_Impression;
class BidderResponse_Ad_LinearCreative;
class BidderResponse_Ad_LinearCreative_Video;
class BidderResponse_Ad_LinearCreative_LinearTrack;
class BidderResponse_Ad_LinearCreative_LinearTrack_Progress;
class BidderResponse_Ad_LinearCreative_VideoClicks;
class BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking;
class BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough;
class BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick;
class BidderResponse_Ad_LinearCreative_AdParameters;
class BidderResponse_Ad_LinearCreative_Icon;
class BidderResponse_Ad_LinearCreative_Icon_IconClickTracking;
class BidderResponse_Ad_CompanionCreative;
class BidderResponse_Ad_CompanionCreative_Companion;
class BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking;
class BidderResponse_Ad_CompanionCreative_Companion_AdParameters;

// ===================================================================

class BidderResponse_Ad_AdSystem : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_AdSystem();
  virtual ~BidderResponse_Ad_AdSystem();

  BidderResponse_Ad_AdSystem(const BidderResponse_Ad_AdSystem& from);

  inline BidderResponse_Ad_AdSystem& operator=(const BidderResponse_Ad_AdSystem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_AdSystem& default_instance();

  void Swap(BidderResponse_Ad_AdSystem* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_AdSystem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_AdSystem& from);
  void MergeFrom(const BidderResponse_Ad_AdSystem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sys = 1;
  inline bool has_sys() const;
  inline void clear_sys();
  static const int kSysFieldNumber = 1;
  inline const ::std::string& sys() const;
  inline void set_sys(const ::std::string& value);
  inline void set_sys(const char* value);
  inline void set_sys(const char* value, size_t size);
  inline ::std::string* mutable_sys();
  inline ::std::string* release_sys();
  inline void set_allocated_sys(::std::string* sys);

  // optional string version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.AdSystem)
 private:
  inline void set_has_sys();
  inline void clear_has_sys();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sys_;
  ::std::string* version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_AdSystem* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_Impression : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_Impression();
  virtual ~BidderResponse_Ad_Impression();

  BidderResponse_Ad_Impression(const BidderResponse_Ad_Impression& from);

  inline BidderResponse_Ad_Impression& operator=(const BidderResponse_Ad_Impression& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_Impression& default_instance();

  void Swap(BidderResponse_Ad_Impression* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_Impression* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_Impression& from);
  void MergeFrom(const BidderResponse_Ad_Impression& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.Impression)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_Impression* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_Video : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_Video();
  virtual ~BidderResponse_Ad_LinearCreative_Video();

  BidderResponse_Ad_LinearCreative_Video(const BidderResponse_Ad_LinearCreative_Video& from);

  inline BidderResponse_Ad_LinearCreative_Video& operator=(const BidderResponse_Ad_LinearCreative_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_Video& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_Video* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_Video& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mime = 1;
  inline bool has_mime() const;
  inline void clear_mime();
  static const int kMimeFieldNumber = 1;
  inline const ::std::string& mime() const;
  inline void set_mime(const ::std::string& value);
  inline void set_mime(const char* value);
  inline void set_mime(const char* value, size_t size);
  inline ::std::string* mutable_mime();
  inline ::std::string* release_mime();
  inline void set_allocated_mime(::std::string* mime);

  // optional string assetUrl = 2;
  inline bool has_asseturl() const;
  inline void clear_asseturl();
  static const int kAssetUrlFieldNumber = 2;
  inline const ::std::string& asseturl() const;
  inline void set_asseturl(const ::std::string& value);
  inline void set_asseturl(const char* value);
  inline void set_asseturl(const char* value, size_t size);
  inline ::std::string* mutable_asseturl();
  inline ::std::string* release_asseturl();
  inline void set_allocated_asseturl(::std::string* asseturl);

  // optional string width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline const ::std::string& width() const;
  inline void set_width(const ::std::string& value);
  inline void set_width(const char* value);
  inline void set_width(const char* value, size_t size);
  inline ::std::string* mutable_width();
  inline ::std::string* release_width();
  inline void set_allocated_width(::std::string* width);

  // optional string height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline const ::std::string& height() const;
  inline void set_height(const ::std::string& value);
  inline void set_height(const char* value);
  inline void set_height(const char* value, size_t size);
  inline ::std::string* mutable_height();
  inline ::std::string* release_height();
  inline void set_allocated_height(::std::string* height);

  // optional string delivery = 5;
  inline bool has_delivery() const;
  inline void clear_delivery();
  static const int kDeliveryFieldNumber = 5;
  inline const ::std::string& delivery() const;
  inline void set_delivery(const ::std::string& value);
  inline void set_delivery(const char* value);
  inline void set_delivery(const char* value, size_t size);
  inline ::std::string* mutable_delivery();
  inline ::std::string* release_delivery();
  inline void set_allocated_delivery(::std::string* delivery);

  // optional string bitrate = 6;
  inline bool has_bitrate() const;
  inline void clear_bitrate();
  static const int kBitrateFieldNumber = 6;
  inline const ::std::string& bitrate() const;
  inline void set_bitrate(const ::std::string& value);
  inline void set_bitrate(const char* value);
  inline void set_bitrate(const char* value, size_t size);
  inline ::std::string* mutable_bitrate();
  inline ::std::string* release_bitrate();
  inline void set_allocated_bitrate(::std::string* bitrate);

  // optional string maintainAspectRatio = 7;
  inline bool has_maintainaspectratio() const;
  inline void clear_maintainaspectratio();
  static const int kMaintainAspectRatioFieldNumber = 7;
  inline const ::std::string& maintainaspectratio() const;
  inline void set_maintainaspectratio(const ::std::string& value);
  inline void set_maintainaspectratio(const char* value);
  inline void set_maintainaspectratio(const char* value, size_t size);
  inline ::std::string* mutable_maintainaspectratio();
  inline ::std::string* release_maintainaspectratio();
  inline void set_allocated_maintainaspectratio(::std::string* maintainaspectratio);

  // optional string id = 8;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 8;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string scalable = 9;
  inline bool has_scalable() const;
  inline void clear_scalable();
  static const int kScalableFieldNumber = 9;
  inline const ::std::string& scalable() const;
  inline void set_scalable(const ::std::string& value);
  inline void set_scalable(const char* value);
  inline void set_scalable(const char* value, size_t size);
  inline ::std::string* mutable_scalable();
  inline ::std::string* release_scalable();
  inline void set_allocated_scalable(::std::string* scalable);

  // optional string apiFramework = 10;
  inline bool has_apiframework() const;
  inline void clear_apiframework();
  static const int kApiFrameworkFieldNumber = 10;
  inline const ::std::string& apiframework() const;
  inline void set_apiframework(const ::std::string& value);
  inline void set_apiframework(const char* value);
  inline void set_apiframework(const char* value, size_t size);
  inline ::std::string* mutable_apiframework();
  inline ::std::string* release_apiframework();
  inline void set_allocated_apiframework(::std::string* apiframework);

  // optional string codec = 11;
  inline bool has_codec() const;
  inline void clear_codec();
  static const int kCodecFieldNumber = 11;
  inline const ::std::string& codec() const;
  inline void set_codec(const ::std::string& value);
  inline void set_codec(const char* value);
  inline void set_codec(const char* value, size_t size);
  inline ::std::string* mutable_codec();
  inline ::std::string* release_codec();
  inline void set_allocated_codec(::std::string* codec);

  // optional string minBitrate = 12;
  inline bool has_minbitrate() const;
  inline void clear_minbitrate();
  static const int kMinBitrateFieldNumber = 12;
  inline const ::std::string& minbitrate() const;
  inline void set_minbitrate(const ::std::string& value);
  inline void set_minbitrate(const char* value);
  inline void set_minbitrate(const char* value, size_t size);
  inline ::std::string* mutable_minbitrate();
  inline ::std::string* release_minbitrate();
  inline void set_allocated_minbitrate(::std::string* minbitrate);

  // optional string maxBitrate = 13;
  inline bool has_maxbitrate() const;
  inline void clear_maxbitrate();
  static const int kMaxBitrateFieldNumber = 13;
  inline const ::std::string& maxbitrate() const;
  inline void set_maxbitrate(const ::std::string& value);
  inline void set_maxbitrate(const char* value);
  inline void set_maxbitrate(const char* value, size_t size);
  inline ::std::string* mutable_maxbitrate();
  inline ::std::string* release_maxbitrate();
  inline void set_allocated_maxbitrate(::std::string* maxbitrate);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Video)
 private:
  inline void set_has_mime();
  inline void clear_has_mime();
  inline void set_has_asseturl();
  inline void clear_has_asseturl();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_delivery();
  inline void clear_has_delivery();
  inline void set_has_bitrate();
  inline void clear_has_bitrate();
  inline void set_has_maintainaspectratio();
  inline void clear_has_maintainaspectratio();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_scalable();
  inline void clear_has_scalable();
  inline void set_has_apiframework();
  inline void clear_has_apiframework();
  inline void set_has_codec();
  inline void clear_has_codec();
  inline void set_has_minbitrate();
  inline void clear_has_minbitrate();
  inline void set_has_maxbitrate();
  inline void clear_has_maxbitrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* mime_;
  ::std::string* asseturl_;
  ::std::string* width_;
  ::std::string* height_;
  ::std::string* delivery_;
  ::std::string* bitrate_;
  ::std::string* maintainaspectratio_;
  ::std::string* id_;
  ::std::string* scalable_;
  ::std::string* apiframework_;
  ::std::string* codec_;
  ::std::string* minbitrate_;
  ::std::string* maxbitrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_Video* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_LinearTrack_Progress : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_LinearTrack_Progress();
  virtual ~BidderResponse_Ad_LinearCreative_LinearTrack_Progress();

  BidderResponse_Ad_LinearCreative_LinearTrack_Progress(const BidderResponse_Ad_LinearCreative_LinearTrack_Progress& from);

  inline BidderResponse_Ad_LinearCreative_LinearTrack_Progress& operator=(const BidderResponse_Ad_LinearCreative_LinearTrack_Progress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_LinearTrack_Progress& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_LinearTrack_Progress* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_LinearTrack_Progress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_LinearTrack_Progress& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_LinearTrack_Progress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline const ::std::string& offset() const;
  inline void set_offset(const ::std::string& value);
  inline void set_offset(const char* value);
  inline void set_offset(const char* value, size_t size);
  inline ::std::string* mutable_offset();
  inline ::std::string* release_offset();
  inline void set_allocated_offset(::std::string* offset);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.LinearTrack.Progress)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* offset_;
  ::std::string* url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_LinearTrack_Progress* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_LinearTrack : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_LinearTrack();
  virtual ~BidderResponse_Ad_LinearCreative_LinearTrack();

  BidderResponse_Ad_LinearCreative_LinearTrack(const BidderResponse_Ad_LinearCreative_LinearTrack& from);

  inline BidderResponse_Ad_LinearCreative_LinearTrack& operator=(const BidderResponse_Ad_LinearCreative_LinearTrack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_LinearTrack& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_LinearTrack* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_LinearTrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_LinearTrack& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_LinearTrack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidderResponse_Ad_LinearCreative_LinearTrack_Progress Progress;

  // accessors -------------------------------------------------------

  // repeated string creativeView = 1;
  inline int creativeview_size() const;
  inline void clear_creativeview();
  static const int kCreativeViewFieldNumber = 1;
  inline const ::std::string& creativeview(int index) const;
  inline ::std::string* mutable_creativeview(int index);
  inline void set_creativeview(int index, const ::std::string& value);
  inline void set_creativeview(int index, const char* value);
  inline void set_creativeview(int index, const char* value, size_t size);
  inline ::std::string* add_creativeview();
  inline void add_creativeview(const ::std::string& value);
  inline void add_creativeview(const char* value);
  inline void add_creativeview(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& creativeview() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_creativeview();

  // repeated string start = 2;
  inline int start_size() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline const ::std::string& start(int index) const;
  inline ::std::string* mutable_start(int index);
  inline void set_start(int index, const ::std::string& value);
  inline void set_start(int index, const char* value);
  inline void set_start(int index, const char* value, size_t size);
  inline ::std::string* add_start();
  inline void add_start(const ::std::string& value);
  inline void add_start(const char* value);
  inline void add_start(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& start() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_start();

  // repeated string firstQuartile = 3;
  inline int firstquartile_size() const;
  inline void clear_firstquartile();
  static const int kFirstQuartileFieldNumber = 3;
  inline const ::std::string& firstquartile(int index) const;
  inline ::std::string* mutable_firstquartile(int index);
  inline void set_firstquartile(int index, const ::std::string& value);
  inline void set_firstquartile(int index, const char* value);
  inline void set_firstquartile(int index, const char* value, size_t size);
  inline ::std::string* add_firstquartile();
  inline void add_firstquartile(const ::std::string& value);
  inline void add_firstquartile(const char* value);
  inline void add_firstquartile(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& firstquartile() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_firstquartile();

  // repeated string midpoint = 4;
  inline int midpoint_size() const;
  inline void clear_midpoint();
  static const int kMidpointFieldNumber = 4;
  inline const ::std::string& midpoint(int index) const;
  inline ::std::string* mutable_midpoint(int index);
  inline void set_midpoint(int index, const ::std::string& value);
  inline void set_midpoint(int index, const char* value);
  inline void set_midpoint(int index, const char* value, size_t size);
  inline ::std::string* add_midpoint();
  inline void add_midpoint(const ::std::string& value);
  inline void add_midpoint(const char* value);
  inline void add_midpoint(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& midpoint() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_midpoint();

  // repeated string thirdQuartile = 5;
  inline int thirdquartile_size() const;
  inline void clear_thirdquartile();
  static const int kThirdQuartileFieldNumber = 5;
  inline const ::std::string& thirdquartile(int index) const;
  inline ::std::string* mutable_thirdquartile(int index);
  inline void set_thirdquartile(int index, const ::std::string& value);
  inline void set_thirdquartile(int index, const char* value);
  inline void set_thirdquartile(int index, const char* value, size_t size);
  inline ::std::string* add_thirdquartile();
  inline void add_thirdquartile(const ::std::string& value);
  inline void add_thirdquartile(const char* value);
  inline void add_thirdquartile(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& thirdquartile() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_thirdquartile();

  // repeated string complete = 6;
  inline int complete_size() const;
  inline void clear_complete();
  static const int kCompleteFieldNumber = 6;
  inline const ::std::string& complete(int index) const;
  inline ::std::string* mutable_complete(int index);
  inline void set_complete(int index, const ::std::string& value);
  inline void set_complete(int index, const char* value);
  inline void set_complete(int index, const char* value, size_t size);
  inline ::std::string* add_complete();
  inline void add_complete(const ::std::string& value);
  inline void add_complete(const char* value);
  inline void add_complete(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& complete() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_complete();

  // repeated string mute = 7;
  inline int mute_size() const;
  inline void clear_mute();
  static const int kMuteFieldNumber = 7;
  inline const ::std::string& mute(int index) const;
  inline ::std::string* mutable_mute(int index);
  inline void set_mute(int index, const ::std::string& value);
  inline void set_mute(int index, const char* value);
  inline void set_mute(int index, const char* value, size_t size);
  inline ::std::string* add_mute();
  inline void add_mute(const ::std::string& value);
  inline void add_mute(const char* value);
  inline void add_mute(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mute() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mute();

  // repeated string unmute = 8;
  inline int unmute_size() const;
  inline void clear_unmute();
  static const int kUnmuteFieldNumber = 8;
  inline const ::std::string& unmute(int index) const;
  inline ::std::string* mutable_unmute(int index);
  inline void set_unmute(int index, const ::std::string& value);
  inline void set_unmute(int index, const char* value);
  inline void set_unmute(int index, const char* value, size_t size);
  inline ::std::string* add_unmute();
  inline void add_unmute(const ::std::string& value);
  inline void add_unmute(const char* value);
  inline void add_unmute(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& unmute() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unmute();

  // repeated string pause = 9;
  inline int pause_size() const;
  inline void clear_pause();
  static const int kPauseFieldNumber = 9;
  inline const ::std::string& pause(int index) const;
  inline ::std::string* mutable_pause(int index);
  inline void set_pause(int index, const ::std::string& value);
  inline void set_pause(int index, const char* value);
  inline void set_pause(int index, const char* value, size_t size);
  inline ::std::string* add_pause();
  inline void add_pause(const ::std::string& value);
  inline void add_pause(const char* value);
  inline void add_pause(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pause() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pause();

  // repeated string rewind = 10;
  inline int rewind_size() const;
  inline void clear_rewind();
  static const int kRewindFieldNumber = 10;
  inline const ::std::string& rewind(int index) const;
  inline ::std::string* mutable_rewind(int index);
  inline void set_rewind(int index, const ::std::string& value);
  inline void set_rewind(int index, const char* value);
  inline void set_rewind(int index, const char* value, size_t size);
  inline ::std::string* add_rewind();
  inline void add_rewind(const ::std::string& value);
  inline void add_rewind(const char* value);
  inline void add_rewind(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& rewind() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rewind();

  // repeated string resume = 11;
  inline int resume_size() const;
  inline void clear_resume();
  static const int kResumeFieldNumber = 11;
  inline const ::std::string& resume(int index) const;
  inline ::std::string* mutable_resume(int index);
  inline void set_resume(int index, const ::std::string& value);
  inline void set_resume(int index, const char* value);
  inline void set_resume(int index, const char* value, size_t size);
  inline ::std::string* add_resume();
  inline void add_resume(const ::std::string& value);
  inline void add_resume(const char* value);
  inline void add_resume(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& resume() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resume();

  // repeated string fullscreen = 12;
  inline int fullscreen_size() const;
  inline void clear_fullscreen();
  static const int kFullscreenFieldNumber = 12;
  inline const ::std::string& fullscreen(int index) const;
  inline ::std::string* mutable_fullscreen(int index);
  inline void set_fullscreen(int index, const ::std::string& value);
  inline void set_fullscreen(int index, const char* value);
  inline void set_fullscreen(int index, const char* value, size_t size);
  inline ::std::string* add_fullscreen();
  inline void add_fullscreen(const ::std::string& value);
  inline void add_fullscreen(const char* value);
  inline void add_fullscreen(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fullscreen() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fullscreen();

  // repeated string expand = 13;
  inline int expand_size() const;
  inline void clear_expand();
  static const int kExpandFieldNumber = 13;
  inline const ::std::string& expand(int index) const;
  inline ::std::string* mutable_expand(int index);
  inline void set_expand(int index, const ::std::string& value);
  inline void set_expand(int index, const char* value);
  inline void set_expand(int index, const char* value, size_t size);
  inline ::std::string* add_expand();
  inline void add_expand(const ::std::string& value);
  inline void add_expand(const char* value);
  inline void add_expand(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& expand() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_expand();

  // repeated string collapse = 14;
  inline int collapse_size() const;
  inline void clear_collapse();
  static const int kCollapseFieldNumber = 14;
  inline const ::std::string& collapse(int index) const;
  inline ::std::string* mutable_collapse(int index);
  inline void set_collapse(int index, const ::std::string& value);
  inline void set_collapse(int index, const char* value);
  inline void set_collapse(int index, const char* value, size_t size);
  inline ::std::string* add_collapse();
  inline void add_collapse(const ::std::string& value);
  inline void add_collapse(const char* value);
  inline void add_collapse(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& collapse() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_collapse();

  // repeated string acceptInvitation = 15;
  inline int acceptinvitation_size() const;
  inline void clear_acceptinvitation();
  static const int kAcceptInvitationFieldNumber = 15;
  inline const ::std::string& acceptinvitation(int index) const;
  inline ::std::string* mutable_acceptinvitation(int index);
  inline void set_acceptinvitation(int index, const ::std::string& value);
  inline void set_acceptinvitation(int index, const char* value);
  inline void set_acceptinvitation(int index, const char* value, size_t size);
  inline ::std::string* add_acceptinvitation();
  inline void add_acceptinvitation(const ::std::string& value);
  inline void add_acceptinvitation(const char* value);
  inline void add_acceptinvitation(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& acceptinvitation() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_acceptinvitation();

  // repeated string close = 16;
  inline int close_size() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 16;
  inline const ::std::string& close(int index) const;
  inline ::std::string* mutable_close(int index);
  inline void set_close(int index, const ::std::string& value);
  inline void set_close(int index, const char* value);
  inline void set_close(int index, const char* value, size_t size);
  inline ::std::string* add_close();
  inline void add_close(const ::std::string& value);
  inline void add_close(const char* value);
  inline void add_close(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& close() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_close();

  // repeated string closeLinear = 22;
  inline int closelinear_size() const;
  inline void clear_closelinear();
  static const int kCloseLinearFieldNumber = 22;
  inline const ::std::string& closelinear(int index) const;
  inline ::std::string* mutable_closelinear(int index);
  inline void set_closelinear(int index, const ::std::string& value);
  inline void set_closelinear(int index, const char* value);
  inline void set_closelinear(int index, const char* value, size_t size);
  inline ::std::string* add_closelinear();
  inline void add_closelinear(const ::std::string& value);
  inline void add_closelinear(const char* value);
  inline void add_closelinear(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& closelinear() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_closelinear();

  // repeated string exitFullscreen = 17;
  inline int exitfullscreen_size() const;
  inline void clear_exitfullscreen();
  static const int kExitFullscreenFieldNumber = 17;
  inline const ::std::string& exitfullscreen(int index) const;
  inline ::std::string* mutable_exitfullscreen(int index);
  inline void set_exitfullscreen(int index, const ::std::string& value);
  inline void set_exitfullscreen(int index, const char* value);
  inline void set_exitfullscreen(int index, const char* value, size_t size);
  inline ::std::string* add_exitfullscreen();
  inline void add_exitfullscreen(const ::std::string& value);
  inline void add_exitfullscreen(const char* value);
  inline void add_exitfullscreen(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& exitfullscreen() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exitfullscreen();

  // repeated string acceptInvitationLinear = 18;
  inline int acceptinvitationlinear_size() const;
  inline void clear_acceptinvitationlinear();
  static const int kAcceptInvitationLinearFieldNumber = 18;
  inline const ::std::string& acceptinvitationlinear(int index) const;
  inline ::std::string* mutable_acceptinvitationlinear(int index);
  inline void set_acceptinvitationlinear(int index, const ::std::string& value);
  inline void set_acceptinvitationlinear(int index, const char* value);
  inline void set_acceptinvitationlinear(int index, const char* value, size_t size);
  inline ::std::string* add_acceptinvitationlinear();
  inline void add_acceptinvitationlinear(const ::std::string& value);
  inline void add_acceptinvitationlinear(const char* value);
  inline void add_acceptinvitationlinear(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& acceptinvitationlinear() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_acceptinvitationlinear();

  // repeated string skip = 19;
  inline int skip_size() const;
  inline void clear_skip();
  static const int kSkipFieldNumber = 19;
  inline const ::std::string& skip(int index) const;
  inline ::std::string* mutable_skip(int index);
  inline void set_skip(int index, const ::std::string& value);
  inline void set_skip(int index, const char* value);
  inline void set_skip(int index, const char* value, size_t size);
  inline ::std::string* add_skip();
  inline void add_skip(const ::std::string& value);
  inline void add_skip(const char* value);
  inline void add_skip(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& skip() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_skip();

  // repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.LinearTrack.Progress progress = 23;
  inline int progress_size() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 23;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress& progress(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress* mutable_progress(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress* add_progress();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress >&
      progress() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress >*
      mutable_progress();

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.LinearTrack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> creativeview_;
  ::google::protobuf::RepeatedPtrField< ::std::string> start_;
  ::google::protobuf::RepeatedPtrField< ::std::string> firstquartile_;
  ::google::protobuf::RepeatedPtrField< ::std::string> midpoint_;
  ::google::protobuf::RepeatedPtrField< ::std::string> thirdquartile_;
  ::google::protobuf::RepeatedPtrField< ::std::string> complete_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mute_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unmute_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pause_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rewind_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resume_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fullscreen_;
  ::google::protobuf::RepeatedPtrField< ::std::string> expand_;
  ::google::protobuf::RepeatedPtrField< ::std::string> collapse_;
  ::google::protobuf::RepeatedPtrField< ::std::string> acceptinvitation_;
  ::google::protobuf::RepeatedPtrField< ::std::string> close_;
  ::google::protobuf::RepeatedPtrField< ::std::string> closelinear_;
  ::google::protobuf::RepeatedPtrField< ::std::string> exitfullscreen_;
  ::google::protobuf::RepeatedPtrField< ::std::string> acceptinvitationlinear_;
  ::google::protobuf::RepeatedPtrField< ::std::string> skip_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress > progress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_LinearTrack* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking();
  virtual ~BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking();

  BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking(const BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking& from);

  inline BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking& operator=(const BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.ClickTracking)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough();
  virtual ~BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough();

  BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough(const BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough& from);

  inline BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough& operator=(const BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.ClickThrough)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick();
  virtual ~BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick();

  BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick(const BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick& from);

  inline BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick& operator=(const BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.CustomClick)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_VideoClicks : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_VideoClicks();
  virtual ~BidderResponse_Ad_LinearCreative_VideoClicks();

  BidderResponse_Ad_LinearCreative_VideoClicks(const BidderResponse_Ad_LinearCreative_VideoClicks& from);

  inline BidderResponse_Ad_LinearCreative_VideoClicks& operator=(const BidderResponse_Ad_LinearCreative_VideoClicks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_VideoClicks& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_VideoClicks* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_VideoClicks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_VideoClicks& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_VideoClicks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking ClickTracking;
  typedef BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough ClickThrough;
  typedef BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick CustomClick;

  // accessors -------------------------------------------------------

  // repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.ClickTracking clickTracking = 1;
  inline int clicktracking_size() const;
  inline void clear_clicktracking();
  static const int kClickTrackingFieldNumber = 1;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking& clicktracking(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking* mutable_clicktracking(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking* add_clicktracking();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking >&
      clicktracking() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking >*
      mutable_clicktracking();

  // optional .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.ClickThrough clickThrough = 2;
  inline bool has_clickthrough() const;
  inline void clear_clickthrough();
  static const int kClickThroughFieldNumber = 2;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough& clickthrough() const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* mutable_clickthrough();
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* release_clickthrough();
  inline void set_allocated_clickthrough(::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* clickthrough);

  // repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.CustomClick customClick = 3;
  inline int customclick_size() const;
  inline void clear_customclick();
  static const int kCustomClickFieldNumber = 3;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick& customclick(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick* mutable_customclick(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick* add_customclick();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick >&
      customclick() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick >*
      mutable_customclick();

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks)
 private:
  inline void set_has_clickthrough();
  inline void clear_has_clickthrough();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking > clicktracking_;
  ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* clickthrough_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick > customclick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_VideoClicks* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_AdParameters : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_AdParameters();
  virtual ~BidderResponse_Ad_LinearCreative_AdParameters();

  BidderResponse_Ad_LinearCreative_AdParameters(const BidderResponse_Ad_LinearCreative_AdParameters& from);

  inline BidderResponse_Ad_LinearCreative_AdParameters& operator=(const BidderResponse_Ad_LinearCreative_AdParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_AdParameters& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_AdParameters* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_AdParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_AdParameters& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_AdParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string para = 1;
  inline bool has_para() const;
  inline void clear_para();
  static const int kParaFieldNumber = 1;
  inline const ::std::string& para() const;
  inline void set_para(const ::std::string& value);
  inline void set_para(const char* value);
  inline void set_para(const char* value, size_t size);
  inline ::std::string* mutable_para();
  inline ::std::string* release_para();
  inline void set_allocated_para(::std::string* para);

  // optional bool xmlEncoded = 2;
  inline bool has_xmlencoded() const;
  inline void clear_xmlencoded();
  static const int kXmlEncodedFieldNumber = 2;
  inline bool xmlencoded() const;
  inline void set_xmlencoded(bool value);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.AdParameters)
 private:
  inline void set_has_para();
  inline void clear_has_para();
  inline void set_has_xmlencoded();
  inline void clear_has_xmlencoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* para_;
  bool xmlencoded_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_AdParameters* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_Icon_IconClickTracking : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_Icon_IconClickTracking();
  virtual ~BidderResponse_Ad_LinearCreative_Icon_IconClickTracking();

  BidderResponse_Ad_LinearCreative_Icon_IconClickTracking(const BidderResponse_Ad_LinearCreative_Icon_IconClickTracking& from);

  inline BidderResponse_Ad_LinearCreative_Icon_IconClickTracking& operator=(const BidderResponse_Ad_LinearCreative_Icon_IconClickTracking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_Icon_IconClickTracking& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_Icon_IconClickTracking* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_Icon_IconClickTracking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_Icon_IconClickTracking& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_Icon_IconClickTracking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Icon.IconClickTracking)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_Icon_IconClickTracking* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative_Icon : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative_Icon();
  virtual ~BidderResponse_Ad_LinearCreative_Icon();

  BidderResponse_Ad_LinearCreative_Icon(const BidderResponse_Ad_LinearCreative_Icon& from);

  inline BidderResponse_Ad_LinearCreative_Icon& operator=(const BidderResponse_Ad_LinearCreative_Icon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative_Icon& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative_Icon* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative_Icon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative_Icon& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative_Icon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidderResponse_Ad_LinearCreative_Icon_IconClickTracking IconClickTracking;

  // accessors -------------------------------------------------------

  // optional string program = 1;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 1;
  inline const ::std::string& program() const;
  inline void set_program(const ::std::string& value);
  inline void set_program(const char* value);
  inline void set_program(const char* value, size_t size);
  inline ::std::string* mutable_program();
  inline ::std::string* release_program();
  inline void set_allocated_program(::std::string* program);

  // optional string width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline const ::std::string& width() const;
  inline void set_width(const ::std::string& value);
  inline void set_width(const char* value);
  inline void set_width(const char* value, size_t size);
  inline ::std::string* mutable_width();
  inline ::std::string* release_width();
  inline void set_allocated_width(::std::string* width);

  // optional string height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline const ::std::string& height() const;
  inline void set_height(const ::std::string& value);
  inline void set_height(const char* value);
  inline void set_height(const char* value, size_t size);
  inline ::std::string* mutable_height();
  inline ::std::string* release_height();
  inline void set_allocated_height(::std::string* height);

  // optional string xPosition = 4;
  inline bool has_xposition() const;
  inline void clear_xposition();
  static const int kXPositionFieldNumber = 4;
  inline const ::std::string& xposition() const;
  inline void set_xposition(const ::std::string& value);
  inline void set_xposition(const char* value);
  inline void set_xposition(const char* value, size_t size);
  inline ::std::string* mutable_xposition();
  inline ::std::string* release_xposition();
  inline void set_allocated_xposition(::std::string* xposition);

  // optional string yPosition = 5;
  inline bool has_yposition() const;
  inline void clear_yposition();
  static const int kYPositionFieldNumber = 5;
  inline const ::std::string& yposition() const;
  inline void set_yposition(const ::std::string& value);
  inline void set_yposition(const char* value);
  inline void set_yposition(const char* value, size_t size);
  inline ::std::string* mutable_yposition();
  inline ::std::string* release_yposition();
  inline void set_allocated_yposition(::std::string* yposition);

  // optional string duration = 6;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 6;
  inline const ::std::string& duration() const;
  inline void set_duration(const ::std::string& value);
  inline void set_duration(const char* value);
  inline void set_duration(const char* value, size_t size);
  inline ::std::string* mutable_duration();
  inline ::std::string* release_duration();
  inline void set_allocated_duration(::std::string* duration);

  // optional string offset = 7;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 7;
  inline const ::std::string& offset() const;
  inline void set_offset(const ::std::string& value);
  inline void set_offset(const char* value);
  inline void set_offset(const char* value, size_t size);
  inline ::std::string* mutable_offset();
  inline ::std::string* release_offset();
  inline void set_allocated_offset(::std::string* offset);

  // optional string apiFramework = 8;
  inline bool has_apiframework() const;
  inline void clear_apiframework();
  static const int kApiFrameworkFieldNumber = 8;
  inline const ::std::string& apiframework() const;
  inline void set_apiframework(const ::std::string& value);
  inline void set_apiframework(const char* value);
  inline void set_apiframework(const char* value, size_t size);
  inline ::std::string* mutable_apiframework();
  inline ::std::string* release_apiframework();
  inline void set_allocated_apiframework(::std::string* apiframework);

  // optional string staticUrl = 9;
  inline bool has_staticurl() const;
  inline void clear_staticurl();
  static const int kStaticUrlFieldNumber = 9;
  inline const ::std::string& staticurl() const;
  inline void set_staticurl(const ::std::string& value);
  inline void set_staticurl(const char* value);
  inline void set_staticurl(const char* value, size_t size);
  inline ::std::string* mutable_staticurl();
  inline ::std::string* release_staticurl();
  inline void set_allocated_staticurl(::std::string* staticurl);

  // optional string creativeType = 10;
  inline bool has_creativetype() const;
  inline void clear_creativetype();
  static const int kCreativeTypeFieldNumber = 10;
  inline const ::std::string& creativetype() const;
  inline void set_creativetype(const ::std::string& value);
  inline void set_creativetype(const char* value);
  inline void set_creativetype(const char* value, size_t size);
  inline ::std::string* mutable_creativetype();
  inline ::std::string* release_creativetype();
  inline void set_allocated_creativetype(::std::string* creativetype);

  // optional string iframeUrl = 11;
  inline bool has_iframeurl() const;
  inline void clear_iframeurl();
  static const int kIframeUrlFieldNumber = 11;
  inline const ::std::string& iframeurl() const;
  inline void set_iframeurl(const ::std::string& value);
  inline void set_iframeurl(const char* value);
  inline void set_iframeurl(const char* value, size_t size);
  inline ::std::string* mutable_iframeurl();
  inline ::std::string* release_iframeurl();
  inline void set_allocated_iframeurl(::std::string* iframeurl);

  // optional string html = 12;
  inline bool has_html() const;
  inline void clear_html();
  static const int kHtmlFieldNumber = 12;
  inline const ::std::string& html() const;
  inline void set_html(const ::std::string& value);
  inline void set_html(const char* value);
  inline void set_html(const char* value, size_t size);
  inline ::std::string* mutable_html();
  inline ::std::string* release_html();
  inline void set_allocated_html(::std::string* html);

  // optional string iconClickThrough = 13;
  inline bool has_iconclickthrough() const;
  inline void clear_iconclickthrough();
  static const int kIconClickThroughFieldNumber = 13;
  inline const ::std::string& iconclickthrough() const;
  inline void set_iconclickthrough(const ::std::string& value);
  inline void set_iconclickthrough(const char* value);
  inline void set_iconclickthrough(const char* value, size_t size);
  inline ::std::string* mutable_iconclickthrough();
  inline ::std::string* release_iconclickthrough();
  inline void set_allocated_iconclickthrough(::std::string* iconclickthrough);

  // repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Icon.IconClickTracking iconClickTracking = 14;
  inline int iconclicktracking_size() const;
  inline void clear_iconclicktracking();
  static const int kIconClickTrackingFieldNumber = 14;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking& iconclicktracking(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking* mutable_iconclicktracking(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking* add_iconclicktracking();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking >&
      iconclicktracking() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking >*
      mutable_iconclicktracking();

  // repeated string iconViewTracking = 15;
  inline int iconviewtracking_size() const;
  inline void clear_iconviewtracking();
  static const int kIconViewTrackingFieldNumber = 15;
  inline const ::std::string& iconviewtracking(int index) const;
  inline ::std::string* mutable_iconviewtracking(int index);
  inline void set_iconviewtracking(int index, const ::std::string& value);
  inline void set_iconviewtracking(int index, const char* value);
  inline void set_iconviewtracking(int index, const char* value, size_t size);
  inline ::std::string* add_iconviewtracking();
  inline void add_iconviewtracking(const ::std::string& value);
  inline void add_iconviewtracking(const char* value);
  inline void add_iconviewtracking(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& iconviewtracking() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_iconviewtracking();

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Icon)
 private:
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_xposition();
  inline void clear_has_xposition();
  inline void set_has_yposition();
  inline void clear_has_yposition();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_apiframework();
  inline void clear_has_apiframework();
  inline void set_has_staticurl();
  inline void clear_has_staticurl();
  inline void set_has_creativetype();
  inline void clear_has_creativetype();
  inline void set_has_iframeurl();
  inline void clear_has_iframeurl();
  inline void set_has_html();
  inline void clear_has_html();
  inline void set_has_iconclickthrough();
  inline void clear_has_iconclickthrough();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* program_;
  ::std::string* width_;
  ::std::string* height_;
  ::std::string* xposition_;
  ::std::string* yposition_;
  ::std::string* duration_;
  ::std::string* offset_;
  ::std::string* apiframework_;
  ::std::string* staticurl_;
  ::std::string* creativetype_;
  ::std::string* iframeurl_;
  ::std::string* html_;
  ::std::string* iconclickthrough_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking > iconclicktracking_;
  ::google::protobuf::RepeatedPtrField< ::std::string> iconviewtracking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative_Icon* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_LinearCreative : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_LinearCreative();
  virtual ~BidderResponse_Ad_LinearCreative();

  BidderResponse_Ad_LinearCreative(const BidderResponse_Ad_LinearCreative& from);

  inline BidderResponse_Ad_LinearCreative& operator=(const BidderResponse_Ad_LinearCreative& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_LinearCreative& default_instance();

  void Swap(BidderResponse_Ad_LinearCreative* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_LinearCreative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_LinearCreative& from);
  void MergeFrom(const BidderResponse_Ad_LinearCreative& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidderResponse_Ad_LinearCreative_Video Video;
  typedef BidderResponse_Ad_LinearCreative_LinearTrack LinearTrack;
  typedef BidderResponse_Ad_LinearCreative_VideoClicks VideoClicks;
  typedef BidderResponse_Ad_LinearCreative_AdParameters AdParameters;
  typedef BidderResponse_Ad_LinearCreative_Icon Icon;

  // accessors -------------------------------------------------------

  // repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Video videos = 1;
  inline int videos_size() const;
  inline void clear_videos();
  static const int kVideosFieldNumber = 1;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video& videos(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video* mutable_videos(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video* add_videos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video >&
      videos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video >*
      mutable_videos();

  // optional .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.LinearTrack linearTrack = 2;
  inline bool has_lineartrack() const;
  inline void clear_lineartrack();
  static const int kLinearTrackFieldNumber = 2;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack& lineartrack() const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack* mutable_lineartrack();
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack* release_lineartrack();
  inline void set_allocated_lineartrack(::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack* lineartrack);

  // optional .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks videoClicks = 3;
  inline bool has_videoclicks() const;
  inline void clear_videoclicks();
  static const int kVideoClicksFieldNumber = 3;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks& videoclicks() const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks* mutable_videoclicks();
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks* release_videoclicks();
  inline void set_allocated_videoclicks(::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks* videoclicks);

  // optional .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.AdParameters adParameters = 4;
  inline bool has_adparameters() const;
  inline void clear_adparameters();
  static const int kAdParametersFieldNumber = 4;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters& adparameters() const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters* mutable_adparameters();
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters* release_adparameters();
  inline void set_allocated_adparameters(::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters* adparameters);

  // repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Icon icons = 5;
  inline int icons_size() const;
  inline void clear_icons();
  static const int kIconsFieldNumber = 5;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon& icons(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon* mutable_icons(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon* add_icons();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon >&
      icons() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon >*
      mutable_icons();

  // optional string duration = 6;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 6;
  inline const ::std::string& duration() const;
  inline void set_duration(const ::std::string& value);
  inline void set_duration(const char* value);
  inline void set_duration(const char* value, size_t size);
  inline ::std::string* mutable_duration();
  inline ::std::string* release_duration();
  inline void set_allocated_duration(::std::string* duration);

  // repeated string creativeExtension = 16;
  inline int creativeextension_size() const;
  inline void clear_creativeextension();
  static const int kCreativeExtensionFieldNumber = 16;
  inline const ::std::string& creativeextension(int index) const;
  inline ::std::string* mutable_creativeextension(int index);
  inline void set_creativeextension(int index, const ::std::string& value);
  inline void set_creativeextension(int index, const char* value);
  inline void set_creativeextension(int index, const char* value, size_t size);
  inline ::std::string* add_creativeextension();
  inline void add_creativeextension(const ::std::string& value);
  inline void add_creativeextension(const char* value);
  inline void add_creativeextension(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& creativeextension() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_creativeextension();

  // optional string id = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 7;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string sequence = 8;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 8;
  inline const ::std::string& sequence() const;
  inline void set_sequence(const ::std::string& value);
  inline void set_sequence(const char* value);
  inline void set_sequence(const char* value, size_t size);
  inline ::std::string* mutable_sequence();
  inline ::std::string* release_sequence();
  inline void set_allocated_sequence(::std::string* sequence);

  // optional string adId = 9;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdIdFieldNumber = 9;
  inline const ::std::string& adid() const;
  inline void set_adid(const ::std::string& value);
  inline void set_adid(const char* value);
  inline void set_adid(const char* value, size_t size);
  inline ::std::string* mutable_adid();
  inline ::std::string* release_adid();
  inline void set_allocated_adid(::std::string* adid);

  // optional string apiFramework = 17;
  inline bool has_apiframework() const;
  inline void clear_apiframework();
  static const int kApiFrameworkFieldNumber = 17;
  inline const ::std::string& apiframework() const;
  inline void set_apiframework(const ::std::string& value);
  inline void set_apiframework(const char* value);
  inline void set_apiframework(const char* value, size_t size);
  inline ::std::string* mutable_apiframework();
  inline ::std::string* release_apiframework();
  inline void set_allocated_apiframework(::std::string* apiframework);

  // optional string skipoffset = 15;
  inline bool has_skipoffset() const;
  inline void clear_skipoffset();
  static const int kSkipoffsetFieldNumber = 15;
  inline const ::std::string& skipoffset() const;
  inline void set_skipoffset(const ::std::string& value);
  inline void set_skipoffset(const char* value);
  inline void set_skipoffset(const char* value, size_t size);
  inline ::std::string* mutable_skipoffset();
  inline ::std::string* release_skipoffset();
  inline void set_allocated_skipoffset(::std::string* skipoffset);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.LinearCreative)
 private:
  inline void set_has_lineartrack();
  inline void clear_has_lineartrack();
  inline void set_has_videoclicks();
  inline void clear_has_videoclicks();
  inline void set_has_adparameters();
  inline void clear_has_adparameters();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_adid();
  inline void clear_has_adid();
  inline void set_has_apiframework();
  inline void clear_has_apiframework();
  inline void set_has_skipoffset();
  inline void clear_has_skipoffset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video > videos_;
  ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack* lineartrack_;
  ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks* videoclicks_;
  ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters* adparameters_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon > icons_;
  ::std::string* duration_;
  ::google::protobuf::RepeatedPtrField< ::std::string> creativeextension_;
  ::std::string* id_;
  ::std::string* sequence_;
  ::std::string* adid_;
  ::std::string* apiframework_;
  ::std::string* skipoffset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_LinearCreative* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking();
  virtual ~BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking();

  BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking(const BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking& from);

  inline BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking& operator=(const BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking& default_instance();

  void Swap(BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking& from);
  void MergeFrom(const BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion.CompanionClickTracking)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_CompanionCreative_Companion_AdParameters : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_CompanionCreative_Companion_AdParameters();
  virtual ~BidderResponse_Ad_CompanionCreative_Companion_AdParameters();

  BidderResponse_Ad_CompanionCreative_Companion_AdParameters(const BidderResponse_Ad_CompanionCreative_Companion_AdParameters& from);

  inline BidderResponse_Ad_CompanionCreative_Companion_AdParameters& operator=(const BidderResponse_Ad_CompanionCreative_Companion_AdParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_CompanionCreative_Companion_AdParameters& default_instance();

  void Swap(BidderResponse_Ad_CompanionCreative_Companion_AdParameters* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_CompanionCreative_Companion_AdParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_CompanionCreative_Companion_AdParameters& from);
  void MergeFrom(const BidderResponse_Ad_CompanionCreative_Companion_AdParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string para = 1;
  inline bool has_para() const;
  inline void clear_para();
  static const int kParaFieldNumber = 1;
  inline const ::std::string& para() const;
  inline void set_para(const ::std::string& value);
  inline void set_para(const char* value);
  inline void set_para(const char* value, size_t size);
  inline ::std::string* mutable_para();
  inline ::std::string* release_para();
  inline void set_allocated_para(::std::string* para);

  // optional bool xmlEncoded = 2;
  inline bool has_xmlencoded() const;
  inline void clear_xmlencoded();
  static const int kXmlEncodedFieldNumber = 2;
  inline bool xmlencoded() const;
  inline void set_xmlencoded(bool value);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion.AdParameters)
 private:
  inline void set_has_para();
  inline void clear_has_para();
  inline void set_has_xmlencoded();
  inline void clear_has_xmlencoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* para_;
  bool xmlencoded_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_CompanionCreative_Companion_AdParameters* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_CompanionCreative_Companion : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_CompanionCreative_Companion();
  virtual ~BidderResponse_Ad_CompanionCreative_Companion();

  BidderResponse_Ad_CompanionCreative_Companion(const BidderResponse_Ad_CompanionCreative_Companion& from);

  inline BidderResponse_Ad_CompanionCreative_Companion& operator=(const BidderResponse_Ad_CompanionCreative_Companion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_CompanionCreative_Companion& default_instance();

  void Swap(BidderResponse_Ad_CompanionCreative_Companion* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_CompanionCreative_Companion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_CompanionCreative_Companion& from);
  void MergeFrom(const BidderResponse_Ad_CompanionCreative_Companion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking CompanionClickTracking;
  typedef BidderResponse_Ad_CompanionCreative_Companion_AdParameters AdParameters;

  // accessors -------------------------------------------------------

  // optional string width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline const ::std::string& width() const;
  inline void set_width(const ::std::string& value);
  inline void set_width(const char* value);
  inline void set_width(const char* value, size_t size);
  inline ::std::string* mutable_width();
  inline ::std::string* release_width();
  inline void set_allocated_width(::std::string* width);

  // optional string height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline const ::std::string& height() const;
  inline void set_height(const ::std::string& value);
  inline void set_height(const char* value);
  inline void set_height(const char* value, size_t size);
  inline ::std::string* mutable_height();
  inline ::std::string* release_height();
  inline void set_allocated_height(::std::string* height);

  // optional string id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string expandedWidth = 4;
  inline bool has_expandedwidth() const;
  inline void clear_expandedwidth();
  static const int kExpandedWidthFieldNumber = 4;
  inline const ::std::string& expandedwidth() const;
  inline void set_expandedwidth(const ::std::string& value);
  inline void set_expandedwidth(const char* value);
  inline void set_expandedwidth(const char* value, size_t size);
  inline ::std::string* mutable_expandedwidth();
  inline ::std::string* release_expandedwidth();
  inline void set_allocated_expandedwidth(::std::string* expandedwidth);

  // optional string expandedHeight = 5;
  inline bool has_expandedheight() const;
  inline void clear_expandedheight();
  static const int kExpandedHeightFieldNumber = 5;
  inline const ::std::string& expandedheight() const;
  inline void set_expandedheight(const ::std::string& value);
  inline void set_expandedheight(const char* value);
  inline void set_expandedheight(const char* value, size_t size);
  inline ::std::string* mutable_expandedheight();
  inline ::std::string* release_expandedheight();
  inline void set_allocated_expandedheight(::std::string* expandedheight);

  // optional string apiFramework = 6;
  inline bool has_apiframework() const;
  inline void clear_apiframework();
  static const int kApiFrameworkFieldNumber = 6;
  inline const ::std::string& apiframework() const;
  inline void set_apiframework(const ::std::string& value);
  inline void set_apiframework(const char* value);
  inline void set_apiframework(const char* value, size_t size);
  inline ::std::string* mutable_apiframework();
  inline ::std::string* release_apiframework();
  inline void set_allocated_apiframework(::std::string* apiframework);

  // optional string assetWidth = 17;
  inline bool has_assetwidth() const;
  inline void clear_assetwidth();
  static const int kAssetWidthFieldNumber = 17;
  inline const ::std::string& assetwidth() const;
  inline void set_assetwidth(const ::std::string& value);
  inline void set_assetwidth(const char* value);
  inline void set_assetwidth(const char* value, size_t size);
  inline ::std::string* mutable_assetwidth();
  inline ::std::string* release_assetwidth();
  inline void set_allocated_assetwidth(::std::string* assetwidth);

  // optional string assetHeight = 18;
  inline bool has_assetheight() const;
  inline void clear_assetheight();
  static const int kAssetHeightFieldNumber = 18;
  inline const ::std::string& assetheight() const;
  inline void set_assetheight(const ::std::string& value);
  inline void set_assetheight(const char* value);
  inline void set_assetheight(const char* value, size_t size);
  inline ::std::string* mutable_assetheight();
  inline ::std::string* release_assetheight();
  inline void set_allocated_assetheight(::std::string* assetheight);

  // optional string adSlotID = 19;
  inline bool has_adslotid() const;
  inline void clear_adslotid();
  static const int kAdSlotIDFieldNumber = 19;
  inline const ::std::string& adslotid() const;
  inline void set_adslotid(const ::std::string& value);
  inline void set_adslotid(const char* value);
  inline void set_adslotid(const char* value, size_t size);
  inline ::std::string* mutable_adslotid();
  inline ::std::string* release_adslotid();
  inline void set_allocated_adslotid(::std::string* adslotid);

  // optional string clickThroughUrl = 10;
  inline bool has_clickthroughurl() const;
  inline void clear_clickthroughurl();
  static const int kClickThroughUrlFieldNumber = 10;
  inline const ::std::string& clickthroughurl() const;
  inline void set_clickthroughurl(const ::std::string& value);
  inline void set_clickthroughurl(const char* value);
  inline void set_clickthroughurl(const char* value, size_t size);
  inline ::std::string* mutable_clickthroughurl();
  inline ::std::string* release_clickthroughurl();
  inline void set_allocated_clickthroughurl(::std::string* clickthroughurl);

  // optional string altText = 13;
  inline bool has_alttext() const;
  inline void clear_alttext();
  static const int kAltTextFieldNumber = 13;
  inline const ::std::string& alttext() const;
  inline void set_alttext(const ::std::string& value);
  inline void set_alttext(const char* value);
  inline void set_alttext(const char* value, size_t size);
  inline ::std::string* mutable_alttext();
  inline ::std::string* release_alttext();
  inline void set_allocated_alttext(::std::string* alttext);

  // repeated .com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion.CompanionClickTracking companionClickTracking = 11;
  inline int companionclicktracking_size() const;
  inline void clear_companionclicktracking();
  static const int kCompanionClickTrackingFieldNumber = 11;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking& companionclicktracking(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking* mutable_companionclicktracking(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking* add_companionclicktracking();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking >&
      companionclicktracking() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking >*
      mutable_companionclicktracking();

  // optional .com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion.AdParameters adParameters = 16;
  inline bool has_adparameters() const;
  inline void clear_adparameters();
  static const int kAdParametersFieldNumber = 16;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters& adparameters() const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters* mutable_adparameters();
  inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters* release_adparameters();
  inline void set_allocated_adparameters(::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters* adparameters);

  // optional string staticUrl = 7;
  inline bool has_staticurl() const;
  inline void clear_staticurl();
  static const int kStaticUrlFieldNumber = 7;
  inline const ::std::string& staticurl() const;
  inline void set_staticurl(const ::std::string& value);
  inline void set_staticurl(const char* value);
  inline void set_staticurl(const char* value, size_t size);
  inline ::std::string* mutable_staticurl();
  inline ::std::string* release_staticurl();
  inline void set_allocated_staticurl(::std::string* staticurl);

  // optional string creativeType = 15;
  inline bool has_creativetype() const;
  inline void clear_creativetype();
  static const int kCreativeTypeFieldNumber = 15;
  inline const ::std::string& creativetype() const;
  inline void set_creativetype(const ::std::string& value);
  inline void set_creativetype(const char* value);
  inline void set_creativetype(const char* value, size_t size);
  inline ::std::string* mutable_creativetype();
  inline ::std::string* release_creativetype();
  inline void set_allocated_creativetype(::std::string* creativetype);

  // optional string iframeUrl = 8;
  inline bool has_iframeurl() const;
  inline void clear_iframeurl();
  static const int kIframeUrlFieldNumber = 8;
  inline const ::std::string& iframeurl() const;
  inline void set_iframeurl(const ::std::string& value);
  inline void set_iframeurl(const char* value);
  inline void set_iframeurl(const char* value, size_t size);
  inline ::std::string* mutable_iframeurl();
  inline ::std::string* release_iframeurl();
  inline void set_allocated_iframeurl(::std::string* iframeurl);

  // optional string html = 9;
  inline bool has_html() const;
  inline void clear_html();
  static const int kHtmlFieldNumber = 9;
  inline const ::std::string& html() const;
  inline void set_html(const ::std::string& value);
  inline void set_html(const char* value);
  inline void set_html(const char* value, size_t size);
  inline ::std::string* mutable_html();
  inline ::std::string* release_html();
  inline void set_allocated_html(::std::string* html);

  // repeated string creativeView = 12;
  inline int creativeview_size() const;
  inline void clear_creativeview();
  static const int kCreativeViewFieldNumber = 12;
  inline const ::std::string& creativeview(int index) const;
  inline ::std::string* mutable_creativeview(int index);
  inline void set_creativeview(int index, const ::std::string& value);
  inline void set_creativeview(int index, const char* value);
  inline void set_creativeview(int index, const char* value, size_t size);
  inline ::std::string* add_creativeview();
  inline void add_creativeview(const ::std::string& value);
  inline void add_creativeview(const char* value);
  inline void add_creativeview(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& creativeview() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_creativeview();

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_expandedwidth();
  inline void clear_has_expandedwidth();
  inline void set_has_expandedheight();
  inline void clear_has_expandedheight();
  inline void set_has_apiframework();
  inline void clear_has_apiframework();
  inline void set_has_assetwidth();
  inline void clear_has_assetwidth();
  inline void set_has_assetheight();
  inline void clear_has_assetheight();
  inline void set_has_adslotid();
  inline void clear_has_adslotid();
  inline void set_has_clickthroughurl();
  inline void clear_has_clickthroughurl();
  inline void set_has_alttext();
  inline void clear_has_alttext();
  inline void set_has_adparameters();
  inline void clear_has_adparameters();
  inline void set_has_staticurl();
  inline void clear_has_staticurl();
  inline void set_has_creativetype();
  inline void clear_has_creativetype();
  inline void set_has_iframeurl();
  inline void clear_has_iframeurl();
  inline void set_has_html();
  inline void clear_has_html();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* width_;
  ::std::string* height_;
  ::std::string* id_;
  ::std::string* expandedwidth_;
  ::std::string* expandedheight_;
  ::std::string* apiframework_;
  ::std::string* assetwidth_;
  ::std::string* assetheight_;
  ::std::string* adslotid_;
  ::std::string* clickthroughurl_;
  ::std::string* alttext_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking > companionclicktracking_;
  ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters* adparameters_;
  ::std::string* staticurl_;
  ::std::string* creativetype_;
  ::std::string* iframeurl_;
  ::std::string* html_;
  ::google::protobuf::RepeatedPtrField< ::std::string> creativeview_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_CompanionCreative_Companion* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad_CompanionCreative : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad_CompanionCreative();
  virtual ~BidderResponse_Ad_CompanionCreative();

  BidderResponse_Ad_CompanionCreative(const BidderResponse_Ad_CompanionCreative& from);

  inline BidderResponse_Ad_CompanionCreative& operator=(const BidderResponse_Ad_CompanionCreative& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad_CompanionCreative& default_instance();

  void Swap(BidderResponse_Ad_CompanionCreative* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad_CompanionCreative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad_CompanionCreative& from);
  void MergeFrom(const BidderResponse_Ad_CompanionCreative& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidderResponse_Ad_CompanionCreative_Companion Companion;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline const ::std::string& sequence() const;
  inline void set_sequence(const ::std::string& value);
  inline void set_sequence(const char* value);
  inline void set_sequence(const char* value, size_t size);
  inline ::std::string* mutable_sequence();
  inline ::std::string* release_sequence();
  inline void set_allocated_sequence(::std::string* sequence);

  // optional string adId = 3;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdIdFieldNumber = 3;
  inline const ::std::string& adid() const;
  inline void set_adid(const ::std::string& value);
  inline void set_adid(const char* value);
  inline void set_adid(const char* value, size_t size);
  inline ::std::string* mutable_adid();
  inline ::std::string* release_adid();
  inline void set_allocated_adid(::std::string* adid);

  // optional string required = 7;
  inline bool has_required() const;
  inline void clear_required();
  static const int kRequiredFieldNumber = 7;
  inline const ::std::string& required() const;
  inline void set_required(const ::std::string& value);
  inline void set_required(const char* value);
  inline void set_required(const char* value, size_t size);
  inline ::std::string* mutable_required();
  inline ::std::string* release_required();
  inline void set_allocated_required(::std::string* required);

  // optional string apiFramework = 5;
  inline bool has_apiframework() const;
  inline void clear_apiframework();
  static const int kApiFrameworkFieldNumber = 5;
  inline const ::std::string& apiframework() const;
  inline void set_apiframework(const ::std::string& value);
  inline void set_apiframework(const char* value);
  inline void set_apiframework(const char* value, size_t size);
  inline ::std::string* mutable_apiframework();
  inline ::std::string* release_apiframework();
  inline void set_allocated_apiframework(::std::string* apiframework);

  // optional string creativeExtension = 6;
  inline bool has_creativeextension() const;
  inline void clear_creativeextension();
  static const int kCreativeExtensionFieldNumber = 6;
  inline const ::std::string& creativeextension() const;
  inline void set_creativeextension(const ::std::string& value);
  inline void set_creativeextension(const char* value);
  inline void set_creativeextension(const char* value, size_t size);
  inline ::std::string* mutable_creativeextension();
  inline ::std::string* release_creativeextension();
  inline void set_allocated_creativeextension(::std::string* creativeextension);

  // repeated .com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion companion = 4;
  inline int companion_size() const;
  inline void clear_companion();
  static const int kCompanionFieldNumber = 4;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion& companion(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion* mutable_companion(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion* add_companion();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion >&
      companion() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion >*
      mutable_companion();

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad.CompanionCreative)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_adid();
  inline void clear_has_adid();
  inline void set_has_required();
  inline void clear_has_required();
  inline void set_has_apiframework();
  inline void clear_has_apiframework();
  inline void set_has_creativeextension();
  inline void clear_has_creativeextension();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* sequence_;
  ::std::string* adid_;
  ::std::string* required_;
  ::std::string* apiframework_;
  ::std::string* creativeextension_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion > companion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad_CompanionCreative* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse_Ad : public ::google::protobuf::Message {
 public:
  BidderResponse_Ad();
  virtual ~BidderResponse_Ad();

  BidderResponse_Ad(const BidderResponse_Ad& from);

  inline BidderResponse_Ad& operator=(const BidderResponse_Ad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse_Ad& default_instance();

  void Swap(BidderResponse_Ad* other);

  // implements Message ----------------------------------------------

  BidderResponse_Ad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse_Ad& from);
  void MergeFrom(const BidderResponse_Ad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidderResponse_Ad_AdSystem AdSystem;
  typedef BidderResponse_Ad_Impression Impression;
  typedef BidderResponse_Ad_LinearCreative LinearCreative;
  typedef BidderResponse_Ad_CompanionCreative CompanionCreative;

  // accessors -------------------------------------------------------

  // optional string price = 1;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 1;
  inline const ::std::string& price() const;
  inline void set_price(const ::std::string& value);
  inline void set_price(const char* value);
  inline void set_price(const char* value, size_t size);
  inline ::std::string* mutable_price();
  inline ::std::string* release_price();
  inline void set_allocated_price(::std::string* price);

  // optional string campaignId = 2;
  inline bool has_campaignid() const;
  inline void clear_campaignid();
  static const int kCampaignIdFieldNumber = 2;
  inline const ::std::string& campaignid() const;
  inline void set_campaignid(const ::std::string& value);
  inline void set_campaignid(const char* value);
  inline void set_campaignid(const char* value, size_t size);
  inline ::std::string* mutable_campaignid();
  inline ::std::string* release_campaignid();
  inline void set_allocated_campaignid(::std::string* campaignid);

  // optional string advertiserName = 3;
  inline bool has_advertisername() const;
  inline void clear_advertisername();
  static const int kAdvertiserNameFieldNumber = 3;
  inline const ::std::string& advertisername() const;
  inline void set_advertisername(const ::std::string& value);
  inline void set_advertisername(const char* value);
  inline void set_advertisername(const char* value, size_t size);
  inline ::std::string* mutable_advertisername();
  inline ::std::string* release_advertisername();
  inline void set_allocated_advertisername(::std::string* advertisername);

  // optional string category = 4;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 4;
  inline const ::std::string& category() const;
  inline void set_category(const ::std::string& value);
  inline void set_category(const char* value);
  inline void set_category(const char* value, size_t size);
  inline ::std::string* mutable_category();
  inline ::std::string* release_category();
  inline void set_allocated_category(::std::string* category);

  // optional bool hasVpaidCreative = 16;
  inline bool has_hasvpaidcreative() const;
  inline void clear_hasvpaidcreative();
  static const int kHasVpaidCreativeFieldNumber = 16;
  inline bool hasvpaidcreative() const;
  inline void set_hasvpaidcreative(bool value);

  // optional string adId = 5;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdIdFieldNumber = 5;
  inline const ::std::string& adid() const;
  inline void set_adid(const ::std::string& value);
  inline void set_adid(const char* value);
  inline void set_adid(const char* value, size_t size);
  inline ::std::string* mutable_adid();
  inline ::std::string* release_adid();
  inline void set_allocated_adid(::std::string* adid);

  // optional string sequence = 20;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 20;
  inline const ::std::string& sequence() const;
  inline void set_sequence(const ::std::string& value);
  inline void set_sequence(const char* value);
  inline void set_sequence(const char* value, size_t size);
  inline ::std::string* mutable_sequence();
  inline ::std::string* release_sequence();
  inline void set_allocated_sequence(::std::string* sequence);

  // optional string type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional .com.rj.protos.msg.BidderResponse.Ad.AdSystem adSystem = 7;
  inline bool has_adsystem() const;
  inline void clear_adsystem();
  static const int kAdSystemFieldNumber = 7;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_AdSystem& adsystem() const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_AdSystem* mutable_adsystem();
  inline ::com::rj::protos::msg::BidderResponse_Ad_AdSystem* release_adsystem();
  inline void set_allocated_adsystem(::com::rj::protos::msg::BidderResponse_Ad_AdSystem* adsystem);

  // optional string adTag = 8;
  inline bool has_adtag() const;
  inline void clear_adtag();
  static const int kAdTagFieldNumber = 8;
  inline const ::std::string& adtag() const;
  inline void set_adtag(const ::std::string& value);
  inline void set_adtag(const char* value);
  inline void set_adtag(const char* value, size_t size);
  inline ::std::string* mutable_adtag();
  inline ::std::string* release_adtag();
  inline void set_allocated_adtag(::std::string* adtag);

  // optional string adDesc = 9;
  inline bool has_addesc() const;
  inline void clear_addesc();
  static const int kAdDescFieldNumber = 9;
  inline const ::std::string& addesc() const;
  inline void set_addesc(const ::std::string& value);
  inline void set_addesc(const char* value);
  inline void set_addesc(const char* value, size_t size);
  inline ::std::string* mutable_addesc();
  inline ::std::string* release_addesc();
  inline void set_allocated_addesc(::std::string* addesc);

  // repeated string adSurvey = 10;
  inline int adsurvey_size() const;
  inline void clear_adsurvey();
  static const int kAdSurveyFieldNumber = 10;
  inline const ::std::string& adsurvey(int index) const;
  inline ::std::string* mutable_adsurvey(int index);
  inline void set_adsurvey(int index, const ::std::string& value);
  inline void set_adsurvey(int index, const char* value);
  inline void set_adsurvey(int index, const char* value, size_t size);
  inline ::std::string* add_adsurvey();
  inline void add_adsurvey(const ::std::string& value);
  inline void add_adsurvey(const char* value);
  inline void add_adsurvey(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& adsurvey() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_adsurvey();

  // optional string adTitle = 17;
  inline bool has_adtitle() const;
  inline void clear_adtitle();
  static const int kAdTitleFieldNumber = 17;
  inline const ::std::string& adtitle() const;
  inline void set_adtitle(const ::std::string& value);
  inline void set_adtitle(const char* value);
  inline void set_adtitle(const char* value, size_t size);
  inline ::std::string* mutable_adtitle();
  inline ::std::string* release_adtitle();
  inline void set_allocated_adtitle(::std::string* adtitle);

  // repeated .com.rj.protos.msg.BidderResponse.Ad.Impression impTrack = 19;
  inline int imptrack_size() const;
  inline void clear_imptrack();
  static const int kImpTrackFieldNumber = 19;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_Impression& imptrack(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_Impression* mutable_imptrack(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_Impression* add_imptrack();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_Impression >&
      imptrack() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_Impression >*
      mutable_imptrack();

  // repeated string errTrack = 12;
  inline int errtrack_size() const;
  inline void clear_errtrack();
  static const int kErrTrackFieldNumber = 12;
  inline const ::std::string& errtrack(int index) const;
  inline ::std::string* mutable_errtrack(int index);
  inline void set_errtrack(int index, const ::std::string& value);
  inline void set_errtrack(int index, const char* value);
  inline void set_errtrack(int index, const char* value, size_t size);
  inline ::std::string* add_errtrack();
  inline void add_errtrack(const ::std::string& value);
  inline void add_errtrack(const char* value);
  inline void add_errtrack(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& errtrack() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_errtrack();

  // repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative linearCreative = 13;
  inline int linearcreative_size() const;
  inline void clear_linearcreative();
  static const int kLinearCreativeFieldNumber = 13;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative& linearcreative(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative* mutable_linearcreative(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative* add_linearcreative();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative >&
      linearcreative() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative >*
      mutable_linearcreative();

  // optional .com.rj.protos.msg.BidderResponse.Ad.CompanionCreative companionCreative = 14;
  inline bool has_companioncreative() const;
  inline void clear_companioncreative();
  static const int kCompanionCreativeFieldNumber = 14;
  inline const ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative& companioncreative() const;
  inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative* mutable_companioncreative();
  inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative* release_companioncreative();
  inline void set_allocated_companioncreative(::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative* companioncreative);

  // repeated string extension = 18;
  inline int extension_size() const;
  inline void clear_extension();
  static const int kExtensionFieldNumber = 18;
  inline const ::std::string& extension(int index) const;
  inline ::std::string* mutable_extension(int index);
  inline void set_extension(int index, const ::std::string& value);
  inline void set_extension(int index, const char* value);
  inline void set_extension(int index, const char* value, size_t size);
  inline ::std::string* add_extension();
  inline void add_extension(const ::std::string& value);
  inline void add_extension(const char* value);
  inline void add_extension(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& extension() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extension();

  // optional string followAdditionalWrappers = 21;
  inline bool has_followadditionalwrappers() const;
  inline void clear_followadditionalwrappers();
  static const int kFollowAdditionalWrappersFieldNumber = 21;
  inline const ::std::string& followadditionalwrappers() const;
  inline void set_followadditionalwrappers(const ::std::string& value);
  inline void set_followadditionalwrappers(const char* value);
  inline void set_followadditionalwrappers(const char* value, size_t size);
  inline ::std::string* mutable_followadditionalwrappers();
  inline ::std::string* release_followadditionalwrappers();
  inline void set_allocated_followadditionalwrappers(::std::string* followadditionalwrappers);

  // optional string allowMultipleAds = 22;
  inline bool has_allowmultipleads() const;
  inline void clear_allowmultipleads();
  static const int kAllowMultipleAdsFieldNumber = 22;
  inline const ::std::string& allowmultipleads() const;
  inline void set_allowmultipleads(const ::std::string& value);
  inline void set_allowmultipleads(const char* value);
  inline void set_allowmultipleads(const char* value, size_t size);
  inline ::std::string* mutable_allowmultipleads();
  inline ::std::string* release_allowmultipleads();
  inline void set_allocated_allowmultipleads(::std::string* allowmultipleads);

  // optional string fallbackOnNoAd = 23;
  inline bool has_fallbackonnoad() const;
  inline void clear_fallbackonnoad();
  static const int kFallbackOnNoAdFieldNumber = 23;
  inline const ::std::string& fallbackonnoad() const;
  inline void set_fallbackonnoad(const ::std::string& value);
  inline void set_fallbackonnoad(const char* value);
  inline void set_fallbackonnoad(const char* value, size_t size);
  inline ::std::string* mutable_fallbackonnoad();
  inline ::std::string* release_fallbackonnoad();
  inline void set_allocated_fallbackonnoad(::std::string* fallbackonnoad);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse.Ad)
 private:
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_campaignid();
  inline void clear_has_campaignid();
  inline void set_has_advertisername();
  inline void clear_has_advertisername();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_hasvpaidcreative();
  inline void clear_has_hasvpaidcreative();
  inline void set_has_adid();
  inline void clear_has_adid();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_adsystem();
  inline void clear_has_adsystem();
  inline void set_has_adtag();
  inline void clear_has_adtag();
  inline void set_has_addesc();
  inline void clear_has_addesc();
  inline void set_has_adtitle();
  inline void clear_has_adtitle();
  inline void set_has_companioncreative();
  inline void clear_has_companioncreative();
  inline void set_has_followadditionalwrappers();
  inline void clear_has_followadditionalwrappers();
  inline void set_has_allowmultipleads();
  inline void clear_has_allowmultipleads();
  inline void set_has_fallbackonnoad();
  inline void clear_has_fallbackonnoad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* price_;
  ::std::string* campaignid_;
  ::std::string* advertisername_;
  ::std::string* category_;
  ::std::string* adid_;
  ::std::string* sequence_;
  ::std::string* type_;
  ::com::rj::protos::msg::BidderResponse_Ad_AdSystem* adsystem_;
  ::std::string* adtag_;
  ::std::string* addesc_;
  ::google::protobuf::RepeatedPtrField< ::std::string> adsurvey_;
  ::std::string* adtitle_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_Impression > imptrack_;
  ::google::protobuf::RepeatedPtrField< ::std::string> errtrack_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative > linearcreative_;
  ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative* companioncreative_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extension_;
  ::std::string* followadditionalwrappers_;
  ::std::string* allowmultipleads_;
  ::std::string* fallbackonnoad_;
  bool hasvpaidcreative_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse_Ad* default_instance_;
};
// -------------------------------------------------------------------

class BidderResponse : public ::google::protobuf::Message {
 public:
  BidderResponse();
  virtual ~BidderResponse();

  BidderResponse(const BidderResponse& from);

  inline BidderResponse& operator=(const BidderResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidderResponse& default_instance();

  void Swap(BidderResponse* other);

  // implements Message ----------------------------------------------

  BidderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidderResponse& from);
  void MergeFrom(const BidderResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidderResponse_Ad Ad;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string bidderId = 2;
  inline bool has_bidderid() const;
  inline void clear_bidderid();
  static const int kBidderIdFieldNumber = 2;
  inline const ::std::string& bidderid() const;
  inline void set_bidderid(const ::std::string& value);
  inline void set_bidderid(const char* value);
  inline void set_bidderid(const char* value, size_t size);
  inline ::std::string* mutable_bidderid();
  inline ::std::string* release_bidderid();
  inline void set_allocated_bidderid(::std::string* bidderid);

  // repeated .com.rj.protos.msg.BidderResponse.Ad ads = 3;
  inline int ads_size() const;
  inline void clear_ads();
  static const int kAdsFieldNumber = 3;
  inline const ::com::rj::protos::msg::BidderResponse_Ad& ads(int index) const;
  inline ::com::rj::protos::msg::BidderResponse_Ad* mutable_ads(int index);
  inline ::com::rj::protos::msg::BidderResponse_Ad* add_ads();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad >&
      ads() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad >*
      mutable_ads();

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.BidderResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bidderid();
  inline void clear_has_bidderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* bidderid_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad > ads_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_AssignDesc_AdBidderResponseTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdBidderResponseTemplate_2eproto();

  void InitAsDefaultInstance();
  static BidderResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BidderResponse_Ad_AdSystem

// optional string sys = 1;
inline bool BidderResponse_Ad_AdSystem::has_sys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_AdSystem::set_has_sys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_AdSystem::clear_has_sys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_AdSystem::clear_sys() {
  if (sys_ != &::google::protobuf::internal::kEmptyString) {
    sys_->clear();
  }
  clear_has_sys();
}
inline const ::std::string& BidderResponse_Ad_AdSystem::sys() const {
  return *sys_;
}
inline void BidderResponse_Ad_AdSystem::set_sys(const ::std::string& value) {
  set_has_sys();
  if (sys_ == &::google::protobuf::internal::kEmptyString) {
    sys_ = new ::std::string;
  }
  sys_->assign(value);
}
inline void BidderResponse_Ad_AdSystem::set_sys(const char* value) {
  set_has_sys();
  if (sys_ == &::google::protobuf::internal::kEmptyString) {
    sys_ = new ::std::string;
  }
  sys_->assign(value);
}
inline void BidderResponse_Ad_AdSystem::set_sys(const char* value, size_t size) {
  set_has_sys();
  if (sys_ == &::google::protobuf::internal::kEmptyString) {
    sys_ = new ::std::string;
  }
  sys_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_AdSystem::mutable_sys() {
  set_has_sys();
  if (sys_ == &::google::protobuf::internal::kEmptyString) {
    sys_ = new ::std::string;
  }
  return sys_;
}
inline ::std::string* BidderResponse_Ad_AdSystem::release_sys() {
  clear_has_sys();
  if (sys_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sys_;
    sys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_AdSystem::set_allocated_sys(::std::string* sys) {
  if (sys_ != &::google::protobuf::internal::kEmptyString) {
    delete sys_;
  }
  if (sys) {
    set_has_sys();
    sys_ = sys;
  } else {
    clear_has_sys();
    sys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string version = 2;
inline bool BidderResponse_Ad_AdSystem::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_AdSystem::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_AdSystem::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_AdSystem::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& BidderResponse_Ad_AdSystem::version() const {
  return *version_;
}
inline void BidderResponse_Ad_AdSystem::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void BidderResponse_Ad_AdSystem::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void BidderResponse_Ad_AdSystem::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_AdSystem::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* BidderResponse_Ad_AdSystem::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_AdSystem::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_Impression

// optional string url = 1;
inline bool BidderResponse_Ad_Impression::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_Impression::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_Impression::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_Impression::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidderResponse_Ad_Impression::url() const {
  return *url_;
}
inline void BidderResponse_Ad_Impression::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_Impression::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_Impression::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_Impression::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BidderResponse_Ad_Impression::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_Impression::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool BidderResponse_Ad_Impression::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_Impression::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_Impression::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_Impression::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_Impression::id() const {
  return *id_;
}
inline void BidderResponse_Ad_Impression::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_Impression::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_Impression::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_Impression::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_Impression::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_Impression::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_Video

// optional string mime = 1;
inline bool BidderResponse_Ad_LinearCreative_Video::has_mime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_mime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_mime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_mime() {
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    mime_->clear();
  }
  clear_has_mime();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::mime() const {
  return *mime_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_mime(const ::std::string& value) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_mime(const char* value) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_mime(const char* value, size_t size) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_mime() {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  return mime_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_mime() {
  clear_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mime_;
    mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_mime(::std::string* mime) {
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    delete mime_;
  }
  if (mime) {
    set_has_mime();
    mime_ = mime;
  } else {
    clear_has_mime();
    mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string assetUrl = 2;
inline bool BidderResponse_Ad_LinearCreative_Video::has_asseturl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_asseturl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_asseturl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_asseturl() {
  if (asseturl_ != &::google::protobuf::internal::kEmptyString) {
    asseturl_->clear();
  }
  clear_has_asseturl();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::asseturl() const {
  return *asseturl_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_asseturl(const ::std::string& value) {
  set_has_asseturl();
  if (asseturl_ == &::google::protobuf::internal::kEmptyString) {
    asseturl_ = new ::std::string;
  }
  asseturl_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_asseturl(const char* value) {
  set_has_asseturl();
  if (asseturl_ == &::google::protobuf::internal::kEmptyString) {
    asseturl_ = new ::std::string;
  }
  asseturl_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_asseturl(const char* value, size_t size) {
  set_has_asseturl();
  if (asseturl_ == &::google::protobuf::internal::kEmptyString) {
    asseturl_ = new ::std::string;
  }
  asseturl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_asseturl() {
  set_has_asseturl();
  if (asseturl_ == &::google::protobuf::internal::kEmptyString) {
    asseturl_ = new ::std::string;
  }
  return asseturl_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_asseturl() {
  clear_has_asseturl();
  if (asseturl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = asseturl_;
    asseturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_asseturl(::std::string* asseturl) {
  if (asseturl_ != &::google::protobuf::internal::kEmptyString) {
    delete asseturl_;
  }
  if (asseturl) {
    set_has_asseturl();
    asseturl_ = asseturl;
  } else {
    clear_has_asseturl();
    asseturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string width = 3;
inline bool BidderResponse_Ad_LinearCreative_Video::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_width() {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    width_->clear();
  }
  clear_has_width();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::width() const {
  return *width_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_width(const ::std::string& value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_width(const char* value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_width(const char* value, size_t size) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_width() {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  return width_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_width() {
  clear_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = width_;
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_width(::std::string* width) {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    delete width_;
  }
  if (width) {
    set_has_width();
    width_ = width;
  } else {
    clear_has_width();
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string height = 4;
inline bool BidderResponse_Ad_LinearCreative_Video::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_height() {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    height_->clear();
  }
  clear_has_height();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::height() const {
  return *height_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_height(const ::std::string& value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_height(const char* value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_height(const char* value, size_t size) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_height() {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  return height_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_height() {
  clear_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = height_;
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_height(::std::string* height) {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    delete height_;
  }
  if (height) {
    set_has_height();
    height_ = height;
  } else {
    clear_has_height();
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string delivery = 5;
inline bool BidderResponse_Ad_LinearCreative_Video::has_delivery() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_delivery() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_delivery() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_delivery() {
  if (delivery_ != &::google::protobuf::internal::kEmptyString) {
    delivery_->clear();
  }
  clear_has_delivery();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::delivery() const {
  return *delivery_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_delivery(const ::std::string& value) {
  set_has_delivery();
  if (delivery_ == &::google::protobuf::internal::kEmptyString) {
    delivery_ = new ::std::string;
  }
  delivery_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_delivery(const char* value) {
  set_has_delivery();
  if (delivery_ == &::google::protobuf::internal::kEmptyString) {
    delivery_ = new ::std::string;
  }
  delivery_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_delivery(const char* value, size_t size) {
  set_has_delivery();
  if (delivery_ == &::google::protobuf::internal::kEmptyString) {
    delivery_ = new ::std::string;
  }
  delivery_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_delivery() {
  set_has_delivery();
  if (delivery_ == &::google::protobuf::internal::kEmptyString) {
    delivery_ = new ::std::string;
  }
  return delivery_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_delivery() {
  clear_has_delivery();
  if (delivery_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = delivery_;
    delivery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_delivery(::std::string* delivery) {
  if (delivery_ != &::google::protobuf::internal::kEmptyString) {
    delete delivery_;
  }
  if (delivery) {
    set_has_delivery();
    delivery_ = delivery;
  } else {
    clear_has_delivery();
    delivery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bitrate = 6;
inline bool BidderResponse_Ad_LinearCreative_Video::has_bitrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_bitrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_bitrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_bitrate() {
  if (bitrate_ != &::google::protobuf::internal::kEmptyString) {
    bitrate_->clear();
  }
  clear_has_bitrate();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::bitrate() const {
  return *bitrate_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_bitrate(const ::std::string& value) {
  set_has_bitrate();
  if (bitrate_ == &::google::protobuf::internal::kEmptyString) {
    bitrate_ = new ::std::string;
  }
  bitrate_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_bitrate(const char* value) {
  set_has_bitrate();
  if (bitrate_ == &::google::protobuf::internal::kEmptyString) {
    bitrate_ = new ::std::string;
  }
  bitrate_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_bitrate(const char* value, size_t size) {
  set_has_bitrate();
  if (bitrate_ == &::google::protobuf::internal::kEmptyString) {
    bitrate_ = new ::std::string;
  }
  bitrate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_bitrate() {
  set_has_bitrate();
  if (bitrate_ == &::google::protobuf::internal::kEmptyString) {
    bitrate_ = new ::std::string;
  }
  return bitrate_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_bitrate() {
  clear_has_bitrate();
  if (bitrate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bitrate_;
    bitrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_bitrate(::std::string* bitrate) {
  if (bitrate_ != &::google::protobuf::internal::kEmptyString) {
    delete bitrate_;
  }
  if (bitrate) {
    set_has_bitrate();
    bitrate_ = bitrate;
  } else {
    clear_has_bitrate();
    bitrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string maintainAspectRatio = 7;
inline bool BidderResponse_Ad_LinearCreative_Video::has_maintainaspectratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_maintainaspectratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_maintainaspectratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_maintainaspectratio() {
  if (maintainaspectratio_ != &::google::protobuf::internal::kEmptyString) {
    maintainaspectratio_->clear();
  }
  clear_has_maintainaspectratio();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::maintainaspectratio() const {
  return *maintainaspectratio_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_maintainaspectratio(const ::std::string& value) {
  set_has_maintainaspectratio();
  if (maintainaspectratio_ == &::google::protobuf::internal::kEmptyString) {
    maintainaspectratio_ = new ::std::string;
  }
  maintainaspectratio_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_maintainaspectratio(const char* value) {
  set_has_maintainaspectratio();
  if (maintainaspectratio_ == &::google::protobuf::internal::kEmptyString) {
    maintainaspectratio_ = new ::std::string;
  }
  maintainaspectratio_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_maintainaspectratio(const char* value, size_t size) {
  set_has_maintainaspectratio();
  if (maintainaspectratio_ == &::google::protobuf::internal::kEmptyString) {
    maintainaspectratio_ = new ::std::string;
  }
  maintainaspectratio_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_maintainaspectratio() {
  set_has_maintainaspectratio();
  if (maintainaspectratio_ == &::google::protobuf::internal::kEmptyString) {
    maintainaspectratio_ = new ::std::string;
  }
  return maintainaspectratio_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_maintainaspectratio() {
  clear_has_maintainaspectratio();
  if (maintainaspectratio_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = maintainaspectratio_;
    maintainaspectratio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_maintainaspectratio(::std::string* maintainaspectratio) {
  if (maintainaspectratio_ != &::google::protobuf::internal::kEmptyString) {
    delete maintainaspectratio_;
  }
  if (maintainaspectratio) {
    set_has_maintainaspectratio();
    maintainaspectratio_ = maintainaspectratio;
  } else {
    clear_has_maintainaspectratio();
    maintainaspectratio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 8;
inline bool BidderResponse_Ad_LinearCreative_Video::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::id() const {
  return *id_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string scalable = 9;
inline bool BidderResponse_Ad_LinearCreative_Video::has_scalable() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_scalable() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_scalable() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_scalable() {
  if (scalable_ != &::google::protobuf::internal::kEmptyString) {
    scalable_->clear();
  }
  clear_has_scalable();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::scalable() const {
  return *scalable_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_scalable(const ::std::string& value) {
  set_has_scalable();
  if (scalable_ == &::google::protobuf::internal::kEmptyString) {
    scalable_ = new ::std::string;
  }
  scalable_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_scalable(const char* value) {
  set_has_scalable();
  if (scalable_ == &::google::protobuf::internal::kEmptyString) {
    scalable_ = new ::std::string;
  }
  scalable_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_scalable(const char* value, size_t size) {
  set_has_scalable();
  if (scalable_ == &::google::protobuf::internal::kEmptyString) {
    scalable_ = new ::std::string;
  }
  scalable_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_scalable() {
  set_has_scalable();
  if (scalable_ == &::google::protobuf::internal::kEmptyString) {
    scalable_ = new ::std::string;
  }
  return scalable_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_scalable() {
  clear_has_scalable();
  if (scalable_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scalable_;
    scalable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_scalable(::std::string* scalable) {
  if (scalable_ != &::google::protobuf::internal::kEmptyString) {
    delete scalable_;
  }
  if (scalable) {
    set_has_scalable();
    scalable_ = scalable;
  } else {
    clear_has_scalable();
    scalable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string apiFramework = 10;
inline bool BidderResponse_Ad_LinearCreative_Video::has_apiframework() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_apiframework() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_apiframework() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_apiframework() {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    apiframework_->clear();
  }
  clear_has_apiframework();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::apiframework() const {
  return *apiframework_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_apiframework(const ::std::string& value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_apiframework(const char* value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_apiframework(const char* value, size_t size) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_apiframework() {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  return apiframework_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_apiframework() {
  clear_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apiframework_;
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_apiframework(::std::string* apiframework) {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    delete apiframework_;
  }
  if (apiframework) {
    set_has_apiframework();
    apiframework_ = apiframework;
  } else {
    clear_has_apiframework();
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string codec = 11;
inline bool BidderResponse_Ad_LinearCreative_Video::has_codec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_codec() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_codec() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_codec() {
  if (codec_ != &::google::protobuf::internal::kEmptyString) {
    codec_->clear();
  }
  clear_has_codec();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::codec() const {
  return *codec_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_codec(const ::std::string& value) {
  set_has_codec();
  if (codec_ == &::google::protobuf::internal::kEmptyString) {
    codec_ = new ::std::string;
  }
  codec_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_codec(const char* value) {
  set_has_codec();
  if (codec_ == &::google::protobuf::internal::kEmptyString) {
    codec_ = new ::std::string;
  }
  codec_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_codec(const char* value, size_t size) {
  set_has_codec();
  if (codec_ == &::google::protobuf::internal::kEmptyString) {
    codec_ = new ::std::string;
  }
  codec_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_codec() {
  set_has_codec();
  if (codec_ == &::google::protobuf::internal::kEmptyString) {
    codec_ = new ::std::string;
  }
  return codec_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_codec() {
  clear_has_codec();
  if (codec_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = codec_;
    codec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_codec(::std::string* codec) {
  if (codec_ != &::google::protobuf::internal::kEmptyString) {
    delete codec_;
  }
  if (codec) {
    set_has_codec();
    codec_ = codec;
  } else {
    clear_has_codec();
    codec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string minBitrate = 12;
inline bool BidderResponse_Ad_LinearCreative_Video::has_minbitrate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_minbitrate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_minbitrate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_minbitrate() {
  if (minbitrate_ != &::google::protobuf::internal::kEmptyString) {
    minbitrate_->clear();
  }
  clear_has_minbitrate();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::minbitrate() const {
  return *minbitrate_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_minbitrate(const ::std::string& value) {
  set_has_minbitrate();
  if (minbitrate_ == &::google::protobuf::internal::kEmptyString) {
    minbitrate_ = new ::std::string;
  }
  minbitrate_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_minbitrate(const char* value) {
  set_has_minbitrate();
  if (minbitrate_ == &::google::protobuf::internal::kEmptyString) {
    minbitrate_ = new ::std::string;
  }
  minbitrate_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_minbitrate(const char* value, size_t size) {
  set_has_minbitrate();
  if (minbitrate_ == &::google::protobuf::internal::kEmptyString) {
    minbitrate_ = new ::std::string;
  }
  minbitrate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_minbitrate() {
  set_has_minbitrate();
  if (minbitrate_ == &::google::protobuf::internal::kEmptyString) {
    minbitrate_ = new ::std::string;
  }
  return minbitrate_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_minbitrate() {
  clear_has_minbitrate();
  if (minbitrate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = minbitrate_;
    minbitrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_minbitrate(::std::string* minbitrate) {
  if (minbitrate_ != &::google::protobuf::internal::kEmptyString) {
    delete minbitrate_;
  }
  if (minbitrate) {
    set_has_minbitrate();
    minbitrate_ = minbitrate;
  } else {
    clear_has_minbitrate();
    minbitrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string maxBitrate = 13;
inline bool BidderResponse_Ad_LinearCreative_Video::has_maxbitrate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_has_maxbitrate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_has_maxbitrate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidderResponse_Ad_LinearCreative_Video::clear_maxbitrate() {
  if (maxbitrate_ != &::google::protobuf::internal::kEmptyString) {
    maxbitrate_->clear();
  }
  clear_has_maxbitrate();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Video::maxbitrate() const {
  return *maxbitrate_;
}
inline void BidderResponse_Ad_LinearCreative_Video::set_maxbitrate(const ::std::string& value) {
  set_has_maxbitrate();
  if (maxbitrate_ == &::google::protobuf::internal::kEmptyString) {
    maxbitrate_ = new ::std::string;
  }
  maxbitrate_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_maxbitrate(const char* value) {
  set_has_maxbitrate();
  if (maxbitrate_ == &::google::protobuf::internal::kEmptyString) {
    maxbitrate_ = new ::std::string;
  }
  maxbitrate_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Video::set_maxbitrate(const char* value, size_t size) {
  set_has_maxbitrate();
  if (maxbitrate_ == &::google::protobuf::internal::kEmptyString) {
    maxbitrate_ = new ::std::string;
  }
  maxbitrate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::mutable_maxbitrate() {
  set_has_maxbitrate();
  if (maxbitrate_ == &::google::protobuf::internal::kEmptyString) {
    maxbitrate_ = new ::std::string;
  }
  return maxbitrate_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Video::release_maxbitrate() {
  clear_has_maxbitrate();
  if (maxbitrate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = maxbitrate_;
    maxbitrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Video::set_allocated_maxbitrate(::std::string* maxbitrate) {
  if (maxbitrate_ != &::google::protobuf::internal::kEmptyString) {
    delete maxbitrate_;
  }
  if (maxbitrate) {
    set_has_maxbitrate();
    maxbitrate_ = maxbitrate;
  } else {
    clear_has_maxbitrate();
    maxbitrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_LinearTrack_Progress

// optional string offset = 1;
inline bool BidderResponse_Ad_LinearCreative_LinearTrack_Progress::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::clear_offset() {
  if (offset_ != &::google::protobuf::internal::kEmptyString) {
    offset_->clear();
  }
  clear_has_offset();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack_Progress::offset() const {
  return *offset_;
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_offset(const ::std::string& value) {
  set_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    offset_ = new ::std::string;
  }
  offset_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_offset(const char* value) {
  set_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    offset_ = new ::std::string;
  }
  offset_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_offset(const char* value, size_t size) {
  set_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    offset_ = new ::std::string;
  }
  offset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack_Progress::mutable_offset() {
  set_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    offset_ = new ::std::string;
  }
  return offset_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack_Progress::release_offset() {
  clear_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = offset_;
    offset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_allocated_offset(::std::string* offset) {
  if (offset_ != &::google::protobuf::internal::kEmptyString) {
    delete offset_;
  }
  if (offset) {
    set_has_offset();
    offset_ = offset;
  } else {
    clear_has_offset();
    offset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string url = 2;
inline bool BidderResponse_Ad_LinearCreative_LinearTrack_Progress::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack_Progress::url() const {
  return *url_;
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack_Progress::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack_Progress::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack_Progress::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_LinearTrack

// repeated string creativeView = 1;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::creativeview_size() const {
  return creativeview_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_creativeview() {
  creativeview_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::creativeview(int index) const {
  return creativeview_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_creativeview(int index) {
  return creativeview_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_creativeview(int index, const ::std::string& value) {
  creativeview_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_creativeview(int index, const char* value) {
  creativeview_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_creativeview(int index, const char* value, size_t size) {
  creativeview_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_creativeview() {
  return creativeview_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_creativeview(const ::std::string& value) {
  creativeview_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_creativeview(const char* value) {
  creativeview_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_creativeview(const char* value, size_t size) {
  creativeview_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::creativeview() const {
  return creativeview_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_creativeview() {
  return &creativeview_;
}

// repeated string start = 2;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::start_size() const {
  return start_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_start() {
  start_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::start(int index) const {
  return start_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_start(int index) {
  return start_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_start(int index, const ::std::string& value) {
  start_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_start(int index, const char* value) {
  start_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_start(int index, const char* value, size_t size) {
  start_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_start() {
  return start_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_start(const ::std::string& value) {
  start_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_start(const char* value) {
  start_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_start(const char* value, size_t size) {
  start_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::start() const {
  return start_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_start() {
  return &start_;
}

// repeated string firstQuartile = 3;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::firstquartile_size() const {
  return firstquartile_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_firstquartile() {
  firstquartile_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::firstquartile(int index) const {
  return firstquartile_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_firstquartile(int index) {
  return firstquartile_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_firstquartile(int index, const ::std::string& value) {
  firstquartile_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_firstquartile(int index, const char* value) {
  firstquartile_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_firstquartile(int index, const char* value, size_t size) {
  firstquartile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_firstquartile() {
  return firstquartile_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_firstquartile(const ::std::string& value) {
  firstquartile_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_firstquartile(const char* value) {
  firstquartile_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_firstquartile(const char* value, size_t size) {
  firstquartile_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::firstquartile() const {
  return firstquartile_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_firstquartile() {
  return &firstquartile_;
}

// repeated string midpoint = 4;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::midpoint_size() const {
  return midpoint_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_midpoint() {
  midpoint_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::midpoint(int index) const {
  return midpoint_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_midpoint(int index) {
  return midpoint_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_midpoint(int index, const ::std::string& value) {
  midpoint_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_midpoint(int index, const char* value) {
  midpoint_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_midpoint(int index, const char* value, size_t size) {
  midpoint_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_midpoint() {
  return midpoint_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_midpoint(const ::std::string& value) {
  midpoint_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_midpoint(const char* value) {
  midpoint_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_midpoint(const char* value, size_t size) {
  midpoint_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::midpoint() const {
  return midpoint_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_midpoint() {
  return &midpoint_;
}

// repeated string thirdQuartile = 5;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::thirdquartile_size() const {
  return thirdquartile_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_thirdquartile() {
  thirdquartile_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::thirdquartile(int index) const {
  return thirdquartile_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_thirdquartile(int index) {
  return thirdquartile_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_thirdquartile(int index, const ::std::string& value) {
  thirdquartile_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_thirdquartile(int index, const char* value) {
  thirdquartile_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_thirdquartile(int index, const char* value, size_t size) {
  thirdquartile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_thirdquartile() {
  return thirdquartile_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_thirdquartile(const ::std::string& value) {
  thirdquartile_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_thirdquartile(const char* value) {
  thirdquartile_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_thirdquartile(const char* value, size_t size) {
  thirdquartile_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::thirdquartile() const {
  return thirdquartile_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_thirdquartile() {
  return &thirdquartile_;
}

// repeated string complete = 6;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::complete_size() const {
  return complete_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_complete() {
  complete_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::complete(int index) const {
  return complete_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_complete(int index) {
  return complete_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_complete(int index, const ::std::string& value) {
  complete_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_complete(int index, const char* value) {
  complete_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_complete(int index, const char* value, size_t size) {
  complete_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_complete() {
  return complete_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_complete(const ::std::string& value) {
  complete_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_complete(const char* value) {
  complete_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_complete(const char* value, size_t size) {
  complete_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::complete() const {
  return complete_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_complete() {
  return &complete_;
}

// repeated string mute = 7;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::mute_size() const {
  return mute_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_mute() {
  mute_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::mute(int index) const {
  return mute_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_mute(int index) {
  return mute_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_mute(int index, const ::std::string& value) {
  mute_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_mute(int index, const char* value) {
  mute_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_mute(int index, const char* value, size_t size) {
  mute_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_mute() {
  return mute_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_mute(const ::std::string& value) {
  mute_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_mute(const char* value) {
  mute_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_mute(const char* value, size_t size) {
  mute_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::mute() const {
  return mute_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_mute() {
  return &mute_;
}

// repeated string unmute = 8;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::unmute_size() const {
  return unmute_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_unmute() {
  unmute_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::unmute(int index) const {
  return unmute_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_unmute(int index) {
  return unmute_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_unmute(int index, const ::std::string& value) {
  unmute_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_unmute(int index, const char* value) {
  unmute_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_unmute(int index, const char* value, size_t size) {
  unmute_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_unmute() {
  return unmute_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_unmute(const ::std::string& value) {
  unmute_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_unmute(const char* value) {
  unmute_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_unmute(const char* value, size_t size) {
  unmute_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::unmute() const {
  return unmute_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_unmute() {
  return &unmute_;
}

// repeated string pause = 9;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::pause_size() const {
  return pause_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_pause() {
  pause_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::pause(int index) const {
  return pause_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_pause(int index) {
  return pause_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_pause(int index, const ::std::string& value) {
  pause_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_pause(int index, const char* value) {
  pause_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_pause(int index, const char* value, size_t size) {
  pause_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_pause() {
  return pause_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_pause(const ::std::string& value) {
  pause_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_pause(const char* value) {
  pause_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_pause(const char* value, size_t size) {
  pause_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::pause() const {
  return pause_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_pause() {
  return &pause_;
}

// repeated string rewind = 10;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::rewind_size() const {
  return rewind_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_rewind() {
  rewind_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::rewind(int index) const {
  return rewind_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_rewind(int index) {
  return rewind_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_rewind(int index, const ::std::string& value) {
  rewind_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_rewind(int index, const char* value) {
  rewind_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_rewind(int index, const char* value, size_t size) {
  rewind_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_rewind() {
  return rewind_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_rewind(const ::std::string& value) {
  rewind_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_rewind(const char* value) {
  rewind_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_rewind(const char* value, size_t size) {
  rewind_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::rewind() const {
  return rewind_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_rewind() {
  return &rewind_;
}

// repeated string resume = 11;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::resume_size() const {
  return resume_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_resume() {
  resume_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::resume(int index) const {
  return resume_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_resume(int index) {
  return resume_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_resume(int index, const ::std::string& value) {
  resume_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_resume(int index, const char* value) {
  resume_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_resume(int index, const char* value, size_t size) {
  resume_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_resume() {
  return resume_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_resume(const ::std::string& value) {
  resume_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_resume(const char* value) {
  resume_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_resume(const char* value, size_t size) {
  resume_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::resume() const {
  return resume_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_resume() {
  return &resume_;
}

// repeated string fullscreen = 12;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::fullscreen_size() const {
  return fullscreen_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_fullscreen() {
  fullscreen_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::fullscreen(int index) const {
  return fullscreen_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_fullscreen(int index) {
  return fullscreen_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_fullscreen(int index, const ::std::string& value) {
  fullscreen_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_fullscreen(int index, const char* value) {
  fullscreen_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_fullscreen(int index, const char* value, size_t size) {
  fullscreen_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_fullscreen() {
  return fullscreen_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_fullscreen(const ::std::string& value) {
  fullscreen_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_fullscreen(const char* value) {
  fullscreen_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_fullscreen(const char* value, size_t size) {
  fullscreen_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::fullscreen() const {
  return fullscreen_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_fullscreen() {
  return &fullscreen_;
}

// repeated string expand = 13;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::expand_size() const {
  return expand_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_expand() {
  expand_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::expand(int index) const {
  return expand_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_expand(int index) {
  return expand_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_expand(int index, const ::std::string& value) {
  expand_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_expand(int index, const char* value) {
  expand_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_expand(int index, const char* value, size_t size) {
  expand_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_expand() {
  return expand_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_expand(const ::std::string& value) {
  expand_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_expand(const char* value) {
  expand_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_expand(const char* value, size_t size) {
  expand_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::expand() const {
  return expand_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_expand() {
  return &expand_;
}

// repeated string collapse = 14;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::collapse_size() const {
  return collapse_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_collapse() {
  collapse_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::collapse(int index) const {
  return collapse_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_collapse(int index) {
  return collapse_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_collapse(int index, const ::std::string& value) {
  collapse_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_collapse(int index, const char* value) {
  collapse_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_collapse(int index, const char* value, size_t size) {
  collapse_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_collapse() {
  return collapse_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_collapse(const ::std::string& value) {
  collapse_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_collapse(const char* value) {
  collapse_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_collapse(const char* value, size_t size) {
  collapse_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::collapse() const {
  return collapse_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_collapse() {
  return &collapse_;
}

// repeated string acceptInvitation = 15;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::acceptinvitation_size() const {
  return acceptinvitation_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_acceptinvitation() {
  acceptinvitation_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::acceptinvitation(int index) const {
  return acceptinvitation_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_acceptinvitation(int index) {
  return acceptinvitation_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_acceptinvitation(int index, const ::std::string& value) {
  acceptinvitation_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_acceptinvitation(int index, const char* value) {
  acceptinvitation_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_acceptinvitation(int index, const char* value, size_t size) {
  acceptinvitation_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_acceptinvitation() {
  return acceptinvitation_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_acceptinvitation(const ::std::string& value) {
  acceptinvitation_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_acceptinvitation(const char* value) {
  acceptinvitation_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_acceptinvitation(const char* value, size_t size) {
  acceptinvitation_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::acceptinvitation() const {
  return acceptinvitation_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_acceptinvitation() {
  return &acceptinvitation_;
}

// repeated string close = 16;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::close_size() const {
  return close_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_close() {
  close_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::close(int index) const {
  return close_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_close(int index) {
  return close_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_close(int index, const ::std::string& value) {
  close_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_close(int index, const char* value) {
  close_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_close(int index, const char* value, size_t size) {
  close_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_close() {
  return close_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_close(const ::std::string& value) {
  close_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_close(const char* value) {
  close_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_close(const char* value, size_t size) {
  close_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::close() const {
  return close_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_close() {
  return &close_;
}

// repeated string closeLinear = 22;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::closelinear_size() const {
  return closelinear_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_closelinear() {
  closelinear_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::closelinear(int index) const {
  return closelinear_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_closelinear(int index) {
  return closelinear_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_closelinear(int index, const ::std::string& value) {
  closelinear_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_closelinear(int index, const char* value) {
  closelinear_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_closelinear(int index, const char* value, size_t size) {
  closelinear_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_closelinear() {
  return closelinear_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_closelinear(const ::std::string& value) {
  closelinear_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_closelinear(const char* value) {
  closelinear_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_closelinear(const char* value, size_t size) {
  closelinear_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::closelinear() const {
  return closelinear_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_closelinear() {
  return &closelinear_;
}

// repeated string exitFullscreen = 17;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::exitfullscreen_size() const {
  return exitfullscreen_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_exitfullscreen() {
  exitfullscreen_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::exitfullscreen(int index) const {
  return exitfullscreen_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_exitfullscreen(int index) {
  return exitfullscreen_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_exitfullscreen(int index, const ::std::string& value) {
  exitfullscreen_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_exitfullscreen(int index, const char* value) {
  exitfullscreen_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_exitfullscreen(int index, const char* value, size_t size) {
  exitfullscreen_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_exitfullscreen() {
  return exitfullscreen_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_exitfullscreen(const ::std::string& value) {
  exitfullscreen_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_exitfullscreen(const char* value) {
  exitfullscreen_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_exitfullscreen(const char* value, size_t size) {
  exitfullscreen_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::exitfullscreen() const {
  return exitfullscreen_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_exitfullscreen() {
  return &exitfullscreen_;
}

// repeated string acceptInvitationLinear = 18;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::acceptinvitationlinear_size() const {
  return acceptinvitationlinear_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_acceptinvitationlinear() {
  acceptinvitationlinear_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::acceptinvitationlinear(int index) const {
  return acceptinvitationlinear_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_acceptinvitationlinear(int index) {
  return acceptinvitationlinear_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_acceptinvitationlinear(int index, const ::std::string& value) {
  acceptinvitationlinear_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_acceptinvitationlinear(int index, const char* value) {
  acceptinvitationlinear_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_acceptinvitationlinear(int index, const char* value, size_t size) {
  acceptinvitationlinear_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_acceptinvitationlinear() {
  return acceptinvitationlinear_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_acceptinvitationlinear(const ::std::string& value) {
  acceptinvitationlinear_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_acceptinvitationlinear(const char* value) {
  acceptinvitationlinear_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_acceptinvitationlinear(const char* value, size_t size) {
  acceptinvitationlinear_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::acceptinvitationlinear() const {
  return acceptinvitationlinear_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_acceptinvitationlinear() {
  return &acceptinvitationlinear_;
}

// repeated string skip = 19;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::skip_size() const {
  return skip_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_skip() {
  skip_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_LinearTrack::skip(int index) const {
  return skip_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_skip(int index) {
  return skip_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_skip(int index, const ::std::string& value) {
  skip_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_skip(int index, const char* value) {
  skip_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::set_skip(int index, const char* value, size_t size) {
  skip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_LinearTrack::add_skip() {
  return skip_.Add();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_skip(const ::std::string& value) {
  skip_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_skip(const char* value) {
  skip_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::add_skip(const char* value, size_t size) {
  skip_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_LinearTrack::skip() const {
  return skip_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_skip() {
  return &skip_;
}

// repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.LinearTrack.Progress progress = 23;
inline int BidderResponse_Ad_LinearCreative_LinearTrack::progress_size() const {
  return progress_.size();
}
inline void BidderResponse_Ad_LinearCreative_LinearTrack::clear_progress() {
  progress_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress& BidderResponse_Ad_LinearCreative_LinearTrack::progress(int index) const {
  return progress_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress* BidderResponse_Ad_LinearCreative_LinearTrack::mutable_progress(int index) {
  return progress_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress* BidderResponse_Ad_LinearCreative_LinearTrack::add_progress() {
  return progress_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress >&
BidderResponse_Ad_LinearCreative_LinearTrack::progress() const {
  return progress_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack_Progress >*
BidderResponse_Ad_LinearCreative_LinearTrack::mutable_progress() {
  return &progress_;
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking

// optional string url = 1;
inline bool BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::url() const {
  return *url_;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::id() const {
  return *id_;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough

// optional string url = 1;
inline bool BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::url() const {
  return *url_;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::id() const {
  return *id_;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick

// optional string url = 1;
inline bool BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::url() const {
  return *url_;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::id() const {
  return *id_;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_VideoClicks

// repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.ClickTracking clickTracking = 1;
inline int BidderResponse_Ad_LinearCreative_VideoClicks::clicktracking_size() const {
  return clicktracking_.size();
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks::clear_clicktracking() {
  clicktracking_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking& BidderResponse_Ad_LinearCreative_VideoClicks::clicktracking(int index) const {
  return clicktracking_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking* BidderResponse_Ad_LinearCreative_VideoClicks::mutable_clicktracking(int index) {
  return clicktracking_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking* BidderResponse_Ad_LinearCreative_VideoClicks::add_clicktracking() {
  return clicktracking_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking >&
BidderResponse_Ad_LinearCreative_VideoClicks::clicktracking() const {
  return clicktracking_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickTracking >*
BidderResponse_Ad_LinearCreative_VideoClicks::mutable_clicktracking() {
  return &clicktracking_;
}

// optional .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.ClickThrough clickThrough = 2;
inline bool BidderResponse_Ad_LinearCreative_VideoClicks::has_clickthrough() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks::set_has_clickthrough() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks::clear_has_clickthrough() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks::clear_clickthrough() {
  if (clickthrough_ != NULL) clickthrough_->::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough::Clear();
  clear_has_clickthrough();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough& BidderResponse_Ad_LinearCreative_VideoClicks::clickthrough() const {
  return clickthrough_ != NULL ? *clickthrough_ : *default_instance_->clickthrough_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* BidderResponse_Ad_LinearCreative_VideoClicks::mutable_clickthrough() {
  set_has_clickthrough();
  if (clickthrough_ == NULL) clickthrough_ = new ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough;
  return clickthrough_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* BidderResponse_Ad_LinearCreative_VideoClicks::release_clickthrough() {
  clear_has_clickthrough();
  ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* temp = clickthrough_;
  clickthrough_ = NULL;
  return temp;
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks::set_allocated_clickthrough(::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_ClickThrough* clickthrough) {
  delete clickthrough_;
  clickthrough_ = clickthrough;
  if (clickthrough) {
    set_has_clickthrough();
  } else {
    clear_has_clickthrough();
  }
}

// repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks.CustomClick customClick = 3;
inline int BidderResponse_Ad_LinearCreative_VideoClicks::customclick_size() const {
  return customclick_.size();
}
inline void BidderResponse_Ad_LinearCreative_VideoClicks::clear_customclick() {
  customclick_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick& BidderResponse_Ad_LinearCreative_VideoClicks::customclick(int index) const {
  return customclick_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick* BidderResponse_Ad_LinearCreative_VideoClicks::mutable_customclick(int index) {
  return customclick_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick* BidderResponse_Ad_LinearCreative_VideoClicks::add_customclick() {
  return customclick_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick >&
BidderResponse_Ad_LinearCreative_VideoClicks::customclick() const {
  return customclick_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks_CustomClick >*
BidderResponse_Ad_LinearCreative_VideoClicks::mutable_customclick() {
  return &customclick_;
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_AdParameters

// optional string para = 1;
inline bool BidderResponse_Ad_LinearCreative_AdParameters::has_para() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::set_has_para() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::clear_has_para() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::clear_para() {
  if (para_ != &::google::protobuf::internal::kEmptyString) {
    para_->clear();
  }
  clear_has_para();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_AdParameters::para() const {
  return *para_;
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::set_para(const ::std::string& value) {
  set_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    para_ = new ::std::string;
  }
  para_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::set_para(const char* value) {
  set_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    para_ = new ::std::string;
  }
  para_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::set_para(const char* value, size_t size) {
  set_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    para_ = new ::std::string;
  }
  para_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_AdParameters::mutable_para() {
  set_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    para_ = new ::std::string;
  }
  return para_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_AdParameters::release_para() {
  clear_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = para_;
    para_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::set_allocated_para(::std::string* para) {
  if (para_ != &::google::protobuf::internal::kEmptyString) {
    delete para_;
  }
  if (para) {
    set_has_para();
    para_ = para;
  } else {
    clear_has_para();
    para_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool xmlEncoded = 2;
inline bool BidderResponse_Ad_LinearCreative_AdParameters::has_xmlencoded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::set_has_xmlencoded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::clear_has_xmlencoded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::clear_xmlencoded() {
  xmlencoded_ = false;
  clear_has_xmlencoded();
}
inline bool BidderResponse_Ad_LinearCreative_AdParameters::xmlencoded() const {
  return xmlencoded_;
}
inline void BidderResponse_Ad_LinearCreative_AdParameters::set_xmlencoded(bool value) {
  set_has_xmlencoded();
  xmlencoded_ = value;
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_Icon_IconClickTracking

// optional string url = 1;
inline bool BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::url() const {
  return *url_;
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::id() const {
  return *id_;
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon_IconClickTracking::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative_Icon

// optional string program = 1;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_program() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_program() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_program() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_program() {
  if (program_ != &::google::protobuf::internal::kEmptyString) {
    program_->clear();
  }
  clear_has_program();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::program() const {
  return *program_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_program(const ::std::string& value) {
  set_has_program();
  if (program_ == &::google::protobuf::internal::kEmptyString) {
    program_ = new ::std::string;
  }
  program_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_program(const char* value) {
  set_has_program();
  if (program_ == &::google::protobuf::internal::kEmptyString) {
    program_ = new ::std::string;
  }
  program_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_program(const char* value, size_t size) {
  set_has_program();
  if (program_ == &::google::protobuf::internal::kEmptyString) {
    program_ = new ::std::string;
  }
  program_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_program() {
  set_has_program();
  if (program_ == &::google::protobuf::internal::kEmptyString) {
    program_ = new ::std::string;
  }
  return program_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_program() {
  clear_has_program();
  if (program_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = program_;
    program_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_program(::std::string* program) {
  if (program_ != &::google::protobuf::internal::kEmptyString) {
    delete program_;
  }
  if (program) {
    set_has_program();
    program_ = program;
  } else {
    clear_has_program();
    program_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string width = 2;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_width() {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    width_->clear();
  }
  clear_has_width();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::width() const {
  return *width_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_width(const ::std::string& value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_width(const char* value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_width(const char* value, size_t size) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_width() {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  return width_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_width() {
  clear_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = width_;
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_width(::std::string* width) {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    delete width_;
  }
  if (width) {
    set_has_width();
    width_ = width;
  } else {
    clear_has_width();
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string height = 3;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_height() {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    height_->clear();
  }
  clear_has_height();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::height() const {
  return *height_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_height(const ::std::string& value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_height(const char* value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_height(const char* value, size_t size) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_height() {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  return height_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_height() {
  clear_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = height_;
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_height(::std::string* height) {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    delete height_;
  }
  if (height) {
    set_has_height();
    height_ = height;
  } else {
    clear_has_height();
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string xPosition = 4;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_xposition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_xposition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_xposition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_xposition() {
  if (xposition_ != &::google::protobuf::internal::kEmptyString) {
    xposition_->clear();
  }
  clear_has_xposition();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::xposition() const {
  return *xposition_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_xposition(const ::std::string& value) {
  set_has_xposition();
  if (xposition_ == &::google::protobuf::internal::kEmptyString) {
    xposition_ = new ::std::string;
  }
  xposition_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_xposition(const char* value) {
  set_has_xposition();
  if (xposition_ == &::google::protobuf::internal::kEmptyString) {
    xposition_ = new ::std::string;
  }
  xposition_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_xposition(const char* value, size_t size) {
  set_has_xposition();
  if (xposition_ == &::google::protobuf::internal::kEmptyString) {
    xposition_ = new ::std::string;
  }
  xposition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_xposition() {
  set_has_xposition();
  if (xposition_ == &::google::protobuf::internal::kEmptyString) {
    xposition_ = new ::std::string;
  }
  return xposition_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_xposition() {
  clear_has_xposition();
  if (xposition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xposition_;
    xposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_xposition(::std::string* xposition) {
  if (xposition_ != &::google::protobuf::internal::kEmptyString) {
    delete xposition_;
  }
  if (xposition) {
    set_has_xposition();
    xposition_ = xposition;
  } else {
    clear_has_xposition();
    xposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string yPosition = 5;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_yposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_yposition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_yposition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_yposition() {
  if (yposition_ != &::google::protobuf::internal::kEmptyString) {
    yposition_->clear();
  }
  clear_has_yposition();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::yposition() const {
  return *yposition_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_yposition(const ::std::string& value) {
  set_has_yposition();
  if (yposition_ == &::google::protobuf::internal::kEmptyString) {
    yposition_ = new ::std::string;
  }
  yposition_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_yposition(const char* value) {
  set_has_yposition();
  if (yposition_ == &::google::protobuf::internal::kEmptyString) {
    yposition_ = new ::std::string;
  }
  yposition_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_yposition(const char* value, size_t size) {
  set_has_yposition();
  if (yposition_ == &::google::protobuf::internal::kEmptyString) {
    yposition_ = new ::std::string;
  }
  yposition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_yposition() {
  set_has_yposition();
  if (yposition_ == &::google::protobuf::internal::kEmptyString) {
    yposition_ = new ::std::string;
  }
  return yposition_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_yposition() {
  clear_has_yposition();
  if (yposition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yposition_;
    yposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_yposition(::std::string* yposition) {
  if (yposition_ != &::google::protobuf::internal::kEmptyString) {
    delete yposition_;
  }
  if (yposition) {
    set_has_yposition();
    yposition_ = yposition;
  } else {
    clear_has_yposition();
    yposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string duration = 6;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_duration() {
  if (duration_ != &::google::protobuf::internal::kEmptyString) {
    duration_->clear();
  }
  clear_has_duration();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::duration() const {
  return *duration_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_duration(const ::std::string& value) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_duration(const char* value) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_duration(const char* value, size_t size) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_duration() {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  return duration_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_duration() {
  clear_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duration_;
    duration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_duration(::std::string* duration) {
  if (duration_ != &::google::protobuf::internal::kEmptyString) {
    delete duration_;
  }
  if (duration) {
    set_has_duration();
    duration_ = duration;
  } else {
    clear_has_duration();
    duration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string offset = 7;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_offset() {
  if (offset_ != &::google::protobuf::internal::kEmptyString) {
    offset_->clear();
  }
  clear_has_offset();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::offset() const {
  return *offset_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_offset(const ::std::string& value) {
  set_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    offset_ = new ::std::string;
  }
  offset_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_offset(const char* value) {
  set_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    offset_ = new ::std::string;
  }
  offset_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_offset(const char* value, size_t size) {
  set_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    offset_ = new ::std::string;
  }
  offset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_offset() {
  set_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    offset_ = new ::std::string;
  }
  return offset_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_offset() {
  clear_has_offset();
  if (offset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = offset_;
    offset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_offset(::std::string* offset) {
  if (offset_ != &::google::protobuf::internal::kEmptyString) {
    delete offset_;
  }
  if (offset) {
    set_has_offset();
    offset_ = offset;
  } else {
    clear_has_offset();
    offset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string apiFramework = 8;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_apiframework() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_apiframework() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_apiframework() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_apiframework() {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    apiframework_->clear();
  }
  clear_has_apiframework();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::apiframework() const {
  return *apiframework_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_apiframework(const ::std::string& value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_apiframework(const char* value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_apiframework(const char* value, size_t size) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_apiframework() {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  return apiframework_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_apiframework() {
  clear_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apiframework_;
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_apiframework(::std::string* apiframework) {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    delete apiframework_;
  }
  if (apiframework) {
    set_has_apiframework();
    apiframework_ = apiframework;
  } else {
    clear_has_apiframework();
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string staticUrl = 9;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_staticurl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_staticurl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_staticurl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_staticurl() {
  if (staticurl_ != &::google::protobuf::internal::kEmptyString) {
    staticurl_->clear();
  }
  clear_has_staticurl();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::staticurl() const {
  return *staticurl_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_staticurl(const ::std::string& value) {
  set_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    staticurl_ = new ::std::string;
  }
  staticurl_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_staticurl(const char* value) {
  set_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    staticurl_ = new ::std::string;
  }
  staticurl_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_staticurl(const char* value, size_t size) {
  set_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    staticurl_ = new ::std::string;
  }
  staticurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_staticurl() {
  set_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    staticurl_ = new ::std::string;
  }
  return staticurl_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_staticurl() {
  clear_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = staticurl_;
    staticurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_staticurl(::std::string* staticurl) {
  if (staticurl_ != &::google::protobuf::internal::kEmptyString) {
    delete staticurl_;
  }
  if (staticurl) {
    set_has_staticurl();
    staticurl_ = staticurl;
  } else {
    clear_has_staticurl();
    staticurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeType = 10;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_creativetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_creativetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_creativetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_creativetype() {
  if (creativetype_ != &::google::protobuf::internal::kEmptyString) {
    creativetype_->clear();
  }
  clear_has_creativetype();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::creativetype() const {
  return *creativetype_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_creativetype(const ::std::string& value) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_creativetype(const char* value) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_creativetype(const char* value, size_t size) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_creativetype() {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  return creativetype_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_creativetype() {
  clear_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativetype_;
    creativetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_creativetype(::std::string* creativetype) {
  if (creativetype_ != &::google::protobuf::internal::kEmptyString) {
    delete creativetype_;
  }
  if (creativetype) {
    set_has_creativetype();
    creativetype_ = creativetype;
  } else {
    clear_has_creativetype();
    creativetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string iframeUrl = 11;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_iframeurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_iframeurl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_iframeurl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_iframeurl() {
  if (iframeurl_ != &::google::protobuf::internal::kEmptyString) {
    iframeurl_->clear();
  }
  clear_has_iframeurl();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::iframeurl() const {
  return *iframeurl_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iframeurl(const ::std::string& value) {
  set_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    iframeurl_ = new ::std::string;
  }
  iframeurl_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iframeurl(const char* value) {
  set_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    iframeurl_ = new ::std::string;
  }
  iframeurl_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iframeurl(const char* value, size_t size) {
  set_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    iframeurl_ = new ::std::string;
  }
  iframeurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_iframeurl() {
  set_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    iframeurl_ = new ::std::string;
  }
  return iframeurl_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_iframeurl() {
  clear_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iframeurl_;
    iframeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_iframeurl(::std::string* iframeurl) {
  if (iframeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete iframeurl_;
  }
  if (iframeurl) {
    set_has_iframeurl();
    iframeurl_ = iframeurl;
  } else {
    clear_has_iframeurl();
    iframeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string html = 12;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_html() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_html() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_html() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_html() {
  if (html_ != &::google::protobuf::internal::kEmptyString) {
    html_->clear();
  }
  clear_has_html();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::html() const {
  return *html_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_html(const ::std::string& value) {
  set_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    html_ = new ::std::string;
  }
  html_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_html(const char* value) {
  set_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    html_ = new ::std::string;
  }
  html_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_html(const char* value, size_t size) {
  set_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    html_ = new ::std::string;
  }
  html_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_html() {
  set_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    html_ = new ::std::string;
  }
  return html_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_html() {
  clear_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = html_;
    html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_html(::std::string* html) {
  if (html_ != &::google::protobuf::internal::kEmptyString) {
    delete html_;
  }
  if (html) {
    set_has_html();
    html_ = html;
  } else {
    clear_has_html();
    html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string iconClickThrough = 13;
inline bool BidderResponse_Ad_LinearCreative_Icon::has_iconclickthrough() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_has_iconclickthrough() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_has_iconclickthrough() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_iconclickthrough() {
  if (iconclickthrough_ != &::google::protobuf::internal::kEmptyString) {
    iconclickthrough_->clear();
  }
  clear_has_iconclickthrough();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::iconclickthrough() const {
  return *iconclickthrough_;
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iconclickthrough(const ::std::string& value) {
  set_has_iconclickthrough();
  if (iconclickthrough_ == &::google::protobuf::internal::kEmptyString) {
    iconclickthrough_ = new ::std::string;
  }
  iconclickthrough_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iconclickthrough(const char* value) {
  set_has_iconclickthrough();
  if (iconclickthrough_ == &::google::protobuf::internal::kEmptyString) {
    iconclickthrough_ = new ::std::string;
  }
  iconclickthrough_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iconclickthrough(const char* value, size_t size) {
  set_has_iconclickthrough();
  if (iconclickthrough_ == &::google::protobuf::internal::kEmptyString) {
    iconclickthrough_ = new ::std::string;
  }
  iconclickthrough_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_iconclickthrough() {
  set_has_iconclickthrough();
  if (iconclickthrough_ == &::google::protobuf::internal::kEmptyString) {
    iconclickthrough_ = new ::std::string;
  }
  return iconclickthrough_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::release_iconclickthrough() {
  clear_has_iconclickthrough();
  if (iconclickthrough_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iconclickthrough_;
    iconclickthrough_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_allocated_iconclickthrough(::std::string* iconclickthrough) {
  if (iconclickthrough_ != &::google::protobuf::internal::kEmptyString) {
    delete iconclickthrough_;
  }
  if (iconclickthrough) {
    set_has_iconclickthrough();
    iconclickthrough_ = iconclickthrough;
  } else {
    clear_has_iconclickthrough();
    iconclickthrough_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Icon.IconClickTracking iconClickTracking = 14;
inline int BidderResponse_Ad_LinearCreative_Icon::iconclicktracking_size() const {
  return iconclicktracking_.size();
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_iconclicktracking() {
  iconclicktracking_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking& BidderResponse_Ad_LinearCreative_Icon::iconclicktracking(int index) const {
  return iconclicktracking_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking* BidderResponse_Ad_LinearCreative_Icon::mutable_iconclicktracking(int index) {
  return iconclicktracking_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking* BidderResponse_Ad_LinearCreative_Icon::add_iconclicktracking() {
  return iconclicktracking_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking >&
BidderResponse_Ad_LinearCreative_Icon::iconclicktracking() const {
  return iconclicktracking_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon_IconClickTracking >*
BidderResponse_Ad_LinearCreative_Icon::mutable_iconclicktracking() {
  return &iconclicktracking_;
}

// repeated string iconViewTracking = 15;
inline int BidderResponse_Ad_LinearCreative_Icon::iconviewtracking_size() const {
  return iconviewtracking_.size();
}
inline void BidderResponse_Ad_LinearCreative_Icon::clear_iconviewtracking() {
  iconviewtracking_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative_Icon::iconviewtracking(int index) const {
  return iconviewtracking_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::mutable_iconviewtracking(int index) {
  return iconviewtracking_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iconviewtracking(int index, const ::std::string& value) {
  iconviewtracking_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iconviewtracking(int index, const char* value) {
  iconviewtracking_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::set_iconviewtracking(int index, const char* value, size_t size) {
  iconviewtracking_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative_Icon::add_iconviewtracking() {
  return iconviewtracking_.Add();
}
inline void BidderResponse_Ad_LinearCreative_Icon::add_iconviewtracking(const ::std::string& value) {
  iconviewtracking_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::add_iconviewtracking(const char* value) {
  iconviewtracking_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative_Icon::add_iconviewtracking(const char* value, size_t size) {
  iconviewtracking_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative_Icon::iconviewtracking() const {
  return iconviewtracking_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative_Icon::mutable_iconviewtracking() {
  return &iconviewtracking_;
}

// -------------------------------------------------------------------

// BidderResponse_Ad_LinearCreative

// repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Video videos = 1;
inline int BidderResponse_Ad_LinearCreative::videos_size() const {
  return videos_.size();
}
inline void BidderResponse_Ad_LinearCreative::clear_videos() {
  videos_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video& BidderResponse_Ad_LinearCreative::videos(int index) const {
  return videos_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video* BidderResponse_Ad_LinearCreative::mutable_videos(int index) {
  return videos_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video* BidderResponse_Ad_LinearCreative::add_videos() {
  return videos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video >&
BidderResponse_Ad_LinearCreative::videos() const {
  return videos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Video >*
BidderResponse_Ad_LinearCreative::mutable_videos() {
  return &videos_;
}

// optional .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.LinearTrack linearTrack = 2;
inline bool BidderResponse_Ad_LinearCreative::has_lineartrack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_lineartrack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_lineartrack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_LinearCreative::clear_lineartrack() {
  if (lineartrack_ != NULL) lineartrack_->::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack::Clear();
  clear_has_lineartrack();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack& BidderResponse_Ad_LinearCreative::lineartrack() const {
  return lineartrack_ != NULL ? *lineartrack_ : *default_instance_->lineartrack_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack* BidderResponse_Ad_LinearCreative::mutable_lineartrack() {
  set_has_lineartrack();
  if (lineartrack_ == NULL) lineartrack_ = new ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack;
  return lineartrack_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack* BidderResponse_Ad_LinearCreative::release_lineartrack() {
  clear_has_lineartrack();
  ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack* temp = lineartrack_;
  lineartrack_ = NULL;
  return temp;
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_lineartrack(::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_LinearTrack* lineartrack) {
  delete lineartrack_;
  lineartrack_ = lineartrack;
  if (lineartrack) {
    set_has_lineartrack();
  } else {
    clear_has_lineartrack();
  }
}

// optional .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.VideoClicks videoClicks = 3;
inline bool BidderResponse_Ad_LinearCreative::has_videoclicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_videoclicks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_videoclicks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidderResponse_Ad_LinearCreative::clear_videoclicks() {
  if (videoclicks_ != NULL) videoclicks_->::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks::Clear();
  clear_has_videoclicks();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks& BidderResponse_Ad_LinearCreative::videoclicks() const {
  return videoclicks_ != NULL ? *videoclicks_ : *default_instance_->videoclicks_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks* BidderResponse_Ad_LinearCreative::mutable_videoclicks() {
  set_has_videoclicks();
  if (videoclicks_ == NULL) videoclicks_ = new ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks;
  return videoclicks_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks* BidderResponse_Ad_LinearCreative::release_videoclicks() {
  clear_has_videoclicks();
  ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks* temp = videoclicks_;
  videoclicks_ = NULL;
  return temp;
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_videoclicks(::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_VideoClicks* videoclicks) {
  delete videoclicks_;
  videoclicks_ = videoclicks;
  if (videoclicks) {
    set_has_videoclicks();
  } else {
    clear_has_videoclicks();
  }
}

// optional .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.AdParameters adParameters = 4;
inline bool BidderResponse_Ad_LinearCreative::has_adparameters() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_adparameters() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_adparameters() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidderResponse_Ad_LinearCreative::clear_adparameters() {
  if (adparameters_ != NULL) adparameters_->::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters::Clear();
  clear_has_adparameters();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters& BidderResponse_Ad_LinearCreative::adparameters() const {
  return adparameters_ != NULL ? *adparameters_ : *default_instance_->adparameters_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters* BidderResponse_Ad_LinearCreative::mutable_adparameters() {
  set_has_adparameters();
  if (adparameters_ == NULL) adparameters_ = new ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters;
  return adparameters_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters* BidderResponse_Ad_LinearCreative::release_adparameters() {
  clear_has_adparameters();
  ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters* temp = adparameters_;
  adparameters_ = NULL;
  return temp;
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_adparameters(::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_AdParameters* adparameters) {
  delete adparameters_;
  adparameters_ = adparameters;
  if (adparameters) {
    set_has_adparameters();
  } else {
    clear_has_adparameters();
  }
}

// repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative.Icon icons = 5;
inline int BidderResponse_Ad_LinearCreative::icons_size() const {
  return icons_.size();
}
inline void BidderResponse_Ad_LinearCreative::clear_icons() {
  icons_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon& BidderResponse_Ad_LinearCreative::icons(int index) const {
  return icons_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon* BidderResponse_Ad_LinearCreative::mutable_icons(int index) {
  return icons_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon* BidderResponse_Ad_LinearCreative::add_icons() {
  return icons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon >&
BidderResponse_Ad_LinearCreative::icons() const {
  return icons_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative_Icon >*
BidderResponse_Ad_LinearCreative::mutable_icons() {
  return &icons_;
}

// optional string duration = 6;
inline bool BidderResponse_Ad_LinearCreative::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidderResponse_Ad_LinearCreative::clear_duration() {
  if (duration_ != &::google::protobuf::internal::kEmptyString) {
    duration_->clear();
  }
  clear_has_duration();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative::duration() const {
  return *duration_;
}
inline void BidderResponse_Ad_LinearCreative::set_duration(const ::std::string& value) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_duration(const char* value) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_duration(const char* value, size_t size) {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  duration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative::mutable_duration() {
  set_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    duration_ = new ::std::string;
  }
  return duration_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative::release_duration() {
  clear_has_duration();
  if (duration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duration_;
    duration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_duration(::std::string* duration) {
  if (duration_ != &::google::protobuf::internal::kEmptyString) {
    delete duration_;
  }
  if (duration) {
    set_has_duration();
    duration_ = duration;
  } else {
    clear_has_duration();
    duration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string creativeExtension = 16;
inline int BidderResponse_Ad_LinearCreative::creativeextension_size() const {
  return creativeextension_.size();
}
inline void BidderResponse_Ad_LinearCreative::clear_creativeextension() {
  creativeextension_.Clear();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative::creativeextension(int index) const {
  return creativeextension_.Get(index);
}
inline ::std::string* BidderResponse_Ad_LinearCreative::mutable_creativeextension(int index) {
  return creativeextension_.Mutable(index);
}
inline void BidderResponse_Ad_LinearCreative::set_creativeextension(int index, const ::std::string& value) {
  creativeextension_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_creativeextension(int index, const char* value) {
  creativeextension_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_creativeextension(int index, const char* value, size_t size) {
  creativeextension_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative::add_creativeextension() {
  return creativeextension_.Add();
}
inline void BidderResponse_Ad_LinearCreative::add_creativeextension(const ::std::string& value) {
  creativeextension_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::add_creativeextension(const char* value) {
  creativeextension_.Add()->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::add_creativeextension(const char* value, size_t size) {
  creativeextension_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_LinearCreative::creativeextension() const {
  return creativeextension_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_LinearCreative::mutable_creativeextension() {
  return &creativeextension_;
}

// optional string id = 7;
inline bool BidderResponse_Ad_LinearCreative::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidderResponse_Ad_LinearCreative::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative::id() const {
  return *id_;
}
inline void BidderResponse_Ad_LinearCreative::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sequence = 8;
inline bool BidderResponse_Ad_LinearCreative::has_sequence() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_sequence() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidderResponse_Ad_LinearCreative::clear_sequence() {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    sequence_->clear();
  }
  clear_has_sequence();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative::sequence() const {
  return *sequence_;
}
inline void BidderResponse_Ad_LinearCreative::set_sequence(const ::std::string& value) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_sequence(const char* value) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_sequence(const char* value, size_t size) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative::mutable_sequence() {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  return sequence_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative::release_sequence() {
  clear_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sequence_;
    sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_sequence(::std::string* sequence) {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    delete sequence_;
  }
  if (sequence) {
    set_has_sequence();
    sequence_ = sequence;
  } else {
    clear_has_sequence();
    sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adId = 9;
inline bool BidderResponse_Ad_LinearCreative::has_adid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_adid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_adid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidderResponse_Ad_LinearCreative::clear_adid() {
  if (adid_ != &::google::protobuf::internal::kEmptyString) {
    adid_->clear();
  }
  clear_has_adid();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative::adid() const {
  return *adid_;
}
inline void BidderResponse_Ad_LinearCreative::set_adid(const ::std::string& value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_adid(const char* value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_adid(const char* value, size_t size) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative::mutable_adid() {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  return adid_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative::release_adid() {
  clear_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adid_;
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_adid(::std::string* adid) {
  if (adid_ != &::google::protobuf::internal::kEmptyString) {
    delete adid_;
  }
  if (adid) {
    set_has_adid();
    adid_ = adid;
  } else {
    clear_has_adid();
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string apiFramework = 17;
inline bool BidderResponse_Ad_LinearCreative::has_apiframework() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_apiframework() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_apiframework() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidderResponse_Ad_LinearCreative::clear_apiframework() {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    apiframework_->clear();
  }
  clear_has_apiframework();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative::apiframework() const {
  return *apiframework_;
}
inline void BidderResponse_Ad_LinearCreative::set_apiframework(const ::std::string& value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_apiframework(const char* value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_apiframework(const char* value, size_t size) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative::mutable_apiframework() {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  return apiframework_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative::release_apiframework() {
  clear_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apiframework_;
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_apiframework(::std::string* apiframework) {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    delete apiframework_;
  }
  if (apiframework) {
    set_has_apiframework();
    apiframework_ = apiframework;
  } else {
    clear_has_apiframework();
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string skipoffset = 15;
inline bool BidderResponse_Ad_LinearCreative::has_skipoffset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidderResponse_Ad_LinearCreative::set_has_skipoffset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidderResponse_Ad_LinearCreative::clear_has_skipoffset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidderResponse_Ad_LinearCreative::clear_skipoffset() {
  if (skipoffset_ != &::google::protobuf::internal::kEmptyString) {
    skipoffset_->clear();
  }
  clear_has_skipoffset();
}
inline const ::std::string& BidderResponse_Ad_LinearCreative::skipoffset() const {
  return *skipoffset_;
}
inline void BidderResponse_Ad_LinearCreative::set_skipoffset(const ::std::string& value) {
  set_has_skipoffset();
  if (skipoffset_ == &::google::protobuf::internal::kEmptyString) {
    skipoffset_ = new ::std::string;
  }
  skipoffset_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_skipoffset(const char* value) {
  set_has_skipoffset();
  if (skipoffset_ == &::google::protobuf::internal::kEmptyString) {
    skipoffset_ = new ::std::string;
  }
  skipoffset_->assign(value);
}
inline void BidderResponse_Ad_LinearCreative::set_skipoffset(const char* value, size_t size) {
  set_has_skipoffset();
  if (skipoffset_ == &::google::protobuf::internal::kEmptyString) {
    skipoffset_ = new ::std::string;
  }
  skipoffset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_LinearCreative::mutable_skipoffset() {
  set_has_skipoffset();
  if (skipoffset_ == &::google::protobuf::internal::kEmptyString) {
    skipoffset_ = new ::std::string;
  }
  return skipoffset_;
}
inline ::std::string* BidderResponse_Ad_LinearCreative::release_skipoffset() {
  clear_has_skipoffset();
  if (skipoffset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skipoffset_;
    skipoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_LinearCreative::set_allocated_skipoffset(::std::string* skipoffset) {
  if (skipoffset_ != &::google::protobuf::internal::kEmptyString) {
    delete skipoffset_;
  }
  if (skipoffset) {
    set_has_skipoffset();
    skipoffset_ = skipoffset;
  } else {
    clear_has_skipoffset();
    skipoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking

// optional string url = 1;
inline bool BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::url() const {
  return *url_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 2;
inline bool BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::id() const {
  return *id_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse_Ad_CompanionCreative_Companion_AdParameters

// optional string para = 1;
inline bool BidderResponse_Ad_CompanionCreative_Companion_AdParameters::has_para() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::set_has_para() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::clear_has_para() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::clear_para() {
  if (para_ != &::google::protobuf::internal::kEmptyString) {
    para_->clear();
  }
  clear_has_para();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion_AdParameters::para() const {
  return *para_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::set_para(const ::std::string& value) {
  set_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    para_ = new ::std::string;
  }
  para_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::set_para(const char* value) {
  set_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    para_ = new ::std::string;
  }
  para_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::set_para(const char* value, size_t size) {
  set_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    para_ = new ::std::string;
  }
  para_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion_AdParameters::mutable_para() {
  set_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    para_ = new ::std::string;
  }
  return para_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion_AdParameters::release_para() {
  clear_has_para();
  if (para_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = para_;
    para_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::set_allocated_para(::std::string* para) {
  if (para_ != &::google::protobuf::internal::kEmptyString) {
    delete para_;
  }
  if (para) {
    set_has_para();
    para_ = para;
  } else {
    clear_has_para();
    para_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool xmlEncoded = 2;
inline bool BidderResponse_Ad_CompanionCreative_Companion_AdParameters::has_xmlencoded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::set_has_xmlencoded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::clear_has_xmlencoded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::clear_xmlencoded() {
  xmlencoded_ = false;
  clear_has_xmlencoded();
}
inline bool BidderResponse_Ad_CompanionCreative_Companion_AdParameters::xmlencoded() const {
  return xmlencoded_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion_AdParameters::set_xmlencoded(bool value) {
  set_has_xmlencoded();
  xmlencoded_ = value;
}

// -------------------------------------------------------------------

// BidderResponse_Ad_CompanionCreative_Companion

// optional string width = 1;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_width() {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    width_->clear();
  }
  clear_has_width();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::width() const {
  return *width_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_width(const ::std::string& value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_width(const char* value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_width(const char* value, size_t size) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_width() {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  return width_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_width() {
  clear_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = width_;
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_width(::std::string* width) {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    delete width_;
  }
  if (width) {
    set_has_width();
    width_ = width;
  } else {
    clear_has_width();
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string height = 2;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_height() {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    height_->clear();
  }
  clear_has_height();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::height() const {
  return *height_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_height(const ::std::string& value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_height(const char* value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_height(const char* value, size_t size) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_height() {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  return height_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_height() {
  clear_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = height_;
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_height(::std::string* height) {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    delete height_;
  }
  if (height) {
    set_has_height();
    height_ = height;
  } else {
    clear_has_height();
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 3;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::id() const {
  return *id_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string expandedWidth = 4;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_expandedwidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_expandedwidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_expandedwidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_expandedwidth() {
  if (expandedwidth_ != &::google::protobuf::internal::kEmptyString) {
    expandedwidth_->clear();
  }
  clear_has_expandedwidth();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::expandedwidth() const {
  return *expandedwidth_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_expandedwidth(const ::std::string& value) {
  set_has_expandedwidth();
  if (expandedwidth_ == &::google::protobuf::internal::kEmptyString) {
    expandedwidth_ = new ::std::string;
  }
  expandedwidth_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_expandedwidth(const char* value) {
  set_has_expandedwidth();
  if (expandedwidth_ == &::google::protobuf::internal::kEmptyString) {
    expandedwidth_ = new ::std::string;
  }
  expandedwidth_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_expandedwidth(const char* value, size_t size) {
  set_has_expandedwidth();
  if (expandedwidth_ == &::google::protobuf::internal::kEmptyString) {
    expandedwidth_ = new ::std::string;
  }
  expandedwidth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_expandedwidth() {
  set_has_expandedwidth();
  if (expandedwidth_ == &::google::protobuf::internal::kEmptyString) {
    expandedwidth_ = new ::std::string;
  }
  return expandedwidth_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_expandedwidth() {
  clear_has_expandedwidth();
  if (expandedwidth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expandedwidth_;
    expandedwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_expandedwidth(::std::string* expandedwidth) {
  if (expandedwidth_ != &::google::protobuf::internal::kEmptyString) {
    delete expandedwidth_;
  }
  if (expandedwidth) {
    set_has_expandedwidth();
    expandedwidth_ = expandedwidth;
  } else {
    clear_has_expandedwidth();
    expandedwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string expandedHeight = 5;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_expandedheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_expandedheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_expandedheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_expandedheight() {
  if (expandedheight_ != &::google::protobuf::internal::kEmptyString) {
    expandedheight_->clear();
  }
  clear_has_expandedheight();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::expandedheight() const {
  return *expandedheight_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_expandedheight(const ::std::string& value) {
  set_has_expandedheight();
  if (expandedheight_ == &::google::protobuf::internal::kEmptyString) {
    expandedheight_ = new ::std::string;
  }
  expandedheight_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_expandedheight(const char* value) {
  set_has_expandedheight();
  if (expandedheight_ == &::google::protobuf::internal::kEmptyString) {
    expandedheight_ = new ::std::string;
  }
  expandedheight_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_expandedheight(const char* value, size_t size) {
  set_has_expandedheight();
  if (expandedheight_ == &::google::protobuf::internal::kEmptyString) {
    expandedheight_ = new ::std::string;
  }
  expandedheight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_expandedheight() {
  set_has_expandedheight();
  if (expandedheight_ == &::google::protobuf::internal::kEmptyString) {
    expandedheight_ = new ::std::string;
  }
  return expandedheight_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_expandedheight() {
  clear_has_expandedheight();
  if (expandedheight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expandedheight_;
    expandedheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_expandedheight(::std::string* expandedheight) {
  if (expandedheight_ != &::google::protobuf::internal::kEmptyString) {
    delete expandedheight_;
  }
  if (expandedheight) {
    set_has_expandedheight();
    expandedheight_ = expandedheight;
  } else {
    clear_has_expandedheight();
    expandedheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string apiFramework = 6;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_apiframework() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_apiframework() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_apiframework() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_apiframework() {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    apiframework_->clear();
  }
  clear_has_apiframework();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::apiframework() const {
  return *apiframework_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_apiframework(const ::std::string& value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_apiframework(const char* value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_apiframework(const char* value, size_t size) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_apiframework() {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  return apiframework_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_apiframework() {
  clear_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apiframework_;
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_apiframework(::std::string* apiframework) {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    delete apiframework_;
  }
  if (apiframework) {
    set_has_apiframework();
    apiframework_ = apiframework;
  } else {
    clear_has_apiframework();
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string assetWidth = 17;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_assetwidth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_assetwidth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_assetwidth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_assetwidth() {
  if (assetwidth_ != &::google::protobuf::internal::kEmptyString) {
    assetwidth_->clear();
  }
  clear_has_assetwidth();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::assetwidth() const {
  return *assetwidth_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_assetwidth(const ::std::string& value) {
  set_has_assetwidth();
  if (assetwidth_ == &::google::protobuf::internal::kEmptyString) {
    assetwidth_ = new ::std::string;
  }
  assetwidth_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_assetwidth(const char* value) {
  set_has_assetwidth();
  if (assetwidth_ == &::google::protobuf::internal::kEmptyString) {
    assetwidth_ = new ::std::string;
  }
  assetwidth_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_assetwidth(const char* value, size_t size) {
  set_has_assetwidth();
  if (assetwidth_ == &::google::protobuf::internal::kEmptyString) {
    assetwidth_ = new ::std::string;
  }
  assetwidth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_assetwidth() {
  set_has_assetwidth();
  if (assetwidth_ == &::google::protobuf::internal::kEmptyString) {
    assetwidth_ = new ::std::string;
  }
  return assetwidth_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_assetwidth() {
  clear_has_assetwidth();
  if (assetwidth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = assetwidth_;
    assetwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_assetwidth(::std::string* assetwidth) {
  if (assetwidth_ != &::google::protobuf::internal::kEmptyString) {
    delete assetwidth_;
  }
  if (assetwidth) {
    set_has_assetwidth();
    assetwidth_ = assetwidth;
  } else {
    clear_has_assetwidth();
    assetwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string assetHeight = 18;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_assetheight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_assetheight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_assetheight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_assetheight() {
  if (assetheight_ != &::google::protobuf::internal::kEmptyString) {
    assetheight_->clear();
  }
  clear_has_assetheight();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::assetheight() const {
  return *assetheight_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_assetheight(const ::std::string& value) {
  set_has_assetheight();
  if (assetheight_ == &::google::protobuf::internal::kEmptyString) {
    assetheight_ = new ::std::string;
  }
  assetheight_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_assetheight(const char* value) {
  set_has_assetheight();
  if (assetheight_ == &::google::protobuf::internal::kEmptyString) {
    assetheight_ = new ::std::string;
  }
  assetheight_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_assetheight(const char* value, size_t size) {
  set_has_assetheight();
  if (assetheight_ == &::google::protobuf::internal::kEmptyString) {
    assetheight_ = new ::std::string;
  }
  assetheight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_assetheight() {
  set_has_assetheight();
  if (assetheight_ == &::google::protobuf::internal::kEmptyString) {
    assetheight_ = new ::std::string;
  }
  return assetheight_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_assetheight() {
  clear_has_assetheight();
  if (assetheight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = assetheight_;
    assetheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_assetheight(::std::string* assetheight) {
  if (assetheight_ != &::google::protobuf::internal::kEmptyString) {
    delete assetheight_;
  }
  if (assetheight) {
    set_has_assetheight();
    assetheight_ = assetheight;
  } else {
    clear_has_assetheight();
    assetheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adSlotID = 19;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_adslotid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_adslotid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_adslotid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_adslotid() {
  if (adslotid_ != &::google::protobuf::internal::kEmptyString) {
    adslotid_->clear();
  }
  clear_has_adslotid();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::adslotid() const {
  return *adslotid_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_adslotid(const ::std::string& value) {
  set_has_adslotid();
  if (adslotid_ == &::google::protobuf::internal::kEmptyString) {
    adslotid_ = new ::std::string;
  }
  adslotid_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_adslotid(const char* value) {
  set_has_adslotid();
  if (adslotid_ == &::google::protobuf::internal::kEmptyString) {
    adslotid_ = new ::std::string;
  }
  adslotid_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_adslotid(const char* value, size_t size) {
  set_has_adslotid();
  if (adslotid_ == &::google::protobuf::internal::kEmptyString) {
    adslotid_ = new ::std::string;
  }
  adslotid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_adslotid() {
  set_has_adslotid();
  if (adslotid_ == &::google::protobuf::internal::kEmptyString) {
    adslotid_ = new ::std::string;
  }
  return adslotid_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_adslotid() {
  clear_has_adslotid();
  if (adslotid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adslotid_;
    adslotid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_adslotid(::std::string* adslotid) {
  if (adslotid_ != &::google::protobuf::internal::kEmptyString) {
    delete adslotid_;
  }
  if (adslotid) {
    set_has_adslotid();
    adslotid_ = adslotid;
  } else {
    clear_has_adslotid();
    adslotid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string clickThroughUrl = 10;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_clickthroughurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_clickthroughurl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_clickthroughurl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_clickthroughurl() {
  if (clickthroughurl_ != &::google::protobuf::internal::kEmptyString) {
    clickthroughurl_->clear();
  }
  clear_has_clickthroughurl();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::clickthroughurl() const {
  return *clickthroughurl_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_clickthroughurl(const ::std::string& value) {
  set_has_clickthroughurl();
  if (clickthroughurl_ == &::google::protobuf::internal::kEmptyString) {
    clickthroughurl_ = new ::std::string;
  }
  clickthroughurl_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_clickthroughurl(const char* value) {
  set_has_clickthroughurl();
  if (clickthroughurl_ == &::google::protobuf::internal::kEmptyString) {
    clickthroughurl_ = new ::std::string;
  }
  clickthroughurl_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_clickthroughurl(const char* value, size_t size) {
  set_has_clickthroughurl();
  if (clickthroughurl_ == &::google::protobuf::internal::kEmptyString) {
    clickthroughurl_ = new ::std::string;
  }
  clickthroughurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_clickthroughurl() {
  set_has_clickthroughurl();
  if (clickthroughurl_ == &::google::protobuf::internal::kEmptyString) {
    clickthroughurl_ = new ::std::string;
  }
  return clickthroughurl_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_clickthroughurl() {
  clear_has_clickthroughurl();
  if (clickthroughurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clickthroughurl_;
    clickthroughurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_clickthroughurl(::std::string* clickthroughurl) {
  if (clickthroughurl_ != &::google::protobuf::internal::kEmptyString) {
    delete clickthroughurl_;
  }
  if (clickthroughurl) {
    set_has_clickthroughurl();
    clickthroughurl_ = clickthroughurl;
  } else {
    clear_has_clickthroughurl();
    clickthroughurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string altText = 13;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_alttext() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_alttext() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_alttext() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_alttext() {
  if (alttext_ != &::google::protobuf::internal::kEmptyString) {
    alttext_->clear();
  }
  clear_has_alttext();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::alttext() const {
  return *alttext_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_alttext(const ::std::string& value) {
  set_has_alttext();
  if (alttext_ == &::google::protobuf::internal::kEmptyString) {
    alttext_ = new ::std::string;
  }
  alttext_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_alttext(const char* value) {
  set_has_alttext();
  if (alttext_ == &::google::protobuf::internal::kEmptyString) {
    alttext_ = new ::std::string;
  }
  alttext_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_alttext(const char* value, size_t size) {
  set_has_alttext();
  if (alttext_ == &::google::protobuf::internal::kEmptyString) {
    alttext_ = new ::std::string;
  }
  alttext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_alttext() {
  set_has_alttext();
  if (alttext_ == &::google::protobuf::internal::kEmptyString) {
    alttext_ = new ::std::string;
  }
  return alttext_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_alttext() {
  clear_has_alttext();
  if (alttext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alttext_;
    alttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_alttext(::std::string* alttext) {
  if (alttext_ != &::google::protobuf::internal::kEmptyString) {
    delete alttext_;
  }
  if (alttext) {
    set_has_alttext();
    alttext_ = alttext;
  } else {
    clear_has_alttext();
    alttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion.CompanionClickTracking companionClickTracking = 11;
inline int BidderResponse_Ad_CompanionCreative_Companion::companionclicktracking_size() const {
  return companionclicktracking_.size();
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_companionclicktracking() {
  companionclicktracking_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking& BidderResponse_Ad_CompanionCreative_Companion::companionclicktracking(int index) const {
  return companionclicktracking_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking* BidderResponse_Ad_CompanionCreative_Companion::mutable_companionclicktracking(int index) {
  return companionclicktracking_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking* BidderResponse_Ad_CompanionCreative_Companion::add_companionclicktracking() {
  return companionclicktracking_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking >&
BidderResponse_Ad_CompanionCreative_Companion::companionclicktracking() const {
  return companionclicktracking_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_CompanionClickTracking >*
BidderResponse_Ad_CompanionCreative_Companion::mutable_companionclicktracking() {
  return &companionclicktracking_;
}

// optional .com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion.AdParameters adParameters = 16;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_adparameters() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_adparameters() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_adparameters() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_adparameters() {
  if (adparameters_ != NULL) adparameters_->::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters::Clear();
  clear_has_adparameters();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters& BidderResponse_Ad_CompanionCreative_Companion::adparameters() const {
  return adparameters_ != NULL ? *adparameters_ : *default_instance_->adparameters_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters* BidderResponse_Ad_CompanionCreative_Companion::mutable_adparameters() {
  set_has_adparameters();
  if (adparameters_ == NULL) adparameters_ = new ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters;
  return adparameters_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters* BidderResponse_Ad_CompanionCreative_Companion::release_adparameters() {
  clear_has_adparameters();
  ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters* temp = adparameters_;
  adparameters_ = NULL;
  return temp;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_adparameters(::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion_AdParameters* adparameters) {
  delete adparameters_;
  adparameters_ = adparameters;
  if (adparameters) {
    set_has_adparameters();
  } else {
    clear_has_adparameters();
  }
}

// optional string staticUrl = 7;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_staticurl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_staticurl() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_staticurl() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_staticurl() {
  if (staticurl_ != &::google::protobuf::internal::kEmptyString) {
    staticurl_->clear();
  }
  clear_has_staticurl();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::staticurl() const {
  return *staticurl_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_staticurl(const ::std::string& value) {
  set_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    staticurl_ = new ::std::string;
  }
  staticurl_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_staticurl(const char* value) {
  set_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    staticurl_ = new ::std::string;
  }
  staticurl_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_staticurl(const char* value, size_t size) {
  set_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    staticurl_ = new ::std::string;
  }
  staticurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_staticurl() {
  set_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    staticurl_ = new ::std::string;
  }
  return staticurl_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_staticurl() {
  clear_has_staticurl();
  if (staticurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = staticurl_;
    staticurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_staticurl(::std::string* staticurl) {
  if (staticurl_ != &::google::protobuf::internal::kEmptyString) {
    delete staticurl_;
  }
  if (staticurl) {
    set_has_staticurl();
    staticurl_ = staticurl;
  } else {
    clear_has_staticurl();
    staticurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeType = 15;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_creativetype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_creativetype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_creativetype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_creativetype() {
  if (creativetype_ != &::google::protobuf::internal::kEmptyString) {
    creativetype_->clear();
  }
  clear_has_creativetype();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::creativetype() const {
  return *creativetype_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_creativetype(const ::std::string& value) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_creativetype(const char* value) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_creativetype(const char* value, size_t size) {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  creativetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_creativetype() {
  set_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    creativetype_ = new ::std::string;
  }
  return creativetype_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_creativetype() {
  clear_has_creativetype();
  if (creativetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativetype_;
    creativetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_creativetype(::std::string* creativetype) {
  if (creativetype_ != &::google::protobuf::internal::kEmptyString) {
    delete creativetype_;
  }
  if (creativetype) {
    set_has_creativetype();
    creativetype_ = creativetype;
  } else {
    clear_has_creativetype();
    creativetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string iframeUrl = 8;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_iframeurl() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_iframeurl() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_iframeurl() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_iframeurl() {
  if (iframeurl_ != &::google::protobuf::internal::kEmptyString) {
    iframeurl_->clear();
  }
  clear_has_iframeurl();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::iframeurl() const {
  return *iframeurl_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_iframeurl(const ::std::string& value) {
  set_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    iframeurl_ = new ::std::string;
  }
  iframeurl_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_iframeurl(const char* value) {
  set_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    iframeurl_ = new ::std::string;
  }
  iframeurl_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_iframeurl(const char* value, size_t size) {
  set_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    iframeurl_ = new ::std::string;
  }
  iframeurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_iframeurl() {
  set_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    iframeurl_ = new ::std::string;
  }
  return iframeurl_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_iframeurl() {
  clear_has_iframeurl();
  if (iframeurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iframeurl_;
    iframeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_iframeurl(::std::string* iframeurl) {
  if (iframeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete iframeurl_;
  }
  if (iframeurl) {
    set_has_iframeurl();
    iframeurl_ = iframeurl;
  } else {
    clear_has_iframeurl();
    iframeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string html = 9;
inline bool BidderResponse_Ad_CompanionCreative_Companion::has_html() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_has_html() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_has_html() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_html() {
  if (html_ != &::google::protobuf::internal::kEmptyString) {
    html_->clear();
  }
  clear_has_html();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::html() const {
  return *html_;
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_html(const ::std::string& value) {
  set_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    html_ = new ::std::string;
  }
  html_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_html(const char* value) {
  set_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    html_ = new ::std::string;
  }
  html_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_html(const char* value, size_t size) {
  set_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    html_ = new ::std::string;
  }
  html_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_html() {
  set_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    html_ = new ::std::string;
  }
  return html_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::release_html() {
  clear_has_html();
  if (html_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = html_;
    html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_allocated_html(::std::string* html) {
  if (html_ != &::google::protobuf::internal::kEmptyString) {
    delete html_;
  }
  if (html) {
    set_has_html();
    html_ = html;
  } else {
    clear_has_html();
    html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string creativeView = 12;
inline int BidderResponse_Ad_CompanionCreative_Companion::creativeview_size() const {
  return creativeview_.size();
}
inline void BidderResponse_Ad_CompanionCreative_Companion::clear_creativeview() {
  creativeview_.Clear();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative_Companion::creativeview(int index) const {
  return creativeview_.Get(index);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::mutable_creativeview(int index) {
  return creativeview_.Mutable(index);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_creativeview(int index, const ::std::string& value) {
  creativeview_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_creativeview(int index, const char* value) {
  creativeview_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::set_creativeview(int index, const char* value, size_t size) {
  creativeview_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative_Companion::add_creativeview() {
  return creativeview_.Add();
}
inline void BidderResponse_Ad_CompanionCreative_Companion::add_creativeview(const ::std::string& value) {
  creativeview_.Add()->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::add_creativeview(const char* value) {
  creativeview_.Add()->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative_Companion::add_creativeview(const char* value, size_t size) {
  creativeview_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad_CompanionCreative_Companion::creativeview() const {
  return creativeview_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad_CompanionCreative_Companion::mutable_creativeview() {
  return &creativeview_;
}

// -------------------------------------------------------------------

// BidderResponse_Ad_CompanionCreative

// optional string id = 1;
inline bool BidderResponse_Ad_CompanionCreative::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative::id() const {
  return *id_;
}
inline void BidderResponse_Ad_CompanionCreative::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sequence = 2;
inline bool BidderResponse_Ad_CompanionCreative::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_sequence() {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    sequence_->clear();
  }
  clear_has_sequence();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative::sequence() const {
  return *sequence_;
}
inline void BidderResponse_Ad_CompanionCreative::set_sequence(const ::std::string& value) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_sequence(const char* value) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_sequence(const char* value, size_t size) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::mutable_sequence() {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  return sequence_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::release_sequence() {
  clear_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sequence_;
    sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative::set_allocated_sequence(::std::string* sequence) {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    delete sequence_;
  }
  if (sequence) {
    set_has_sequence();
    sequence_ = sequence;
  } else {
    clear_has_sequence();
    sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adId = 3;
inline bool BidderResponse_Ad_CompanionCreative::has_adid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative::set_has_adid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_has_adid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_adid() {
  if (adid_ != &::google::protobuf::internal::kEmptyString) {
    adid_->clear();
  }
  clear_has_adid();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative::adid() const {
  return *adid_;
}
inline void BidderResponse_Ad_CompanionCreative::set_adid(const ::std::string& value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_adid(const char* value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_adid(const char* value, size_t size) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::mutable_adid() {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  return adid_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::release_adid() {
  clear_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adid_;
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative::set_allocated_adid(::std::string* adid) {
  if (adid_ != &::google::protobuf::internal::kEmptyString) {
    delete adid_;
  }
  if (adid) {
    set_has_adid();
    adid_ = adid;
  } else {
    clear_has_adid();
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string required = 7;
inline bool BidderResponse_Ad_CompanionCreative::has_required() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative::set_has_required() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_has_required() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_required() {
  if (required_ != &::google::protobuf::internal::kEmptyString) {
    required_->clear();
  }
  clear_has_required();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative::required() const {
  return *required_;
}
inline void BidderResponse_Ad_CompanionCreative::set_required(const ::std::string& value) {
  set_has_required();
  if (required_ == &::google::protobuf::internal::kEmptyString) {
    required_ = new ::std::string;
  }
  required_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_required(const char* value) {
  set_has_required();
  if (required_ == &::google::protobuf::internal::kEmptyString) {
    required_ = new ::std::string;
  }
  required_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_required(const char* value, size_t size) {
  set_has_required();
  if (required_ == &::google::protobuf::internal::kEmptyString) {
    required_ = new ::std::string;
  }
  required_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::mutable_required() {
  set_has_required();
  if (required_ == &::google::protobuf::internal::kEmptyString) {
    required_ = new ::std::string;
  }
  return required_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::release_required() {
  clear_has_required();
  if (required_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = required_;
    required_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative::set_allocated_required(::std::string* required) {
  if (required_ != &::google::protobuf::internal::kEmptyString) {
    delete required_;
  }
  if (required) {
    set_has_required();
    required_ = required;
  } else {
    clear_has_required();
    required_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string apiFramework = 5;
inline bool BidderResponse_Ad_CompanionCreative::has_apiframework() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative::set_has_apiframework() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_has_apiframework() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_apiframework() {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    apiframework_->clear();
  }
  clear_has_apiframework();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative::apiframework() const {
  return *apiframework_;
}
inline void BidderResponse_Ad_CompanionCreative::set_apiframework(const ::std::string& value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_apiframework(const char* value) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_apiframework(const char* value, size_t size) {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  apiframework_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::mutable_apiframework() {
  set_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    apiframework_ = new ::std::string;
  }
  return apiframework_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::release_apiframework() {
  clear_has_apiframework();
  if (apiframework_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apiframework_;
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative::set_allocated_apiframework(::std::string* apiframework) {
  if (apiframework_ != &::google::protobuf::internal::kEmptyString) {
    delete apiframework_;
  }
  if (apiframework) {
    set_has_apiframework();
    apiframework_ = apiframework;
  } else {
    clear_has_apiframework();
    apiframework_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creativeExtension = 6;
inline bool BidderResponse_Ad_CompanionCreative::has_creativeextension() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidderResponse_Ad_CompanionCreative::set_has_creativeextension() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_has_creativeextension() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidderResponse_Ad_CompanionCreative::clear_creativeextension() {
  if (creativeextension_ != &::google::protobuf::internal::kEmptyString) {
    creativeextension_->clear();
  }
  clear_has_creativeextension();
}
inline const ::std::string& BidderResponse_Ad_CompanionCreative::creativeextension() const {
  return *creativeextension_;
}
inline void BidderResponse_Ad_CompanionCreative::set_creativeextension(const ::std::string& value) {
  set_has_creativeextension();
  if (creativeextension_ == &::google::protobuf::internal::kEmptyString) {
    creativeextension_ = new ::std::string;
  }
  creativeextension_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_creativeextension(const char* value) {
  set_has_creativeextension();
  if (creativeextension_ == &::google::protobuf::internal::kEmptyString) {
    creativeextension_ = new ::std::string;
  }
  creativeextension_->assign(value);
}
inline void BidderResponse_Ad_CompanionCreative::set_creativeextension(const char* value, size_t size) {
  set_has_creativeextension();
  if (creativeextension_ == &::google::protobuf::internal::kEmptyString) {
    creativeextension_ = new ::std::string;
  }
  creativeextension_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::mutable_creativeextension() {
  set_has_creativeextension();
  if (creativeextension_ == &::google::protobuf::internal::kEmptyString) {
    creativeextension_ = new ::std::string;
  }
  return creativeextension_;
}
inline ::std::string* BidderResponse_Ad_CompanionCreative::release_creativeextension() {
  clear_has_creativeextension();
  if (creativeextension_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creativeextension_;
    creativeextension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad_CompanionCreative::set_allocated_creativeextension(::std::string* creativeextension) {
  if (creativeextension_ != &::google::protobuf::internal::kEmptyString) {
    delete creativeextension_;
  }
  if (creativeextension) {
    set_has_creativeextension();
    creativeextension_ = creativeextension;
  } else {
    clear_has_creativeextension();
    creativeextension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.msg.BidderResponse.Ad.CompanionCreative.Companion companion = 4;
inline int BidderResponse_Ad_CompanionCreative::companion_size() const {
  return companion_.size();
}
inline void BidderResponse_Ad_CompanionCreative::clear_companion() {
  companion_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion& BidderResponse_Ad_CompanionCreative::companion(int index) const {
  return companion_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion* BidderResponse_Ad_CompanionCreative::mutable_companion(int index) {
  return companion_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion* BidderResponse_Ad_CompanionCreative::add_companion() {
  return companion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion >&
BidderResponse_Ad_CompanionCreative::companion() const {
  return companion_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative_Companion >*
BidderResponse_Ad_CompanionCreative::mutable_companion() {
  return &companion_;
}

// -------------------------------------------------------------------

// BidderResponse_Ad

// optional string price = 1;
inline bool BidderResponse_Ad::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse_Ad::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse_Ad::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse_Ad::clear_price() {
  if (price_ != &::google::protobuf::internal::kEmptyString) {
    price_->clear();
  }
  clear_has_price();
}
inline const ::std::string& BidderResponse_Ad::price() const {
  return *price_;
}
inline void BidderResponse_Ad::set_price(const ::std::string& value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(value);
}
inline void BidderResponse_Ad::set_price(const char* value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(value);
}
inline void BidderResponse_Ad::set_price(const char* value, size_t size) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_price() {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  return price_;
}
inline ::std::string* BidderResponse_Ad::release_price() {
  clear_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = price_;
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_price(::std::string* price) {
  if (price_ != &::google::protobuf::internal::kEmptyString) {
    delete price_;
  }
  if (price) {
    set_has_price();
    price_ = price;
  } else {
    clear_has_price();
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string campaignId = 2;
inline bool BidderResponse_Ad::has_campaignid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse_Ad::set_has_campaignid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse_Ad::clear_has_campaignid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse_Ad::clear_campaignid() {
  if (campaignid_ != &::google::protobuf::internal::kEmptyString) {
    campaignid_->clear();
  }
  clear_has_campaignid();
}
inline const ::std::string& BidderResponse_Ad::campaignid() const {
  return *campaignid_;
}
inline void BidderResponse_Ad::set_campaignid(const ::std::string& value) {
  set_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    campaignid_ = new ::std::string;
  }
  campaignid_->assign(value);
}
inline void BidderResponse_Ad::set_campaignid(const char* value) {
  set_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    campaignid_ = new ::std::string;
  }
  campaignid_->assign(value);
}
inline void BidderResponse_Ad::set_campaignid(const char* value, size_t size) {
  set_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    campaignid_ = new ::std::string;
  }
  campaignid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_campaignid() {
  set_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    campaignid_ = new ::std::string;
  }
  return campaignid_;
}
inline ::std::string* BidderResponse_Ad::release_campaignid() {
  clear_has_campaignid();
  if (campaignid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = campaignid_;
    campaignid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_campaignid(::std::string* campaignid) {
  if (campaignid_ != &::google::protobuf::internal::kEmptyString) {
    delete campaignid_;
  }
  if (campaignid) {
    set_has_campaignid();
    campaignid_ = campaignid;
  } else {
    clear_has_campaignid();
    campaignid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string advertiserName = 3;
inline bool BidderResponse_Ad::has_advertisername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidderResponse_Ad::set_has_advertisername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidderResponse_Ad::clear_has_advertisername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidderResponse_Ad::clear_advertisername() {
  if (advertisername_ != &::google::protobuf::internal::kEmptyString) {
    advertisername_->clear();
  }
  clear_has_advertisername();
}
inline const ::std::string& BidderResponse_Ad::advertisername() const {
  return *advertisername_;
}
inline void BidderResponse_Ad::set_advertisername(const ::std::string& value) {
  set_has_advertisername();
  if (advertisername_ == &::google::protobuf::internal::kEmptyString) {
    advertisername_ = new ::std::string;
  }
  advertisername_->assign(value);
}
inline void BidderResponse_Ad::set_advertisername(const char* value) {
  set_has_advertisername();
  if (advertisername_ == &::google::protobuf::internal::kEmptyString) {
    advertisername_ = new ::std::string;
  }
  advertisername_->assign(value);
}
inline void BidderResponse_Ad::set_advertisername(const char* value, size_t size) {
  set_has_advertisername();
  if (advertisername_ == &::google::protobuf::internal::kEmptyString) {
    advertisername_ = new ::std::string;
  }
  advertisername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_advertisername() {
  set_has_advertisername();
  if (advertisername_ == &::google::protobuf::internal::kEmptyString) {
    advertisername_ = new ::std::string;
  }
  return advertisername_;
}
inline ::std::string* BidderResponse_Ad::release_advertisername() {
  clear_has_advertisername();
  if (advertisername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = advertisername_;
    advertisername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_advertisername(::std::string* advertisername) {
  if (advertisername_ != &::google::protobuf::internal::kEmptyString) {
    delete advertisername_;
  }
  if (advertisername) {
    set_has_advertisername();
    advertisername_ = advertisername;
  } else {
    clear_has_advertisername();
    advertisername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string category = 4;
inline bool BidderResponse_Ad::has_category() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidderResponse_Ad::set_has_category() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidderResponse_Ad::clear_has_category() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidderResponse_Ad::clear_category() {
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    category_->clear();
  }
  clear_has_category();
}
inline const ::std::string& BidderResponse_Ad::category() const {
  return *category_;
}
inline void BidderResponse_Ad::set_category(const ::std::string& value) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    category_ = new ::std::string;
  }
  category_->assign(value);
}
inline void BidderResponse_Ad::set_category(const char* value) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    category_ = new ::std::string;
  }
  category_->assign(value);
}
inline void BidderResponse_Ad::set_category(const char* value, size_t size) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    category_ = new ::std::string;
  }
  category_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_category() {
  set_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    category_ = new ::std::string;
  }
  return category_;
}
inline ::std::string* BidderResponse_Ad::release_category() {
  clear_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = category_;
    category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_category(::std::string* category) {
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (category) {
    set_has_category();
    category_ = category;
  } else {
    clear_has_category();
    category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool hasVpaidCreative = 16;
inline bool BidderResponse_Ad::has_hasvpaidcreative() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidderResponse_Ad::set_has_hasvpaidcreative() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidderResponse_Ad::clear_has_hasvpaidcreative() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidderResponse_Ad::clear_hasvpaidcreative() {
  hasvpaidcreative_ = false;
  clear_has_hasvpaidcreative();
}
inline bool BidderResponse_Ad::hasvpaidcreative() const {
  return hasvpaidcreative_;
}
inline void BidderResponse_Ad::set_hasvpaidcreative(bool value) {
  set_has_hasvpaidcreative();
  hasvpaidcreative_ = value;
}

// optional string adId = 5;
inline bool BidderResponse_Ad::has_adid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidderResponse_Ad::set_has_adid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidderResponse_Ad::clear_has_adid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidderResponse_Ad::clear_adid() {
  if (adid_ != &::google::protobuf::internal::kEmptyString) {
    adid_->clear();
  }
  clear_has_adid();
}
inline const ::std::string& BidderResponse_Ad::adid() const {
  return *adid_;
}
inline void BidderResponse_Ad::set_adid(const ::std::string& value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
}
inline void BidderResponse_Ad::set_adid(const char* value) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
}
inline void BidderResponse_Ad::set_adid(const char* value, size_t size) {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  adid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_adid() {
  set_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    adid_ = new ::std::string;
  }
  return adid_;
}
inline ::std::string* BidderResponse_Ad::release_adid() {
  clear_has_adid();
  if (adid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adid_;
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_adid(::std::string* adid) {
  if (adid_ != &::google::protobuf::internal::kEmptyString) {
    delete adid_;
  }
  if (adid) {
    set_has_adid();
    adid_ = adid;
  } else {
    clear_has_adid();
    adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sequence = 20;
inline bool BidderResponse_Ad::has_sequence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidderResponse_Ad::set_has_sequence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidderResponse_Ad::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidderResponse_Ad::clear_sequence() {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    sequence_->clear();
  }
  clear_has_sequence();
}
inline const ::std::string& BidderResponse_Ad::sequence() const {
  return *sequence_;
}
inline void BidderResponse_Ad::set_sequence(const ::std::string& value) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(value);
}
inline void BidderResponse_Ad::set_sequence(const char* value) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(value);
}
inline void BidderResponse_Ad::set_sequence(const char* value, size_t size) {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  sequence_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_sequence() {
  set_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    sequence_ = new ::std::string;
  }
  return sequence_;
}
inline ::std::string* BidderResponse_Ad::release_sequence() {
  clear_has_sequence();
  if (sequence_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sequence_;
    sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_sequence(::std::string* sequence) {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    delete sequence_;
  }
  if (sequence) {
    set_has_sequence();
    sequence_ = sequence;
  } else {
    clear_has_sequence();
    sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 6;
inline bool BidderResponse_Ad::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidderResponse_Ad::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidderResponse_Ad::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidderResponse_Ad::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& BidderResponse_Ad::type() const {
  return *type_;
}
inline void BidderResponse_Ad::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BidderResponse_Ad::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BidderResponse_Ad::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* BidderResponse_Ad::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.msg.BidderResponse.Ad.AdSystem adSystem = 7;
inline bool BidderResponse_Ad::has_adsystem() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidderResponse_Ad::set_has_adsystem() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidderResponse_Ad::clear_has_adsystem() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidderResponse_Ad::clear_adsystem() {
  if (adsystem_ != NULL) adsystem_->::com::rj::protos::msg::BidderResponse_Ad_AdSystem::Clear();
  clear_has_adsystem();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_AdSystem& BidderResponse_Ad::adsystem() const {
  return adsystem_ != NULL ? *adsystem_ : *default_instance_->adsystem_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_AdSystem* BidderResponse_Ad::mutable_adsystem() {
  set_has_adsystem();
  if (adsystem_ == NULL) adsystem_ = new ::com::rj::protos::msg::BidderResponse_Ad_AdSystem;
  return adsystem_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_AdSystem* BidderResponse_Ad::release_adsystem() {
  clear_has_adsystem();
  ::com::rj::protos::msg::BidderResponse_Ad_AdSystem* temp = adsystem_;
  adsystem_ = NULL;
  return temp;
}
inline void BidderResponse_Ad::set_allocated_adsystem(::com::rj::protos::msg::BidderResponse_Ad_AdSystem* adsystem) {
  delete adsystem_;
  adsystem_ = adsystem;
  if (adsystem) {
    set_has_adsystem();
  } else {
    clear_has_adsystem();
  }
}

// optional string adTag = 8;
inline bool BidderResponse_Ad::has_adtag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidderResponse_Ad::set_has_adtag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidderResponse_Ad::clear_has_adtag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidderResponse_Ad::clear_adtag() {
  if (adtag_ != &::google::protobuf::internal::kEmptyString) {
    adtag_->clear();
  }
  clear_has_adtag();
}
inline const ::std::string& BidderResponse_Ad::adtag() const {
  return *adtag_;
}
inline void BidderResponse_Ad::set_adtag(const ::std::string& value) {
  set_has_adtag();
  if (adtag_ == &::google::protobuf::internal::kEmptyString) {
    adtag_ = new ::std::string;
  }
  adtag_->assign(value);
}
inline void BidderResponse_Ad::set_adtag(const char* value) {
  set_has_adtag();
  if (adtag_ == &::google::protobuf::internal::kEmptyString) {
    adtag_ = new ::std::string;
  }
  adtag_->assign(value);
}
inline void BidderResponse_Ad::set_adtag(const char* value, size_t size) {
  set_has_adtag();
  if (adtag_ == &::google::protobuf::internal::kEmptyString) {
    adtag_ = new ::std::string;
  }
  adtag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_adtag() {
  set_has_adtag();
  if (adtag_ == &::google::protobuf::internal::kEmptyString) {
    adtag_ = new ::std::string;
  }
  return adtag_;
}
inline ::std::string* BidderResponse_Ad::release_adtag() {
  clear_has_adtag();
  if (adtag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adtag_;
    adtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_adtag(::std::string* adtag) {
  if (adtag_ != &::google::protobuf::internal::kEmptyString) {
    delete adtag_;
  }
  if (adtag) {
    set_has_adtag();
    adtag_ = adtag;
  } else {
    clear_has_adtag();
    adtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adDesc = 9;
inline bool BidderResponse_Ad::has_addesc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidderResponse_Ad::set_has_addesc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidderResponse_Ad::clear_has_addesc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidderResponse_Ad::clear_addesc() {
  if (addesc_ != &::google::protobuf::internal::kEmptyString) {
    addesc_->clear();
  }
  clear_has_addesc();
}
inline const ::std::string& BidderResponse_Ad::addesc() const {
  return *addesc_;
}
inline void BidderResponse_Ad::set_addesc(const ::std::string& value) {
  set_has_addesc();
  if (addesc_ == &::google::protobuf::internal::kEmptyString) {
    addesc_ = new ::std::string;
  }
  addesc_->assign(value);
}
inline void BidderResponse_Ad::set_addesc(const char* value) {
  set_has_addesc();
  if (addesc_ == &::google::protobuf::internal::kEmptyString) {
    addesc_ = new ::std::string;
  }
  addesc_->assign(value);
}
inline void BidderResponse_Ad::set_addesc(const char* value, size_t size) {
  set_has_addesc();
  if (addesc_ == &::google::protobuf::internal::kEmptyString) {
    addesc_ = new ::std::string;
  }
  addesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_addesc() {
  set_has_addesc();
  if (addesc_ == &::google::protobuf::internal::kEmptyString) {
    addesc_ = new ::std::string;
  }
  return addesc_;
}
inline ::std::string* BidderResponse_Ad::release_addesc() {
  clear_has_addesc();
  if (addesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addesc_;
    addesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_addesc(::std::string* addesc) {
  if (addesc_ != &::google::protobuf::internal::kEmptyString) {
    delete addesc_;
  }
  if (addesc) {
    set_has_addesc();
    addesc_ = addesc;
  } else {
    clear_has_addesc();
    addesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string adSurvey = 10;
inline int BidderResponse_Ad::adsurvey_size() const {
  return adsurvey_.size();
}
inline void BidderResponse_Ad::clear_adsurvey() {
  adsurvey_.Clear();
}
inline const ::std::string& BidderResponse_Ad::adsurvey(int index) const {
  return adsurvey_.Get(index);
}
inline ::std::string* BidderResponse_Ad::mutable_adsurvey(int index) {
  return adsurvey_.Mutable(index);
}
inline void BidderResponse_Ad::set_adsurvey(int index, const ::std::string& value) {
  adsurvey_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad::set_adsurvey(int index, const char* value) {
  adsurvey_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad::set_adsurvey(int index, const char* value, size_t size) {
  adsurvey_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::add_adsurvey() {
  return adsurvey_.Add();
}
inline void BidderResponse_Ad::add_adsurvey(const ::std::string& value) {
  adsurvey_.Add()->assign(value);
}
inline void BidderResponse_Ad::add_adsurvey(const char* value) {
  adsurvey_.Add()->assign(value);
}
inline void BidderResponse_Ad::add_adsurvey(const char* value, size_t size) {
  adsurvey_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad::adsurvey() const {
  return adsurvey_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad::mutable_adsurvey() {
  return &adsurvey_;
}

// optional string adTitle = 17;
inline bool BidderResponse_Ad::has_adtitle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidderResponse_Ad::set_has_adtitle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidderResponse_Ad::clear_has_adtitle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidderResponse_Ad::clear_adtitle() {
  if (adtitle_ != &::google::protobuf::internal::kEmptyString) {
    adtitle_->clear();
  }
  clear_has_adtitle();
}
inline const ::std::string& BidderResponse_Ad::adtitle() const {
  return *adtitle_;
}
inline void BidderResponse_Ad::set_adtitle(const ::std::string& value) {
  set_has_adtitle();
  if (adtitle_ == &::google::protobuf::internal::kEmptyString) {
    adtitle_ = new ::std::string;
  }
  adtitle_->assign(value);
}
inline void BidderResponse_Ad::set_adtitle(const char* value) {
  set_has_adtitle();
  if (adtitle_ == &::google::protobuf::internal::kEmptyString) {
    adtitle_ = new ::std::string;
  }
  adtitle_->assign(value);
}
inline void BidderResponse_Ad::set_adtitle(const char* value, size_t size) {
  set_has_adtitle();
  if (adtitle_ == &::google::protobuf::internal::kEmptyString) {
    adtitle_ = new ::std::string;
  }
  adtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_adtitle() {
  set_has_adtitle();
  if (adtitle_ == &::google::protobuf::internal::kEmptyString) {
    adtitle_ = new ::std::string;
  }
  return adtitle_;
}
inline ::std::string* BidderResponse_Ad::release_adtitle() {
  clear_has_adtitle();
  if (adtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adtitle_;
    adtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_adtitle(::std::string* adtitle) {
  if (adtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete adtitle_;
  }
  if (adtitle) {
    set_has_adtitle();
    adtitle_ = adtitle;
  } else {
    clear_has_adtitle();
    adtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.msg.BidderResponse.Ad.Impression impTrack = 19;
inline int BidderResponse_Ad::imptrack_size() const {
  return imptrack_.size();
}
inline void BidderResponse_Ad::clear_imptrack() {
  imptrack_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_Impression& BidderResponse_Ad::imptrack(int index) const {
  return imptrack_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_Impression* BidderResponse_Ad::mutable_imptrack(int index) {
  return imptrack_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_Impression* BidderResponse_Ad::add_imptrack() {
  return imptrack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_Impression >&
BidderResponse_Ad::imptrack() const {
  return imptrack_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_Impression >*
BidderResponse_Ad::mutable_imptrack() {
  return &imptrack_;
}

// repeated string errTrack = 12;
inline int BidderResponse_Ad::errtrack_size() const {
  return errtrack_.size();
}
inline void BidderResponse_Ad::clear_errtrack() {
  errtrack_.Clear();
}
inline const ::std::string& BidderResponse_Ad::errtrack(int index) const {
  return errtrack_.Get(index);
}
inline ::std::string* BidderResponse_Ad::mutable_errtrack(int index) {
  return errtrack_.Mutable(index);
}
inline void BidderResponse_Ad::set_errtrack(int index, const ::std::string& value) {
  errtrack_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad::set_errtrack(int index, const char* value) {
  errtrack_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad::set_errtrack(int index, const char* value, size_t size) {
  errtrack_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::add_errtrack() {
  return errtrack_.Add();
}
inline void BidderResponse_Ad::add_errtrack(const ::std::string& value) {
  errtrack_.Add()->assign(value);
}
inline void BidderResponse_Ad::add_errtrack(const char* value) {
  errtrack_.Add()->assign(value);
}
inline void BidderResponse_Ad::add_errtrack(const char* value, size_t size) {
  errtrack_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad::errtrack() const {
  return errtrack_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad::mutable_errtrack() {
  return &errtrack_;
}

// repeated .com.rj.protos.msg.BidderResponse.Ad.LinearCreative linearCreative = 13;
inline int BidderResponse_Ad::linearcreative_size() const {
  return linearcreative_.size();
}
inline void BidderResponse_Ad::clear_linearcreative() {
  linearcreative_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative& BidderResponse_Ad::linearcreative(int index) const {
  return linearcreative_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative* BidderResponse_Ad::mutable_linearcreative(int index) {
  return linearcreative_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative* BidderResponse_Ad::add_linearcreative() {
  return linearcreative_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative >&
BidderResponse_Ad::linearcreative() const {
  return linearcreative_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad_LinearCreative >*
BidderResponse_Ad::mutable_linearcreative() {
  return &linearcreative_;
}

// optional .com.rj.protos.msg.BidderResponse.Ad.CompanionCreative companionCreative = 14;
inline bool BidderResponse_Ad::has_companioncreative() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidderResponse_Ad::set_has_companioncreative() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidderResponse_Ad::clear_has_companioncreative() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidderResponse_Ad::clear_companioncreative() {
  if (companioncreative_ != NULL) companioncreative_->::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative::Clear();
  clear_has_companioncreative();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative& BidderResponse_Ad::companioncreative() const {
  return companioncreative_ != NULL ? *companioncreative_ : *default_instance_->companioncreative_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative* BidderResponse_Ad::mutable_companioncreative() {
  set_has_companioncreative();
  if (companioncreative_ == NULL) companioncreative_ = new ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative;
  return companioncreative_;
}
inline ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative* BidderResponse_Ad::release_companioncreative() {
  clear_has_companioncreative();
  ::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative* temp = companioncreative_;
  companioncreative_ = NULL;
  return temp;
}
inline void BidderResponse_Ad::set_allocated_companioncreative(::com::rj::protos::msg::BidderResponse_Ad_CompanionCreative* companioncreative) {
  delete companioncreative_;
  companioncreative_ = companioncreative;
  if (companioncreative) {
    set_has_companioncreative();
  } else {
    clear_has_companioncreative();
  }
}

// repeated string extension = 18;
inline int BidderResponse_Ad::extension_size() const {
  return extension_.size();
}
inline void BidderResponse_Ad::clear_extension() {
  extension_.Clear();
}
inline const ::std::string& BidderResponse_Ad::extension(int index) const {
  return extension_.Get(index);
}
inline ::std::string* BidderResponse_Ad::mutable_extension(int index) {
  return extension_.Mutable(index);
}
inline void BidderResponse_Ad::set_extension(int index, const ::std::string& value) {
  extension_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad::set_extension(int index, const char* value) {
  extension_.Mutable(index)->assign(value);
}
inline void BidderResponse_Ad::set_extension(int index, const char* value, size_t size) {
  extension_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::add_extension() {
  return extension_.Add();
}
inline void BidderResponse_Ad::add_extension(const ::std::string& value) {
  extension_.Add()->assign(value);
}
inline void BidderResponse_Ad::add_extension(const char* value) {
  extension_.Add()->assign(value);
}
inline void BidderResponse_Ad::add_extension(const char* value, size_t size) {
  extension_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidderResponse_Ad::extension() const {
  return extension_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidderResponse_Ad::mutable_extension() {
  return &extension_;
}

// optional string followAdditionalWrappers = 21;
inline bool BidderResponse_Ad::has_followadditionalwrappers() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidderResponse_Ad::set_has_followadditionalwrappers() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidderResponse_Ad::clear_has_followadditionalwrappers() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidderResponse_Ad::clear_followadditionalwrappers() {
  if (followadditionalwrappers_ != &::google::protobuf::internal::kEmptyString) {
    followadditionalwrappers_->clear();
  }
  clear_has_followadditionalwrappers();
}
inline const ::std::string& BidderResponse_Ad::followadditionalwrappers() const {
  return *followadditionalwrappers_;
}
inline void BidderResponse_Ad::set_followadditionalwrappers(const ::std::string& value) {
  set_has_followadditionalwrappers();
  if (followadditionalwrappers_ == &::google::protobuf::internal::kEmptyString) {
    followadditionalwrappers_ = new ::std::string;
  }
  followadditionalwrappers_->assign(value);
}
inline void BidderResponse_Ad::set_followadditionalwrappers(const char* value) {
  set_has_followadditionalwrappers();
  if (followadditionalwrappers_ == &::google::protobuf::internal::kEmptyString) {
    followadditionalwrappers_ = new ::std::string;
  }
  followadditionalwrappers_->assign(value);
}
inline void BidderResponse_Ad::set_followadditionalwrappers(const char* value, size_t size) {
  set_has_followadditionalwrappers();
  if (followadditionalwrappers_ == &::google::protobuf::internal::kEmptyString) {
    followadditionalwrappers_ = new ::std::string;
  }
  followadditionalwrappers_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_followadditionalwrappers() {
  set_has_followadditionalwrappers();
  if (followadditionalwrappers_ == &::google::protobuf::internal::kEmptyString) {
    followadditionalwrappers_ = new ::std::string;
  }
  return followadditionalwrappers_;
}
inline ::std::string* BidderResponse_Ad::release_followadditionalwrappers() {
  clear_has_followadditionalwrappers();
  if (followadditionalwrappers_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = followadditionalwrappers_;
    followadditionalwrappers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_followadditionalwrappers(::std::string* followadditionalwrappers) {
  if (followadditionalwrappers_ != &::google::protobuf::internal::kEmptyString) {
    delete followadditionalwrappers_;
  }
  if (followadditionalwrappers) {
    set_has_followadditionalwrappers();
    followadditionalwrappers_ = followadditionalwrappers;
  } else {
    clear_has_followadditionalwrappers();
    followadditionalwrappers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string allowMultipleAds = 22;
inline bool BidderResponse_Ad::has_allowmultipleads() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BidderResponse_Ad::set_has_allowmultipleads() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BidderResponse_Ad::clear_has_allowmultipleads() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BidderResponse_Ad::clear_allowmultipleads() {
  if (allowmultipleads_ != &::google::protobuf::internal::kEmptyString) {
    allowmultipleads_->clear();
  }
  clear_has_allowmultipleads();
}
inline const ::std::string& BidderResponse_Ad::allowmultipleads() const {
  return *allowmultipleads_;
}
inline void BidderResponse_Ad::set_allowmultipleads(const ::std::string& value) {
  set_has_allowmultipleads();
  if (allowmultipleads_ == &::google::protobuf::internal::kEmptyString) {
    allowmultipleads_ = new ::std::string;
  }
  allowmultipleads_->assign(value);
}
inline void BidderResponse_Ad::set_allowmultipleads(const char* value) {
  set_has_allowmultipleads();
  if (allowmultipleads_ == &::google::protobuf::internal::kEmptyString) {
    allowmultipleads_ = new ::std::string;
  }
  allowmultipleads_->assign(value);
}
inline void BidderResponse_Ad::set_allowmultipleads(const char* value, size_t size) {
  set_has_allowmultipleads();
  if (allowmultipleads_ == &::google::protobuf::internal::kEmptyString) {
    allowmultipleads_ = new ::std::string;
  }
  allowmultipleads_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_allowmultipleads() {
  set_has_allowmultipleads();
  if (allowmultipleads_ == &::google::protobuf::internal::kEmptyString) {
    allowmultipleads_ = new ::std::string;
  }
  return allowmultipleads_;
}
inline ::std::string* BidderResponse_Ad::release_allowmultipleads() {
  clear_has_allowmultipleads();
  if (allowmultipleads_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = allowmultipleads_;
    allowmultipleads_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_allowmultipleads(::std::string* allowmultipleads) {
  if (allowmultipleads_ != &::google::protobuf::internal::kEmptyString) {
    delete allowmultipleads_;
  }
  if (allowmultipleads) {
    set_has_allowmultipleads();
    allowmultipleads_ = allowmultipleads;
  } else {
    clear_has_allowmultipleads();
    allowmultipleads_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fallbackOnNoAd = 23;
inline bool BidderResponse_Ad::has_fallbackonnoad() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BidderResponse_Ad::set_has_fallbackonnoad() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BidderResponse_Ad::clear_has_fallbackonnoad() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BidderResponse_Ad::clear_fallbackonnoad() {
  if (fallbackonnoad_ != &::google::protobuf::internal::kEmptyString) {
    fallbackonnoad_->clear();
  }
  clear_has_fallbackonnoad();
}
inline const ::std::string& BidderResponse_Ad::fallbackonnoad() const {
  return *fallbackonnoad_;
}
inline void BidderResponse_Ad::set_fallbackonnoad(const ::std::string& value) {
  set_has_fallbackonnoad();
  if (fallbackonnoad_ == &::google::protobuf::internal::kEmptyString) {
    fallbackonnoad_ = new ::std::string;
  }
  fallbackonnoad_->assign(value);
}
inline void BidderResponse_Ad::set_fallbackonnoad(const char* value) {
  set_has_fallbackonnoad();
  if (fallbackonnoad_ == &::google::protobuf::internal::kEmptyString) {
    fallbackonnoad_ = new ::std::string;
  }
  fallbackonnoad_->assign(value);
}
inline void BidderResponse_Ad::set_fallbackonnoad(const char* value, size_t size) {
  set_has_fallbackonnoad();
  if (fallbackonnoad_ == &::google::protobuf::internal::kEmptyString) {
    fallbackonnoad_ = new ::std::string;
  }
  fallbackonnoad_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse_Ad::mutable_fallbackonnoad() {
  set_has_fallbackonnoad();
  if (fallbackonnoad_ == &::google::protobuf::internal::kEmptyString) {
    fallbackonnoad_ = new ::std::string;
  }
  return fallbackonnoad_;
}
inline ::std::string* BidderResponse_Ad::release_fallbackonnoad() {
  clear_has_fallbackonnoad();
  if (fallbackonnoad_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fallbackonnoad_;
    fallbackonnoad_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse_Ad::set_allocated_fallbackonnoad(::std::string* fallbackonnoad) {
  if (fallbackonnoad_ != &::google::protobuf::internal::kEmptyString) {
    delete fallbackonnoad_;
  }
  if (fallbackonnoad) {
    set_has_fallbackonnoad();
    fallbackonnoad_ = fallbackonnoad;
  } else {
    clear_has_fallbackonnoad();
    fallbackonnoad_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidderResponse

// optional string id = 1;
inline bool BidderResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidderResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidderResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidderResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidderResponse::id() const {
  return *id_;
}
inline void BidderResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidderResponse::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidderResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bidderId = 2;
inline bool BidderResponse::has_bidderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidderResponse::set_has_bidderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidderResponse::clear_has_bidderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidderResponse::clear_bidderid() {
  if (bidderid_ != &::google::protobuf::internal::kEmptyString) {
    bidderid_->clear();
  }
  clear_has_bidderid();
}
inline const ::std::string& BidderResponse::bidderid() const {
  return *bidderid_;
}
inline void BidderResponse::set_bidderid(const ::std::string& value) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(value);
}
inline void BidderResponse::set_bidderid(const char* value) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(value);
}
inline void BidderResponse::set_bidderid(const char* value, size_t size) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidderResponse::mutable_bidderid() {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  return bidderid_;
}
inline ::std::string* BidderResponse::release_bidderid() {
  clear_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bidderid_;
    bidderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidderResponse::set_allocated_bidderid(::std::string* bidderid) {
  if (bidderid_ != &::google::protobuf::internal::kEmptyString) {
    delete bidderid_;
  }
  if (bidderid) {
    set_has_bidderid();
    bidderid_ = bidderid;
  } else {
    clear_has_bidderid();
    bidderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.rj.protos.msg.BidderResponse.Ad ads = 3;
inline int BidderResponse::ads_size() const {
  return ads_.size();
}
inline void BidderResponse::clear_ads() {
  ads_.Clear();
}
inline const ::com::rj::protos::msg::BidderResponse_Ad& BidderResponse::ads(int index) const {
  return ads_.Get(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad* BidderResponse::mutable_ads(int index) {
  return ads_.Mutable(index);
}
inline ::com::rj::protos::msg::BidderResponse_Ad* BidderResponse::add_ads() {
  return ads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad >&
BidderResponse::ads() const {
  return ads_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::msg::BidderResponse_Ad >*
BidderResponse::mutable_ads() {
  return &ads_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AdBidderResponseTemplate_2eproto__INCLUDED
