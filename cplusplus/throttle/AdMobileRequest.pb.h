// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdMobileRequest.proto

#ifndef PROTOBUF_AdMobileRequest_2eproto__INCLUDED
#define PROTOBUF_AdMobileRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace mobile {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AdMobileRequest_2eproto();
void protobuf_AssignDesc_AdMobileRequest_2eproto();
void protobuf_ShutdownFile_AdMobileRequest_2eproto();

class MobileAdRequest;
class MobileAdRequest_Device;
class MobileAdRequest_User;

enum MobileAdRequest_User_Gender {
  MobileAdRequest_User_Gender_MALE = 0,
  MobileAdRequest_User_Gender_FEMALE = 1
};
bool MobileAdRequest_User_Gender_IsValid(int value);
const MobileAdRequest_User_Gender MobileAdRequest_User_Gender_Gender_MIN = MobileAdRequest_User_Gender_MALE;
const MobileAdRequest_User_Gender MobileAdRequest_User_Gender_Gender_MAX = MobileAdRequest_User_Gender_FEMALE;
const int MobileAdRequest_User_Gender_Gender_ARRAYSIZE = MobileAdRequest_User_Gender_Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_User_Gender_descriptor();
inline const ::std::string& MobileAdRequest_User_Gender_Name(MobileAdRequest_User_Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_User_Gender_descriptor(), value);
}
inline bool MobileAdRequest_User_Gender_Parse(
    const ::std::string& name, MobileAdRequest_User_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_User_Gender>(
    MobileAdRequest_User_Gender_descriptor(), name, value);
}
enum MobileAdRequest_TestFlag {
  MobileAdRequest_TestFlag_TRUE = 0,
  MobileAdRequest_TestFlag_FALSE = 1
};
bool MobileAdRequest_TestFlag_IsValid(int value);
const MobileAdRequest_TestFlag MobileAdRequest_TestFlag_TestFlag_MIN = MobileAdRequest_TestFlag_TRUE;
const MobileAdRequest_TestFlag MobileAdRequest_TestFlag_TestFlag_MAX = MobileAdRequest_TestFlag_FALSE;
const int MobileAdRequest_TestFlag_TestFlag_ARRAYSIZE = MobileAdRequest_TestFlag_TestFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_TestFlag_descriptor();
inline const ::std::string& MobileAdRequest_TestFlag_Name(MobileAdRequest_TestFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_TestFlag_descriptor(), value);
}
inline bool MobileAdRequest_TestFlag_Parse(
    const ::std::string& name, MobileAdRequest_TestFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_TestFlag>(
    MobileAdRequest_TestFlag_descriptor(), name, value);
}
enum MobileAdRequest_Type {
  MobileAdRequest_Type_BANNER = 0,
  MobileAdRequest_Type_VAD = 1,
  MobileAdRequest_Type_NATIVE = 2
};
bool MobileAdRequest_Type_IsValid(int value);
const MobileAdRequest_Type MobileAdRequest_Type_Type_MIN = MobileAdRequest_Type_BANNER;
const MobileAdRequest_Type MobileAdRequest_Type_Type_MAX = MobileAdRequest_Type_NATIVE;
const int MobileAdRequest_Type_Type_ARRAYSIZE = MobileAdRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_Type_descriptor();
inline const ::std::string& MobileAdRequest_Type_Name(MobileAdRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_Type_descriptor(), value);
}
inline bool MobileAdRequest_Type_Parse(
    const ::std::string& name, MobileAdRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_Type>(
    MobileAdRequest_Type_descriptor(), name, value);
}
enum MobileAdRequest_Platform {
  MobileAdRequest_Platform_all = 0,
  MobileAdRequest_Platform_android = 1,
  MobileAdRequest_Platform_ios = 2
};
bool MobileAdRequest_Platform_IsValid(int value);
const MobileAdRequest_Platform MobileAdRequest_Platform_Platform_MIN = MobileAdRequest_Platform_all;
const MobileAdRequest_Platform MobileAdRequest_Platform_Platform_MAX = MobileAdRequest_Platform_ios;
const int MobileAdRequest_Platform_Platform_ARRAYSIZE = MobileAdRequest_Platform_Platform_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_Platform_descriptor();
inline const ::std::string& MobileAdRequest_Platform_Name(MobileAdRequest_Platform value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_Platform_descriptor(), value);
}
inline bool MobileAdRequest_Platform_Parse(
    const ::std::string& name, MobileAdRequest_Platform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_Platform>(
    MobileAdRequest_Platform_descriptor(), name, value);
}
enum MobileAdRequest_SlidingEffect {
  MobileAdRequest_SlidingEffect_SINGLE = 0,
  MobileAdRequest_SlidingEffect_SLIDING = 1
};
bool MobileAdRequest_SlidingEffect_IsValid(int value);
const MobileAdRequest_SlidingEffect MobileAdRequest_SlidingEffect_SlidingEffect_MIN = MobileAdRequest_SlidingEffect_SINGLE;
const MobileAdRequest_SlidingEffect MobileAdRequest_SlidingEffect_SlidingEffect_MAX = MobileAdRequest_SlidingEffect_SLIDING;
const int MobileAdRequest_SlidingEffect_SlidingEffect_ARRAYSIZE = MobileAdRequest_SlidingEffect_SlidingEffect_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_SlidingEffect_descriptor();
inline const ::std::string& MobileAdRequest_SlidingEffect_Name(MobileAdRequest_SlidingEffect value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_SlidingEffect_descriptor(), value);
}
inline bool MobileAdRequest_SlidingEffect_Parse(
    const ::std::string& name, MobileAdRequest_SlidingEffect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_SlidingEffect>(
    MobileAdRequest_SlidingEffect_descriptor(), name, value);
}
enum MobileAdRequest_Orientation {
  MobileAdRequest_Orientation_LANDSCAPE = 0,
  MobileAdRequest_Orientation_PORTRAIT = 1
};
bool MobileAdRequest_Orientation_IsValid(int value);
const MobileAdRequest_Orientation MobileAdRequest_Orientation_Orientation_MIN = MobileAdRequest_Orientation_LANDSCAPE;
const MobileAdRequest_Orientation MobileAdRequest_Orientation_Orientation_MAX = MobileAdRequest_Orientation_PORTRAIT;
const int MobileAdRequest_Orientation_Orientation_ARRAYSIZE = MobileAdRequest_Orientation_Orientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdRequest_Orientation_descriptor();
inline const ::std::string& MobileAdRequest_Orientation_Name(MobileAdRequest_Orientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdRequest_Orientation_descriptor(), value);
}
inline bool MobileAdRequest_Orientation_Parse(
    const ::std::string& name, MobileAdRequest_Orientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdRequest_Orientation>(
    MobileAdRequest_Orientation_descriptor(), name, value);
}
// ===================================================================

class MobileAdRequest_Device : public ::google::protobuf::Message {
 public:
  MobileAdRequest_Device();
  virtual ~MobileAdRequest_Device();

  MobileAdRequest_Device(const MobileAdRequest_Device& from);

  inline MobileAdRequest_Device& operator=(const MobileAdRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_Device& default_instance();

  void Swap(MobileAdRequest_Device* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_Device& from);
  void MergeFrom(const MobileAdRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vender = 1;
  inline bool has_vender() const;
  inline void clear_vender();
  static const int kVenderFieldNumber = 1;
  inline const ::std::string& vender() const;
  inline void set_vender(const ::std::string& value);
  inline void set_vender(const char* value);
  inline void set_vender(const char* value, size_t size);
  inline ::std::string* mutable_vender();
  inline ::std::string* release_vender();
  inline void set_allocated_vender(::std::string* vender);

  // optional string modelName = 2;
  inline bool has_modelname() const;
  inline void clear_modelname();
  static const int kModelNameFieldNumber = 2;
  inline const ::std::string& modelname() const;
  inline void set_modelname(const ::std::string& value);
  inline void set_modelname(const char* value);
  inline void set_modelname(const char* value, size_t size);
  inline ::std::string* mutable_modelname();
  inline ::std::string* release_modelname();
  inline void set_allocated_modelname(::std::string* modelname);

  // optional string marketingName = 3;
  inline bool has_marketingname() const;
  inline void clear_marketingname();
  static const int kMarketingNameFieldNumber = 3;
  inline const ::std::string& marketingname() const;
  inline void set_marketingname(const ::std::string& value);
  inline void set_marketingname(const char* value);
  inline void set_marketingname(const char* value, size_t size);
  inline ::std::string* mutable_marketingname();
  inline ::std::string* release_marketingname();
  inline void set_allocated_marketingname(::std::string* marketingname);

  // optional string screenWidth = 4;
  inline bool has_screenwidth() const;
  inline void clear_screenwidth();
  static const int kScreenWidthFieldNumber = 4;
  inline const ::std::string& screenwidth() const;
  inline void set_screenwidth(const ::std::string& value);
  inline void set_screenwidth(const char* value);
  inline void set_screenwidth(const char* value, size_t size);
  inline ::std::string* mutable_screenwidth();
  inline ::std::string* release_screenwidth();
  inline void set_allocated_screenwidth(::std::string* screenwidth);

  // optional string screenHeight = 5;
  inline bool has_screenheight() const;
  inline void clear_screenheight();
  static const int kScreenHeightFieldNumber = 5;
  inline const ::std::string& screenheight() const;
  inline void set_screenheight(const ::std::string& value);
  inline void set_screenheight(const char* value);
  inline void set_screenheight(const char* value, size_t size);
  inline ::std::string* mutable_screenheight();
  inline ::std::string* release_screenheight();
  inline void set_allocated_screenheight(::std::string* screenheight);

  // optional string density = 6;
  inline bool has_density() const;
  inline void clear_density();
  static const int kDensityFieldNumber = 6;
  inline const ::std::string& density() const;
  inline void set_density(const ::std::string& value);
  inline void set_density(const char* value);
  inline void set_density(const char* value, size_t size);
  inline ::std::string* mutable_density();
  inline ::std::string* release_density();
  inline void set_allocated_density(::std::string* density);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.Device)
 private:
  inline void set_has_vender();
  inline void clear_has_vender();
  inline void set_has_modelname();
  inline void clear_has_modelname();
  inline void set_has_marketingname();
  inline void clear_has_marketingname();
  inline void set_has_screenwidth();
  inline void clear_has_screenwidth();
  inline void set_has_screenheight();
  inline void clear_has_screenheight();
  inline void set_has_density();
  inline void clear_has_density();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* vender_;
  ::std::string* modelname_;
  ::std::string* marketingname_;
  ::std::string* screenwidth_;
  ::std::string* screenheight_;
  ::std::string* density_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileRequest_2eproto();
  friend void protobuf_AssignDesc_AdMobileRequest_2eproto();
  friend void protobuf_ShutdownFile_AdMobileRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest_User : public ::google::protobuf::Message {
 public:
  MobileAdRequest_User();
  virtual ~MobileAdRequest_User();

  MobileAdRequest_User(const MobileAdRequest_User& from);

  inline MobileAdRequest_User& operator=(const MobileAdRequest_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest_User& default_instance();

  void Swap(MobileAdRequest_User* other);

  // implements Message ----------------------------------------------

  MobileAdRequest_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest_User& from);
  void MergeFrom(const MobileAdRequest_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdRequest_User_Gender Gender;
  static const Gender MALE = MobileAdRequest_User_Gender_MALE;
  static const Gender FEMALE = MobileAdRequest_User_Gender_FEMALE;
  static inline bool Gender_IsValid(int value) {
    return MobileAdRequest_User_Gender_IsValid(value);
  }
  static const Gender Gender_MIN =
    MobileAdRequest_User_Gender_Gender_MIN;
  static const Gender Gender_MAX =
    MobileAdRequest_User_Gender_Gender_MAX;
  static const int Gender_ARRAYSIZE =
    MobileAdRequest_User_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gender_descriptor() {
    return MobileAdRequest_User_Gender_descriptor();
  }
  static inline const ::std::string& Gender_Name(Gender value) {
    return MobileAdRequest_User_Gender_Name(value);
  }
  static inline bool Gender_Parse(const ::std::string& name,
      Gender* value) {
    return MobileAdRequest_User_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional .com.rj.protos.mobile.MobileAdRequest.User.Gender gender = 2;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 2;
  inline ::com::rj::protos::mobile::MobileAdRequest_User_Gender gender() const;
  inline void set_gender(::com::rj::protos::mobile::MobileAdRequest_User_Gender value);

  // optional string Age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline const ::std::string& age() const;
  inline void set_age(const ::std::string& value);
  inline void set_age(const char* value);
  inline void set_age(const char* value, size_t size);
  inline ::std::string* mutable_age();
  inline ::std::string* release_age();
  inline void set_allocated_age(::std::string* age);

  // optional string countryCode = 4;
  inline bool has_countrycode() const;
  inline void clear_countrycode();
  static const int kCountryCodeFieldNumber = 4;
  inline const ::std::string& countrycode() const;
  inline void set_countrycode(const ::std::string& value);
  inline void set_countrycode(const char* value);
  inline void set_countrycode(const char* value, size_t size);
  inline ::std::string* mutable_countrycode();
  inline ::std::string* release_countrycode();
  inline void set_allocated_countrycode(::std::string* countrycode);

  // optional string region = 5;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 5;
  inline const ::std::string& region() const;
  inline void set_region(const ::std::string& value);
  inline void set_region(const char* value);
  inline void set_region(const char* value, size_t size);
  inline ::std::string* mutable_region();
  inline ::std::string* release_region();
  inline void set_allocated_region(::std::string* region);

  // optional string city = 6;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 6;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest.User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_countrycode();
  inline void clear_has_countrycode();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_city();
  inline void clear_has_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::std::string* age_;
  ::std::string* countrycode_;
  ::std::string* region_;
  ::std::string* city_;
  int gender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileRequest_2eproto();
  friend void protobuf_AssignDesc_AdMobileRequest_2eproto();
  friend void protobuf_ShutdownFile_AdMobileRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest_User* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdRequest : public ::google::protobuf::Message {
 public:
  MobileAdRequest();
  virtual ~MobileAdRequest();

  MobileAdRequest(const MobileAdRequest& from);

  inline MobileAdRequest& operator=(const MobileAdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdRequest& default_instance();

  void Swap(MobileAdRequest* other);

  // implements Message ----------------------------------------------

  MobileAdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdRequest& from);
  void MergeFrom(const MobileAdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdRequest_Device Device;
  typedef MobileAdRequest_User User;

  typedef MobileAdRequest_TestFlag TestFlag;
  static const TestFlag TRUE = MobileAdRequest_TestFlag_TRUE;
  static const TestFlag FALSE = MobileAdRequest_TestFlag_FALSE;
  static inline bool TestFlag_IsValid(int value) {
    return MobileAdRequest_TestFlag_IsValid(value);
  }
  static const TestFlag TestFlag_MIN =
    MobileAdRequest_TestFlag_TestFlag_MIN;
  static const TestFlag TestFlag_MAX =
    MobileAdRequest_TestFlag_TestFlag_MAX;
  static const int TestFlag_ARRAYSIZE =
    MobileAdRequest_TestFlag_TestFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TestFlag_descriptor() {
    return MobileAdRequest_TestFlag_descriptor();
  }
  static inline const ::std::string& TestFlag_Name(TestFlag value) {
    return MobileAdRequest_TestFlag_Name(value);
  }
  static inline bool TestFlag_Parse(const ::std::string& name,
      TestFlag* value) {
    return MobileAdRequest_TestFlag_Parse(name, value);
  }

  typedef MobileAdRequest_Type Type;
  static const Type BANNER = MobileAdRequest_Type_BANNER;
  static const Type VAD = MobileAdRequest_Type_VAD;
  static const Type NATIVE = MobileAdRequest_Type_NATIVE;
  static inline bool Type_IsValid(int value) {
    return MobileAdRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MobileAdRequest_Type_Type_MIN;
  static const Type Type_MAX =
    MobileAdRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MobileAdRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MobileAdRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MobileAdRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MobileAdRequest_Type_Parse(name, value);
  }

  typedef MobileAdRequest_Platform Platform;
  static const Platform all = MobileAdRequest_Platform_all;
  static const Platform android = MobileAdRequest_Platform_android;
  static const Platform ios = MobileAdRequest_Platform_ios;
  static inline bool Platform_IsValid(int value) {
    return MobileAdRequest_Platform_IsValid(value);
  }
  static const Platform Platform_MIN =
    MobileAdRequest_Platform_Platform_MIN;
  static const Platform Platform_MAX =
    MobileAdRequest_Platform_Platform_MAX;
  static const int Platform_ARRAYSIZE =
    MobileAdRequest_Platform_Platform_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Platform_descriptor() {
    return MobileAdRequest_Platform_descriptor();
  }
  static inline const ::std::string& Platform_Name(Platform value) {
    return MobileAdRequest_Platform_Name(value);
  }
  static inline bool Platform_Parse(const ::std::string& name,
      Platform* value) {
    return MobileAdRequest_Platform_Parse(name, value);
  }

  typedef MobileAdRequest_SlidingEffect SlidingEffect;
  static const SlidingEffect SINGLE = MobileAdRequest_SlidingEffect_SINGLE;
  static const SlidingEffect SLIDING = MobileAdRequest_SlidingEffect_SLIDING;
  static inline bool SlidingEffect_IsValid(int value) {
    return MobileAdRequest_SlidingEffect_IsValid(value);
  }
  static const SlidingEffect SlidingEffect_MIN =
    MobileAdRequest_SlidingEffect_SlidingEffect_MIN;
  static const SlidingEffect SlidingEffect_MAX =
    MobileAdRequest_SlidingEffect_SlidingEffect_MAX;
  static const int SlidingEffect_ARRAYSIZE =
    MobileAdRequest_SlidingEffect_SlidingEffect_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SlidingEffect_descriptor() {
    return MobileAdRequest_SlidingEffect_descriptor();
  }
  static inline const ::std::string& SlidingEffect_Name(SlidingEffect value) {
    return MobileAdRequest_SlidingEffect_Name(value);
  }
  static inline bool SlidingEffect_Parse(const ::std::string& name,
      SlidingEffect* value) {
    return MobileAdRequest_SlidingEffect_Parse(name, value);
  }

  typedef MobileAdRequest_Orientation Orientation;
  static const Orientation LANDSCAPE = MobileAdRequest_Orientation_LANDSCAPE;
  static const Orientation PORTRAIT = MobileAdRequest_Orientation_PORTRAIT;
  static inline bool Orientation_IsValid(int value) {
    return MobileAdRequest_Orientation_IsValid(value);
  }
  static const Orientation Orientation_MIN =
    MobileAdRequest_Orientation_Orientation_MIN;
  static const Orientation Orientation_MAX =
    MobileAdRequest_Orientation_Orientation_MAX;
  static const int Orientation_ARRAYSIZE =
    MobileAdRequest_Orientation_Orientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Orientation_descriptor() {
    return MobileAdRequest_Orientation_descriptor();
  }
  static inline const ::std::string& Orientation_Name(Orientation value) {
    return MobileAdRequest_Orientation_Name(value);
  }
  static inline bool Orientation_Parse(const ::std::string& name,
      Orientation* value) {
    return MobileAdRequest_Orientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string aid = 2;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 2;
  inline const ::std::string& aid() const;
  inline void set_aid(const ::std::string& value);
  inline void set_aid(const char* value);
  inline void set_aid(const char* value, size_t size);
  inline ::std::string* mutable_aid();
  inline ::std::string* release_aid();
  inline void set_allocated_aid(::std::string* aid);

  // optional string ua = 3;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 3;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // optional .com.rj.protos.mobile.MobileAdRequest.TestFlag test = 4;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 4;
  inline ::com::rj::protos::mobile::MobileAdRequest_TestFlag test() const;
  inline void set_test(::com::rj::protos::mobile::MobileAdRequest_TestFlag value);

  // optional string version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string longitude = 6;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 6;
  inline const ::std::string& longitude() const;
  inline void set_longitude(const ::std::string& value);
  inline void set_longitude(const char* value);
  inline void set_longitude(const char* value, size_t size);
  inline ::std::string* mutable_longitude();
  inline ::std::string* release_longitude();
  inline void set_allocated_longitude(::std::string* longitude);

  // optional string latitude = 7;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 7;
  inline const ::std::string& latitude() const;
  inline void set_latitude(const ::std::string& value);
  inline void set_latitude(const char* value);
  inline void set_latitude(const char* value, size_t size);
  inline ::std::string* mutable_latitude();
  inline ::std::string* release_latitude();
  inline void set_allocated_latitude(::std::string* latitude);

  // optional string adspaceStrict = 8;
  inline bool has_adspacestrict() const;
  inline void clear_adspacestrict();
  static const int kAdspaceStrictFieldNumber = 8;
  inline const ::std::string& adspacestrict() const;
  inline void set_adspacestrict(const ::std::string& value);
  inline void set_adspacestrict(const char* value);
  inline void set_adspacestrict(const char* value, size_t size);
  inline ::std::string* mutable_adspacestrict();
  inline ::std::string* release_adspacestrict();
  inline void set_allocated_adspacestrict(::std::string* adspacestrict);

  // optional string adspaceWidth = 9;
  inline bool has_adspacewidth() const;
  inline void clear_adspacewidth();
  static const int kAdspaceWidthFieldNumber = 9;
  inline const ::std::string& adspacewidth() const;
  inline void set_adspacewidth(const ::std::string& value);
  inline void set_adspacewidth(const char* value);
  inline void set_adspacewidth(const char* value, size_t size);
  inline ::std::string* mutable_adspacewidth();
  inline ::std::string* release_adspacewidth();
  inline void set_allocated_adspacewidth(::std::string* adspacewidth);

  // optional string adspaceHeight = 10;
  inline bool has_adspaceheight() const;
  inline void clear_adspaceheight();
  static const int kAdspaceHeightFieldNumber = 10;
  inline const ::std::string& adspaceheight() const;
  inline void set_adspaceheight(const ::std::string& value);
  inline void set_adspaceheight(const char* value);
  inline void set_adspaceheight(const char* value, size_t size);
  inline ::std::string* mutable_adspaceheight();
  inline ::std::string* release_adspaceheight();
  inline void set_allocated_adspaceheight(::std::string* adspaceheight);

  // optional .com.rj.protos.mobile.MobileAdRequest.Type type = 11;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline ::com::rj::protos::mobile::MobileAdRequest_Type type() const;
  inline void set_type(::com::rj::protos::mobile::MobileAdRequest_Type value);

  // optional string ipAddress = 12;
  inline bool has_ipaddress() const;
  inline void clear_ipaddress();
  static const int kIpAddressFieldNumber = 12;
  inline const ::std::string& ipaddress() const;
  inline void set_ipaddress(const ::std::string& value);
  inline void set_ipaddress(const char* value);
  inline void set_ipaddress(const char* value, size_t size);
  inline ::std::string* mutable_ipaddress();
  inline ::std::string* release_ipaddress();
  inline void set_allocated_ipaddress(::std::string* ipaddress);

  // optional string udid = 13;
  inline bool has_udid() const;
  inline void clear_udid();
  static const int kUdidFieldNumber = 13;
  inline const ::std::string& udid() const;
  inline void set_udid(const ::std::string& value);
  inline void set_udid(const char* value);
  inline void set_udid(const char* value, size_t size);
  inline ::std::string* mutable_udid();
  inline ::std::string* release_udid();
  inline void set_allocated_udid(::std::string* udid);

  // optional string imei = 14;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 14;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // optional string connectionType = 15;
  inline bool has_connectiontype() const;
  inline void clear_connectiontype();
  static const int kConnectionTypeFieldNumber = 15;
  inline const ::std::string& connectiontype() const;
  inline void set_connectiontype(const ::std::string& value);
  inline void set_connectiontype(const char* value);
  inline void set_connectiontype(const char* value, size_t size);
  inline ::std::string* mutable_connectiontype();
  inline ::std::string* release_connectiontype();
  inline void set_allocated_connectiontype(::std::string* connectiontype);

  // optional string timestamp = 16;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 16;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional .com.rj.protos.mobile.MobileAdRequest.Platform platform = 17;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 17;
  inline ::com::rj::protos::mobile::MobileAdRequest_Platform platform() const;
  inline void set_platform(::com::rj::protos::mobile::MobileAdRequest_Platform value);

  // optional string packageName = 18;
  inline bool has_packagename() const;
  inline void clear_packagename();
  static const int kPackageNameFieldNumber = 18;
  inline const ::std::string& packagename() const;
  inline void set_packagename(const ::std::string& value);
  inline void set_packagename(const char* value);
  inline void set_packagename(const char* value, size_t size);
  inline ::std::string* mutable_packagename();
  inline ::std::string* release_packagename();
  inline void set_allocated_packagename(::std::string* packagename);

  // optional string section = 19;
  inline bool has_section() const;
  inline void clear_section();
  static const int kSectionFieldNumber = 19;
  inline const ::std::string& section() const;
  inline void set_section(const ::std::string& value);
  inline void set_section(const char* value);
  inline void set_section(const char* value, size_t size);
  inline ::std::string* mutable_section();
  inline ::std::string* release_section();
  inline void set_allocated_section(::std::string* section);

  // optional string adCount = 20;
  inline bool has_adcount() const;
  inline void clear_adcount();
  static const int kAdCountFieldNumber = 20;
  inline const ::std::string& adcount() const;
  inline void set_adcount(const ::std::string& value);
  inline void set_adcount(const char* value);
  inline void set_adcount(const char* value, size_t size);
  inline ::std::string* mutable_adcount();
  inline ::std::string* release_adcount();
  inline void set_allocated_adcount(::std::string* adcount);

  // optional .com.rj.protos.mobile.MobileAdRequest.SlidingEffect slidingEffect = 21;
  inline bool has_slidingeffect() const;
  inline void clear_slidingeffect();
  static const int kSlidingEffectFieldNumber = 21;
  inline ::com::rj::protos::mobile::MobileAdRequest_SlidingEffect slidingeffect() const;
  inline void set_slidingeffect(::com::rj::protos::mobile::MobileAdRequest_SlidingEffect value);

  // optional .com.rj.protos.mobile.MobileAdRequest.Orientation orientation = 22;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 22;
  inline ::com::rj::protos::mobile::MobileAdRequest_Orientation orientation() const;
  inline void set_orientation(::com::rj::protos::mobile::MobileAdRequest_Orientation value);

  // optional string dnsIp = 23;
  inline bool has_dnsip() const;
  inline void clear_dnsip();
  static const int kDnsIpFieldNumber = 23;
  inline const ::std::string& dnsip() const;
  inline void set_dnsip(const ::std::string& value);
  inline void set_dnsip(const char* value);
  inline void set_dnsip(const char* value, size_t size);
  inline ::std::string* mutable_dnsip();
  inline ::std::string* release_dnsip();
  inline void set_allocated_dnsip(::std::string* dnsip);

  // optional .com.rj.protos.mobile.MobileAdRequest.Device device = 24;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 24;
  inline const ::com::rj::protos::mobile::MobileAdRequest_Device& device() const;
  inline ::com::rj::protos::mobile::MobileAdRequest_Device* mutable_device();
  inline ::com::rj::protos::mobile::MobileAdRequest_Device* release_device();
  inline void set_allocated_device(::com::rj::protos::mobile::MobileAdRequest_Device* device);

  // optional .com.rj.protos.mobile.MobileAdRequest.User user = 25;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 25;
  inline const ::com::rj::protos::mobile::MobileAdRequest_User& user() const;
  inline ::com::rj::protos::mobile::MobileAdRequest_User* mutable_user();
  inline ::com::rj::protos::mobile::MobileAdRequest_User* release_user();
  inline void set_allocated_user(::com::rj::protos::mobile::MobileAdRequest_User* user);

  // optional string wifiMac = 26;
  inline bool has_wifimac() const;
  inline void clear_wifimac();
  static const int kWifiMacFieldNumber = 26;
  inline const ::std::string& wifimac() const;
  inline void set_wifimac(const ::std::string& value);
  inline void set_wifimac(const char* value);
  inline void set_wifimac(const char* value, size_t size);
  inline ::std::string* mutable_wifimac();
  inline ::std::string* release_wifimac();
  inline void set_allocated_wifimac(::std::string* wifimac);

  // optional string bluetoothMac = 27;
  inline bool has_bluetoothmac() const;
  inline void clear_bluetoothmac();
  static const int kBluetoothMacFieldNumber = 27;
  inline const ::std::string& bluetoothmac() const;
  inline void set_bluetoothmac(const ::std::string& value);
  inline void set_bluetoothmac(const char* value);
  inline void set_bluetoothmac(const char* value, size_t size);
  inline ::std::string* mutable_bluetoothmac();
  inline ::std::string* release_bluetoothmac();
  inline void set_allocated_bluetoothmac(::std::string* bluetoothmac);

  // optional string simSerialNumber = 28;
  inline bool has_simserialnumber() const;
  inline void clear_simserialnumber();
  static const int kSimSerialNumberFieldNumber = 28;
  inline const ::std::string& simserialnumber() const;
  inline void set_simserialnumber(const ::std::string& value);
  inline void set_simserialnumber(const char* value);
  inline void set_simserialnumber(const char* value, size_t size);
  inline ::std::string* mutable_simserialnumber();
  inline ::std::string* release_simserialnumber();
  inline void set_allocated_simserialnumber(::std::string* simserialnumber);

  // optional string androidId = 29;
  inline bool has_androidid() const;
  inline void clear_androidid();
  static const int kAndroidIdFieldNumber = 29;
  inline const ::std::string& androidid() const;
  inline void set_androidid(const ::std::string& value);
  inline void set_androidid(const char* value);
  inline void set_androidid(const char* value, size_t size);
  inline ::std::string* mutable_androidid();
  inline ::std::string* release_androidid();
  inline void set_allocated_androidid(::std::string* androidid);

  // optional string deviceSerialNumber = 30;
  inline bool has_deviceserialnumber() const;
  inline void clear_deviceserialnumber();
  static const int kDeviceSerialNumberFieldNumber = 30;
  inline const ::std::string& deviceserialnumber() const;
  inline void set_deviceserialnumber(const ::std::string& value);
  inline void set_deviceserialnumber(const char* value);
  inline void set_deviceserialnumber(const char* value, size_t size);
  inline ::std::string* mutable_deviceserialnumber();
  inline ::std::string* release_deviceserialnumber();
  inline void set_allocated_deviceserialnumber(::std::string* deviceserialnumber);

  // optional string cpuSerialNumber = 31;
  inline bool has_cpuserialnumber() const;
  inline void clear_cpuserialnumber();
  static const int kCpuSerialNumberFieldNumber = 31;
  inline const ::std::string& cpuserialnumber() const;
  inline void set_cpuserialnumber(const ::std::string& value);
  inline void set_cpuserialnumber(const char* value);
  inline void set_cpuserialnumber(const char* value, size_t size);
  inline ::std::string* mutable_cpuserialnumber();
  inline ::std::string* release_cpuserialnumber();
  inline void set_allocated_cpuserialnumber(::std::string* cpuserialnumber);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_test();
  inline void clear_has_test();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_adspacestrict();
  inline void clear_has_adspacestrict();
  inline void set_has_adspacewidth();
  inline void clear_has_adspacewidth();
  inline void set_has_adspaceheight();
  inline void clear_has_adspaceheight();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ipaddress();
  inline void clear_has_ipaddress();
  inline void set_has_udid();
  inline void clear_has_udid();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_connectiontype();
  inline void clear_has_connectiontype();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_packagename();
  inline void clear_has_packagename();
  inline void set_has_section();
  inline void clear_has_section();
  inline void set_has_adcount();
  inline void clear_has_adcount();
  inline void set_has_slidingeffect();
  inline void clear_has_slidingeffect();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_dnsip();
  inline void clear_has_dnsip();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_wifimac();
  inline void clear_has_wifimac();
  inline void set_has_bluetoothmac();
  inline void clear_has_bluetoothmac();
  inline void set_has_simserialnumber();
  inline void clear_has_simserialnumber();
  inline void set_has_androidid();
  inline void clear_has_androidid();
  inline void set_has_deviceserialnumber();
  inline void clear_has_deviceserialnumber();
  inline void set_has_cpuserialnumber();
  inline void clear_has_cpuserialnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* aid_;
  ::std::string* ua_;
  ::std::string* version_;
  ::std::string* longitude_;
  ::std::string* latitude_;
  int test_;
  int type_;
  ::std::string* adspacestrict_;
  ::std::string* adspacewidth_;
  ::std::string* adspaceheight_;
  ::std::string* ipaddress_;
  ::std::string* udid_;
  ::std::string* imei_;
  ::std::string* connectiontype_;
  ::std::string* timestamp_;
  ::std::string* packagename_;
  ::std::string* section_;
  int platform_;
  int slidingeffect_;
  ::std::string* adcount_;
  ::std::string* dnsip_;
  ::com::rj::protos::mobile::MobileAdRequest_Device* device_;
  ::com::rj::protos::mobile::MobileAdRequest_User* user_;
  ::std::string* wifimac_;
  ::std::string* bluetoothmac_;
  ::std::string* simserialnumber_;
  ::std::string* androidid_;
  ::std::string* deviceserialnumber_;
  ::std::string* cpuserialnumber_;
  int orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];

  friend void  protobuf_AddDesc_AdMobileRequest_2eproto();
  friend void protobuf_AssignDesc_AdMobileRequest_2eproto();
  friend void protobuf_ShutdownFile_AdMobileRequest_2eproto();

  void InitAsDefaultInstance();
  static MobileAdRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// MobileAdRequest_Device

// optional string vender = 1;
inline bool MobileAdRequest_Device::has_vender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_Device::set_has_vender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_Device::clear_has_vender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_Device::clear_vender() {
  if (vender_ != &::google::protobuf::internal::kEmptyString) {
    vender_->clear();
  }
  clear_has_vender();
}
inline const ::std::string& MobileAdRequest_Device::vender() const {
  return *vender_;
}
inline void MobileAdRequest_Device::set_vender(const ::std::string& value) {
  set_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    vender_ = new ::std::string;
  }
  vender_->assign(value);
}
inline void MobileAdRequest_Device::set_vender(const char* value) {
  set_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    vender_ = new ::std::string;
  }
  vender_->assign(value);
}
inline void MobileAdRequest_Device::set_vender(const char* value, size_t size) {
  set_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    vender_ = new ::std::string;
  }
  vender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_vender() {
  set_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    vender_ = new ::std::string;
  }
  return vender_;
}
inline ::std::string* MobileAdRequest_Device::release_vender() {
  clear_has_vender();
  if (vender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vender_;
    vender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_vender(::std::string* vender) {
  if (vender_ != &::google::protobuf::internal::kEmptyString) {
    delete vender_;
  }
  if (vender) {
    set_has_vender();
    vender_ = vender;
  } else {
    clear_has_vender();
    vender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string modelName = 2;
inline bool MobileAdRequest_Device::has_modelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_Device::set_has_modelname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_Device::clear_has_modelname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_Device::clear_modelname() {
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    modelname_->clear();
  }
  clear_has_modelname();
}
inline const ::std::string& MobileAdRequest_Device::modelname() const {
  return *modelname_;
}
inline void MobileAdRequest_Device::set_modelname(const ::std::string& value) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(value);
}
inline void MobileAdRequest_Device::set_modelname(const char* value) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(value);
}
inline void MobileAdRequest_Device::set_modelname(const char* value, size_t size) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_modelname() {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  return modelname_;
}
inline ::std::string* MobileAdRequest_Device::release_modelname() {
  clear_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modelname_;
    modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_modelname(::std::string* modelname) {
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    delete modelname_;
  }
  if (modelname) {
    set_has_modelname();
    modelname_ = modelname;
  } else {
    clear_has_modelname();
    modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string marketingName = 3;
inline bool MobileAdRequest_Device::has_marketingname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest_Device::set_has_marketingname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest_Device::clear_has_marketingname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest_Device::clear_marketingname() {
  if (marketingname_ != &::google::protobuf::internal::kEmptyString) {
    marketingname_->clear();
  }
  clear_has_marketingname();
}
inline const ::std::string& MobileAdRequest_Device::marketingname() const {
  return *marketingname_;
}
inline void MobileAdRequest_Device::set_marketingname(const ::std::string& value) {
  set_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    marketingname_ = new ::std::string;
  }
  marketingname_->assign(value);
}
inline void MobileAdRequest_Device::set_marketingname(const char* value) {
  set_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    marketingname_ = new ::std::string;
  }
  marketingname_->assign(value);
}
inline void MobileAdRequest_Device::set_marketingname(const char* value, size_t size) {
  set_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    marketingname_ = new ::std::string;
  }
  marketingname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_marketingname() {
  set_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    marketingname_ = new ::std::string;
  }
  return marketingname_;
}
inline ::std::string* MobileAdRequest_Device::release_marketingname() {
  clear_has_marketingname();
  if (marketingname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = marketingname_;
    marketingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_marketingname(::std::string* marketingname) {
  if (marketingname_ != &::google::protobuf::internal::kEmptyString) {
    delete marketingname_;
  }
  if (marketingname) {
    set_has_marketingname();
    marketingname_ = marketingname;
  } else {
    clear_has_marketingname();
    marketingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string screenWidth = 4;
inline bool MobileAdRequest_Device::has_screenwidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdRequest_Device::set_has_screenwidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdRequest_Device::clear_has_screenwidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdRequest_Device::clear_screenwidth() {
  if (screenwidth_ != &::google::protobuf::internal::kEmptyString) {
    screenwidth_->clear();
  }
  clear_has_screenwidth();
}
inline const ::std::string& MobileAdRequest_Device::screenwidth() const {
  return *screenwidth_;
}
inline void MobileAdRequest_Device::set_screenwidth(const ::std::string& value) {
  set_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    screenwidth_ = new ::std::string;
  }
  screenwidth_->assign(value);
}
inline void MobileAdRequest_Device::set_screenwidth(const char* value) {
  set_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    screenwidth_ = new ::std::string;
  }
  screenwidth_->assign(value);
}
inline void MobileAdRequest_Device::set_screenwidth(const char* value, size_t size) {
  set_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    screenwidth_ = new ::std::string;
  }
  screenwidth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_screenwidth() {
  set_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    screenwidth_ = new ::std::string;
  }
  return screenwidth_;
}
inline ::std::string* MobileAdRequest_Device::release_screenwidth() {
  clear_has_screenwidth();
  if (screenwidth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = screenwidth_;
    screenwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_screenwidth(::std::string* screenwidth) {
  if (screenwidth_ != &::google::protobuf::internal::kEmptyString) {
    delete screenwidth_;
  }
  if (screenwidth) {
    set_has_screenwidth();
    screenwidth_ = screenwidth;
  } else {
    clear_has_screenwidth();
    screenwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string screenHeight = 5;
inline bool MobileAdRequest_Device::has_screenheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdRequest_Device::set_has_screenheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdRequest_Device::clear_has_screenheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdRequest_Device::clear_screenheight() {
  if (screenheight_ != &::google::protobuf::internal::kEmptyString) {
    screenheight_->clear();
  }
  clear_has_screenheight();
}
inline const ::std::string& MobileAdRequest_Device::screenheight() const {
  return *screenheight_;
}
inline void MobileAdRequest_Device::set_screenheight(const ::std::string& value) {
  set_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    screenheight_ = new ::std::string;
  }
  screenheight_->assign(value);
}
inline void MobileAdRequest_Device::set_screenheight(const char* value) {
  set_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    screenheight_ = new ::std::string;
  }
  screenheight_->assign(value);
}
inline void MobileAdRequest_Device::set_screenheight(const char* value, size_t size) {
  set_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    screenheight_ = new ::std::string;
  }
  screenheight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_screenheight() {
  set_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    screenheight_ = new ::std::string;
  }
  return screenheight_;
}
inline ::std::string* MobileAdRequest_Device::release_screenheight() {
  clear_has_screenheight();
  if (screenheight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = screenheight_;
    screenheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_screenheight(::std::string* screenheight) {
  if (screenheight_ != &::google::protobuf::internal::kEmptyString) {
    delete screenheight_;
  }
  if (screenheight) {
    set_has_screenheight();
    screenheight_ = screenheight;
  } else {
    clear_has_screenheight();
    screenheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string density = 6;
inline bool MobileAdRequest_Device::has_density() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdRequest_Device::set_has_density() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdRequest_Device::clear_has_density() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdRequest_Device::clear_density() {
  if (density_ != &::google::protobuf::internal::kEmptyString) {
    density_->clear();
  }
  clear_has_density();
}
inline const ::std::string& MobileAdRequest_Device::density() const {
  return *density_;
}
inline void MobileAdRequest_Device::set_density(const ::std::string& value) {
  set_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    density_ = new ::std::string;
  }
  density_->assign(value);
}
inline void MobileAdRequest_Device::set_density(const char* value) {
  set_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    density_ = new ::std::string;
  }
  density_->assign(value);
}
inline void MobileAdRequest_Device::set_density(const char* value, size_t size) {
  set_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    density_ = new ::std::string;
  }
  density_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_Device::mutable_density() {
  set_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    density_ = new ::std::string;
  }
  return density_;
}
inline ::std::string* MobileAdRequest_Device::release_density() {
  clear_has_density();
  if (density_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = density_;
    density_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_Device::set_allocated_density(::std::string* density) {
  if (density_ != &::google::protobuf::internal::kEmptyString) {
    delete density_;
  }
  if (density) {
    set_has_density();
    density_ = density;
  } else {
    clear_has_density();
    density_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdRequest_User

// optional string uid = 1;
inline bool MobileAdRequest_User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest_User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest_User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest_User::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& MobileAdRequest_User::uid() const {
  return *uid_;
}
inline void MobileAdRequest_User::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void MobileAdRequest_User::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void MobileAdRequest_User::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_User::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* MobileAdRequest_User::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_User::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.User.Gender gender = 2;
inline bool MobileAdRequest_User::has_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest_User::set_has_gender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest_User::clear_has_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest_User::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::com::rj::protos::mobile::MobileAdRequest_User_Gender MobileAdRequest_User::gender() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_User_Gender >(gender_);
}
inline void MobileAdRequest_User::set_gender(::com::rj::protos::mobile::MobileAdRequest_User_Gender value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_User_Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional string Age = 3;
inline bool MobileAdRequest_User::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest_User::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest_User::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest_User::clear_age() {
  if (age_ != &::google::protobuf::internal::kEmptyString) {
    age_->clear();
  }
  clear_has_age();
}
inline const ::std::string& MobileAdRequest_User::age() const {
  return *age_;
}
inline void MobileAdRequest_User::set_age(const ::std::string& value) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    age_ = new ::std::string;
  }
  age_->assign(value);
}
inline void MobileAdRequest_User::set_age(const char* value) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    age_ = new ::std::string;
  }
  age_->assign(value);
}
inline void MobileAdRequest_User::set_age(const char* value, size_t size) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    age_ = new ::std::string;
  }
  age_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_User::mutable_age() {
  set_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    age_ = new ::std::string;
  }
  return age_;
}
inline ::std::string* MobileAdRequest_User::release_age() {
  clear_has_age();
  if (age_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = age_;
    age_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_User::set_allocated_age(::std::string* age) {
  if (age_ != &::google::protobuf::internal::kEmptyString) {
    delete age_;
  }
  if (age) {
    set_has_age();
    age_ = age;
  } else {
    clear_has_age();
    age_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string countryCode = 4;
inline bool MobileAdRequest_User::has_countrycode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdRequest_User::set_has_countrycode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdRequest_User::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdRequest_User::clear_countrycode() {
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    countrycode_->clear();
  }
  clear_has_countrycode();
}
inline const ::std::string& MobileAdRequest_User::countrycode() const {
  return *countrycode_;
}
inline void MobileAdRequest_User::set_countrycode(const ::std::string& value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void MobileAdRequest_User::set_countrycode(const char* value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void MobileAdRequest_User::set_countrycode(const char* value, size_t size) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_User::mutable_countrycode() {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  return countrycode_;
}
inline ::std::string* MobileAdRequest_User::release_countrycode() {
  clear_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = countrycode_;
    countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_User::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete countrycode_;
  }
  if (countrycode) {
    set_has_countrycode();
    countrycode_ = countrycode;
  } else {
    clear_has_countrycode();
    countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string region = 5;
inline bool MobileAdRequest_User::has_region() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdRequest_User::set_has_region() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdRequest_User::clear_has_region() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdRequest_User::clear_region() {
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    region_->clear();
  }
  clear_has_region();
}
inline const ::std::string& MobileAdRequest_User::region() const {
  return *region_;
}
inline void MobileAdRequest_User::set_region(const ::std::string& value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(value);
}
inline void MobileAdRequest_User::set_region(const char* value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(value);
}
inline void MobileAdRequest_User::set_region(const char* value, size_t size) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_User::mutable_region() {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  return region_;
}
inline ::std::string* MobileAdRequest_User::release_region() {
  clear_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = region_;
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_User::set_allocated_region(::std::string* region) {
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (region) {
    set_has_region();
    region_ = region;
  } else {
    clear_has_region();
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city = 6;
inline bool MobileAdRequest_User::has_city() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdRequest_User::set_has_city() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdRequest_User::clear_has_city() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdRequest_User::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& MobileAdRequest_User::city() const {
  return *city_;
}
inline void MobileAdRequest_User::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void MobileAdRequest_User::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void MobileAdRequest_User::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest_User::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* MobileAdRequest_User::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest_User::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdRequest

// optional string id = 1;
inline bool MobileAdRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdRequest::id() const {
  return *id_;
}
inline void MobileAdRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string aid = 2;
inline bool MobileAdRequest::has_aid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdRequest::set_has_aid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdRequest::clear_has_aid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdRequest::clear_aid() {
  if (aid_ != &::google::protobuf::internal::kEmptyString) {
    aid_->clear();
  }
  clear_has_aid();
}
inline const ::std::string& MobileAdRequest::aid() const {
  return *aid_;
}
inline void MobileAdRequest::set_aid(const ::std::string& value) {
  set_has_aid();
  if (aid_ == &::google::protobuf::internal::kEmptyString) {
    aid_ = new ::std::string;
  }
  aid_->assign(value);
}
inline void MobileAdRequest::set_aid(const char* value) {
  set_has_aid();
  if (aid_ == &::google::protobuf::internal::kEmptyString) {
    aid_ = new ::std::string;
  }
  aid_->assign(value);
}
inline void MobileAdRequest::set_aid(const char* value, size_t size) {
  set_has_aid();
  if (aid_ == &::google::protobuf::internal::kEmptyString) {
    aid_ = new ::std::string;
  }
  aid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_aid() {
  set_has_aid();
  if (aid_ == &::google::protobuf::internal::kEmptyString) {
    aid_ = new ::std::string;
  }
  return aid_;
}
inline ::std::string* MobileAdRequest::release_aid() {
  clear_has_aid();
  if (aid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aid_;
    aid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_aid(::std::string* aid) {
  if (aid_ != &::google::protobuf::internal::kEmptyString) {
    delete aid_;
  }
  if (aid) {
    set_has_aid();
    aid_ = aid;
  } else {
    clear_has_aid();
    aid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ua = 3;
inline bool MobileAdRequest::has_ua() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdRequest::set_has_ua() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdRequest::clear_has_ua() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdRequest::clear_ua() {
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& MobileAdRequest::ua() const {
  return *ua_;
}
inline void MobileAdRequest::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
}
inline void MobileAdRequest::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
}
inline void MobileAdRequest::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  return ua_;
}
inline ::std::string* MobileAdRequest::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.TestFlag test = 4;
inline bool MobileAdRequest::has_test() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdRequest::set_has_test() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdRequest::clear_has_test() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdRequest::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::com::rj::protos::mobile::MobileAdRequest_TestFlag MobileAdRequest::test() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_TestFlag >(test_);
}
inline void MobileAdRequest::set_test(::com::rj::protos::mobile::MobileAdRequest_TestFlag value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_TestFlag_IsValid(value));
  set_has_test();
  test_ = value;
}

// optional string version = 5;
inline bool MobileAdRequest::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdRequest::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& MobileAdRequest::version() const {
  return *version_;
}
inline void MobileAdRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void MobileAdRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void MobileAdRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* MobileAdRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string longitude = 6;
inline bool MobileAdRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdRequest::clear_longitude() {
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    longitude_->clear();
  }
  clear_has_longitude();
}
inline const ::std::string& MobileAdRequest::longitude() const {
  return *longitude_;
}
inline void MobileAdRequest::set_longitude(const ::std::string& value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
}
inline void MobileAdRequest::set_longitude(const char* value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
}
inline void MobileAdRequest::set_longitude(const char* value, size_t size) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_longitude() {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  return longitude_;
}
inline ::std::string* MobileAdRequest::release_longitude() {
  clear_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = longitude_;
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_longitude(::std::string* longitude) {
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    delete longitude_;
  }
  if (longitude) {
    set_has_longitude();
    longitude_ = longitude;
  } else {
    clear_has_longitude();
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string latitude = 7;
inline bool MobileAdRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdRequest::clear_latitude() {
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    latitude_->clear();
  }
  clear_has_latitude();
}
inline const ::std::string& MobileAdRequest::latitude() const {
  return *latitude_;
}
inline void MobileAdRequest::set_latitude(const ::std::string& value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
}
inline void MobileAdRequest::set_latitude(const char* value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
}
inline void MobileAdRequest::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_latitude() {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  return latitude_;
}
inline ::std::string* MobileAdRequest::release_latitude() {
  clear_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latitude_;
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_latitude(::std::string* latitude) {
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    delete latitude_;
  }
  if (latitude) {
    set_has_latitude();
    latitude_ = latitude;
  } else {
    clear_has_latitude();
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adspaceStrict = 8;
inline bool MobileAdRequest::has_adspacestrict() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdRequest::set_has_adspacestrict() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdRequest::clear_has_adspacestrict() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdRequest::clear_adspacestrict() {
  if (adspacestrict_ != &::google::protobuf::internal::kEmptyString) {
    adspacestrict_->clear();
  }
  clear_has_adspacestrict();
}
inline const ::std::string& MobileAdRequest::adspacestrict() const {
  return *adspacestrict_;
}
inline void MobileAdRequest::set_adspacestrict(const ::std::string& value) {
  set_has_adspacestrict();
  if (adspacestrict_ == &::google::protobuf::internal::kEmptyString) {
    adspacestrict_ = new ::std::string;
  }
  adspacestrict_->assign(value);
}
inline void MobileAdRequest::set_adspacestrict(const char* value) {
  set_has_adspacestrict();
  if (adspacestrict_ == &::google::protobuf::internal::kEmptyString) {
    adspacestrict_ = new ::std::string;
  }
  adspacestrict_->assign(value);
}
inline void MobileAdRequest::set_adspacestrict(const char* value, size_t size) {
  set_has_adspacestrict();
  if (adspacestrict_ == &::google::protobuf::internal::kEmptyString) {
    adspacestrict_ = new ::std::string;
  }
  adspacestrict_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_adspacestrict() {
  set_has_adspacestrict();
  if (adspacestrict_ == &::google::protobuf::internal::kEmptyString) {
    adspacestrict_ = new ::std::string;
  }
  return adspacestrict_;
}
inline ::std::string* MobileAdRequest::release_adspacestrict() {
  clear_has_adspacestrict();
  if (adspacestrict_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adspacestrict_;
    adspacestrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_adspacestrict(::std::string* adspacestrict) {
  if (adspacestrict_ != &::google::protobuf::internal::kEmptyString) {
    delete adspacestrict_;
  }
  if (adspacestrict) {
    set_has_adspacestrict();
    adspacestrict_ = adspacestrict;
  } else {
    clear_has_adspacestrict();
    adspacestrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adspaceWidth = 9;
inline bool MobileAdRequest::has_adspacewidth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdRequest::set_has_adspacewidth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdRequest::clear_has_adspacewidth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdRequest::clear_adspacewidth() {
  if (adspacewidth_ != &::google::protobuf::internal::kEmptyString) {
    adspacewidth_->clear();
  }
  clear_has_adspacewidth();
}
inline const ::std::string& MobileAdRequest::adspacewidth() const {
  return *adspacewidth_;
}
inline void MobileAdRequest::set_adspacewidth(const ::std::string& value) {
  set_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    adspacewidth_ = new ::std::string;
  }
  adspacewidth_->assign(value);
}
inline void MobileAdRequest::set_adspacewidth(const char* value) {
  set_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    adspacewidth_ = new ::std::string;
  }
  adspacewidth_->assign(value);
}
inline void MobileAdRequest::set_adspacewidth(const char* value, size_t size) {
  set_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    adspacewidth_ = new ::std::string;
  }
  adspacewidth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_adspacewidth() {
  set_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    adspacewidth_ = new ::std::string;
  }
  return adspacewidth_;
}
inline ::std::string* MobileAdRequest::release_adspacewidth() {
  clear_has_adspacewidth();
  if (adspacewidth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adspacewidth_;
    adspacewidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_adspacewidth(::std::string* adspacewidth) {
  if (adspacewidth_ != &::google::protobuf::internal::kEmptyString) {
    delete adspacewidth_;
  }
  if (adspacewidth) {
    set_has_adspacewidth();
    adspacewidth_ = adspacewidth;
  } else {
    clear_has_adspacewidth();
    adspacewidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adspaceHeight = 10;
inline bool MobileAdRequest::has_adspaceheight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdRequest::set_has_adspaceheight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdRequest::clear_has_adspaceheight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdRequest::clear_adspaceheight() {
  if (adspaceheight_ != &::google::protobuf::internal::kEmptyString) {
    adspaceheight_->clear();
  }
  clear_has_adspaceheight();
}
inline const ::std::string& MobileAdRequest::adspaceheight() const {
  return *adspaceheight_;
}
inline void MobileAdRequest::set_adspaceheight(const ::std::string& value) {
  set_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    adspaceheight_ = new ::std::string;
  }
  adspaceheight_->assign(value);
}
inline void MobileAdRequest::set_adspaceheight(const char* value) {
  set_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    adspaceheight_ = new ::std::string;
  }
  adspaceheight_->assign(value);
}
inline void MobileAdRequest::set_adspaceheight(const char* value, size_t size) {
  set_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    adspaceheight_ = new ::std::string;
  }
  adspaceheight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_adspaceheight() {
  set_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    adspaceheight_ = new ::std::string;
  }
  return adspaceheight_;
}
inline ::std::string* MobileAdRequest::release_adspaceheight() {
  clear_has_adspaceheight();
  if (adspaceheight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adspaceheight_;
    adspaceheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_adspaceheight(::std::string* adspaceheight) {
  if (adspaceheight_ != &::google::protobuf::internal::kEmptyString) {
    delete adspaceheight_;
  }
  if (adspaceheight) {
    set_has_adspaceheight();
    adspaceheight_ = adspaceheight;
  } else {
    clear_has_adspaceheight();
    adspaceheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.Type type = 11;
inline bool MobileAdRequest::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdRequest::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::rj::protos::mobile::MobileAdRequest_Type MobileAdRequest::type() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_Type >(type_);
}
inline void MobileAdRequest::set_type(::com::rj::protos::mobile::MobileAdRequest_Type value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string ipAddress = 12;
inline bool MobileAdRequest::has_ipaddress() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileAdRequest::set_has_ipaddress() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileAdRequest::clear_has_ipaddress() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileAdRequest::clear_ipaddress() {
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    ipaddress_->clear();
  }
  clear_has_ipaddress();
}
inline const ::std::string& MobileAdRequest::ipaddress() const {
  return *ipaddress_;
}
inline void MobileAdRequest::set_ipaddress(const ::std::string& value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
}
inline void MobileAdRequest::set_ipaddress(const char* value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
}
inline void MobileAdRequest::set_ipaddress(const char* value, size_t size) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_ipaddress() {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  return ipaddress_;
}
inline ::std::string* MobileAdRequest::release_ipaddress() {
  clear_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipaddress_;
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (ipaddress) {
    set_has_ipaddress();
    ipaddress_ = ipaddress;
  } else {
    clear_has_ipaddress();
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string udid = 13;
inline bool MobileAdRequest::has_udid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MobileAdRequest::set_has_udid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MobileAdRequest::clear_has_udid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MobileAdRequest::clear_udid() {
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    udid_->clear();
  }
  clear_has_udid();
}
inline const ::std::string& MobileAdRequest::udid() const {
  return *udid_;
}
inline void MobileAdRequest::set_udid(const ::std::string& value) {
  set_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    udid_ = new ::std::string;
  }
  udid_->assign(value);
}
inline void MobileAdRequest::set_udid(const char* value) {
  set_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    udid_ = new ::std::string;
  }
  udid_->assign(value);
}
inline void MobileAdRequest::set_udid(const char* value, size_t size) {
  set_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    udid_ = new ::std::string;
  }
  udid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_udid() {
  set_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    udid_ = new ::std::string;
  }
  return udid_;
}
inline ::std::string* MobileAdRequest::release_udid() {
  clear_has_udid();
  if (udid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = udid_;
    udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_udid(::std::string* udid) {
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    delete udid_;
  }
  if (udid) {
    set_has_udid();
    udid_ = udid;
  } else {
    clear_has_udid();
    udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imei = 14;
inline bool MobileAdRequest::has_imei() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MobileAdRequest::set_has_imei() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MobileAdRequest::clear_has_imei() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MobileAdRequest::clear_imei() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& MobileAdRequest::imei() const {
  return *imei_;
}
inline void MobileAdRequest::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void MobileAdRequest::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void MobileAdRequest::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  return imei_;
}
inline ::std::string* MobileAdRequest::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string connectionType = 15;
inline bool MobileAdRequest::has_connectiontype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileAdRequest::set_has_connectiontype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileAdRequest::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileAdRequest::clear_connectiontype() {
  if (connectiontype_ != &::google::protobuf::internal::kEmptyString) {
    connectiontype_->clear();
  }
  clear_has_connectiontype();
}
inline const ::std::string& MobileAdRequest::connectiontype() const {
  return *connectiontype_;
}
inline void MobileAdRequest::set_connectiontype(const ::std::string& value) {
  set_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    connectiontype_ = new ::std::string;
  }
  connectiontype_->assign(value);
}
inline void MobileAdRequest::set_connectiontype(const char* value) {
  set_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    connectiontype_ = new ::std::string;
  }
  connectiontype_->assign(value);
}
inline void MobileAdRequest::set_connectiontype(const char* value, size_t size) {
  set_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    connectiontype_ = new ::std::string;
  }
  connectiontype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_connectiontype() {
  set_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    connectiontype_ = new ::std::string;
  }
  return connectiontype_;
}
inline ::std::string* MobileAdRequest::release_connectiontype() {
  clear_has_connectiontype();
  if (connectiontype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = connectiontype_;
    connectiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_connectiontype(::std::string* connectiontype) {
  if (connectiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete connectiontype_;
  }
  if (connectiontype) {
    set_has_connectiontype();
    connectiontype_ = connectiontype;
  } else {
    clear_has_connectiontype();
    connectiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timestamp = 16;
inline bool MobileAdRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MobileAdRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MobileAdRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MobileAdRequest::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& MobileAdRequest::timestamp() const {
  return *timestamp_;
}
inline void MobileAdRequest::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MobileAdRequest::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MobileAdRequest::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* MobileAdRequest::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.Platform platform = 17;
inline bool MobileAdRequest::has_platform() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MobileAdRequest::set_has_platform() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MobileAdRequest::clear_has_platform() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MobileAdRequest::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::com::rj::protos::mobile::MobileAdRequest_Platform MobileAdRequest::platform() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_Platform >(platform_);
}
inline void MobileAdRequest::set_platform(::com::rj::protos::mobile::MobileAdRequest_Platform value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
}

// optional string packageName = 18;
inline bool MobileAdRequest::has_packagename() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MobileAdRequest::set_has_packagename() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MobileAdRequest::clear_has_packagename() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MobileAdRequest::clear_packagename() {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    packagename_->clear();
  }
  clear_has_packagename();
}
inline const ::std::string& MobileAdRequest::packagename() const {
  return *packagename_;
}
inline void MobileAdRequest::set_packagename(const ::std::string& value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void MobileAdRequest::set_packagename(const char* value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void MobileAdRequest::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_packagename() {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  return packagename_;
}
inline ::std::string* MobileAdRequest::release_packagename() {
  clear_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packagename_;
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_packagename(::std::string* packagename) {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (packagename) {
    set_has_packagename();
    packagename_ = packagename;
  } else {
    clear_has_packagename();
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string section = 19;
inline bool MobileAdRequest::has_section() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MobileAdRequest::set_has_section() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MobileAdRequest::clear_has_section() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MobileAdRequest::clear_section() {
  if (section_ != &::google::protobuf::internal::kEmptyString) {
    section_->clear();
  }
  clear_has_section();
}
inline const ::std::string& MobileAdRequest::section() const {
  return *section_;
}
inline void MobileAdRequest::set_section(const ::std::string& value) {
  set_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    section_ = new ::std::string;
  }
  section_->assign(value);
}
inline void MobileAdRequest::set_section(const char* value) {
  set_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    section_ = new ::std::string;
  }
  section_->assign(value);
}
inline void MobileAdRequest::set_section(const char* value, size_t size) {
  set_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    section_ = new ::std::string;
  }
  section_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_section() {
  set_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    section_ = new ::std::string;
  }
  return section_;
}
inline ::std::string* MobileAdRequest::release_section() {
  clear_has_section();
  if (section_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = section_;
    section_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_section(::std::string* section) {
  if (section_ != &::google::protobuf::internal::kEmptyString) {
    delete section_;
  }
  if (section) {
    set_has_section();
    section_ = section;
  } else {
    clear_has_section();
    section_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adCount = 20;
inline bool MobileAdRequest::has_adcount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MobileAdRequest::set_has_adcount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MobileAdRequest::clear_has_adcount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MobileAdRequest::clear_adcount() {
  if (adcount_ != &::google::protobuf::internal::kEmptyString) {
    adcount_->clear();
  }
  clear_has_adcount();
}
inline const ::std::string& MobileAdRequest::adcount() const {
  return *adcount_;
}
inline void MobileAdRequest::set_adcount(const ::std::string& value) {
  set_has_adcount();
  if (adcount_ == &::google::protobuf::internal::kEmptyString) {
    adcount_ = new ::std::string;
  }
  adcount_->assign(value);
}
inline void MobileAdRequest::set_adcount(const char* value) {
  set_has_adcount();
  if (adcount_ == &::google::protobuf::internal::kEmptyString) {
    adcount_ = new ::std::string;
  }
  adcount_->assign(value);
}
inline void MobileAdRequest::set_adcount(const char* value, size_t size) {
  set_has_adcount();
  if (adcount_ == &::google::protobuf::internal::kEmptyString) {
    adcount_ = new ::std::string;
  }
  adcount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_adcount() {
  set_has_adcount();
  if (adcount_ == &::google::protobuf::internal::kEmptyString) {
    adcount_ = new ::std::string;
  }
  return adcount_;
}
inline ::std::string* MobileAdRequest::release_adcount() {
  clear_has_adcount();
  if (adcount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adcount_;
    adcount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_adcount(::std::string* adcount) {
  if (adcount_ != &::google::protobuf::internal::kEmptyString) {
    delete adcount_;
  }
  if (adcount) {
    set_has_adcount();
    adcount_ = adcount;
  } else {
    clear_has_adcount();
    adcount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.SlidingEffect slidingEffect = 21;
inline bool MobileAdRequest::has_slidingeffect() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MobileAdRequest::set_has_slidingeffect() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MobileAdRequest::clear_has_slidingeffect() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MobileAdRequest::clear_slidingeffect() {
  slidingeffect_ = 0;
  clear_has_slidingeffect();
}
inline ::com::rj::protos::mobile::MobileAdRequest_SlidingEffect MobileAdRequest::slidingeffect() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_SlidingEffect >(slidingeffect_);
}
inline void MobileAdRequest::set_slidingeffect(::com::rj::protos::mobile::MobileAdRequest_SlidingEffect value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_SlidingEffect_IsValid(value));
  set_has_slidingeffect();
  slidingeffect_ = value;
}

// optional .com.rj.protos.mobile.MobileAdRequest.Orientation orientation = 22;
inline bool MobileAdRequest::has_orientation() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MobileAdRequest::set_has_orientation() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MobileAdRequest::clear_has_orientation() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MobileAdRequest::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::com::rj::protos::mobile::MobileAdRequest_Orientation MobileAdRequest::orientation() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdRequest_Orientation >(orientation_);
}
inline void MobileAdRequest::set_orientation(::com::rj::protos::mobile::MobileAdRequest_Orientation value) {
  assert(::com::rj::protos::mobile::MobileAdRequest_Orientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// optional string dnsIp = 23;
inline bool MobileAdRequest::has_dnsip() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MobileAdRequest::set_has_dnsip() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MobileAdRequest::clear_has_dnsip() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MobileAdRequest::clear_dnsip() {
  if (dnsip_ != &::google::protobuf::internal::kEmptyString) {
    dnsip_->clear();
  }
  clear_has_dnsip();
}
inline const ::std::string& MobileAdRequest::dnsip() const {
  return *dnsip_;
}
inline void MobileAdRequest::set_dnsip(const ::std::string& value) {
  set_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    dnsip_ = new ::std::string;
  }
  dnsip_->assign(value);
}
inline void MobileAdRequest::set_dnsip(const char* value) {
  set_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    dnsip_ = new ::std::string;
  }
  dnsip_->assign(value);
}
inline void MobileAdRequest::set_dnsip(const char* value, size_t size) {
  set_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    dnsip_ = new ::std::string;
  }
  dnsip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_dnsip() {
  set_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    dnsip_ = new ::std::string;
  }
  return dnsip_;
}
inline ::std::string* MobileAdRequest::release_dnsip() {
  clear_has_dnsip();
  if (dnsip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dnsip_;
    dnsip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_dnsip(::std::string* dnsip) {
  if (dnsip_ != &::google::protobuf::internal::kEmptyString) {
    delete dnsip_;
  }
  if (dnsip) {
    set_has_dnsip();
    dnsip_ = dnsip;
  } else {
    clear_has_dnsip();
    dnsip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.Device device = 24;
inline bool MobileAdRequest::has_device() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MobileAdRequest::set_has_device() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MobileAdRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MobileAdRequest::clear_device() {
  if (device_ != NULL) device_->::com::rj::protos::mobile::MobileAdRequest_Device::Clear();
  clear_has_device();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_Device& MobileAdRequest::device() const {
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_Device* MobileAdRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::com::rj::protos::mobile::MobileAdRequest_Device;
  return device_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_Device* MobileAdRequest::release_device() {
  clear_has_device();
  ::com::rj::protos::mobile::MobileAdRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void MobileAdRequest::set_allocated_device(::com::rj::protos::mobile::MobileAdRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
}

// optional .com.rj.protos.mobile.MobileAdRequest.User user = 25;
inline bool MobileAdRequest::has_user() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MobileAdRequest::set_has_user() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MobileAdRequest::clear_has_user() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MobileAdRequest::clear_user() {
  if (user_ != NULL) user_->::com::rj::protos::mobile::MobileAdRequest_User::Clear();
  clear_has_user();
}
inline const ::com::rj::protos::mobile::MobileAdRequest_User& MobileAdRequest::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_User* MobileAdRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::com::rj::protos::mobile::MobileAdRequest_User;
  return user_;
}
inline ::com::rj::protos::mobile::MobileAdRequest_User* MobileAdRequest::release_user() {
  clear_has_user();
  ::com::rj::protos::mobile::MobileAdRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void MobileAdRequest::set_allocated_user(::com::rj::protos::mobile::MobileAdRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional string wifiMac = 26;
inline bool MobileAdRequest::has_wifimac() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MobileAdRequest::set_has_wifimac() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MobileAdRequest::clear_has_wifimac() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MobileAdRequest::clear_wifimac() {
  if (wifimac_ != &::google::protobuf::internal::kEmptyString) {
    wifimac_->clear();
  }
  clear_has_wifimac();
}
inline const ::std::string& MobileAdRequest::wifimac() const {
  return *wifimac_;
}
inline void MobileAdRequest::set_wifimac(const ::std::string& value) {
  set_has_wifimac();
  if (wifimac_ == &::google::protobuf::internal::kEmptyString) {
    wifimac_ = new ::std::string;
  }
  wifimac_->assign(value);
}
inline void MobileAdRequest::set_wifimac(const char* value) {
  set_has_wifimac();
  if (wifimac_ == &::google::protobuf::internal::kEmptyString) {
    wifimac_ = new ::std::string;
  }
  wifimac_->assign(value);
}
inline void MobileAdRequest::set_wifimac(const char* value, size_t size) {
  set_has_wifimac();
  if (wifimac_ == &::google::protobuf::internal::kEmptyString) {
    wifimac_ = new ::std::string;
  }
  wifimac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_wifimac() {
  set_has_wifimac();
  if (wifimac_ == &::google::protobuf::internal::kEmptyString) {
    wifimac_ = new ::std::string;
  }
  return wifimac_;
}
inline ::std::string* MobileAdRequest::release_wifimac() {
  clear_has_wifimac();
  if (wifimac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wifimac_;
    wifimac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_wifimac(::std::string* wifimac) {
  if (wifimac_ != &::google::protobuf::internal::kEmptyString) {
    delete wifimac_;
  }
  if (wifimac) {
    set_has_wifimac();
    wifimac_ = wifimac;
  } else {
    clear_has_wifimac();
    wifimac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bluetoothMac = 27;
inline bool MobileAdRequest::has_bluetoothmac() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MobileAdRequest::set_has_bluetoothmac() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MobileAdRequest::clear_has_bluetoothmac() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MobileAdRequest::clear_bluetoothmac() {
  if (bluetoothmac_ != &::google::protobuf::internal::kEmptyString) {
    bluetoothmac_->clear();
  }
  clear_has_bluetoothmac();
}
inline const ::std::string& MobileAdRequest::bluetoothmac() const {
  return *bluetoothmac_;
}
inline void MobileAdRequest::set_bluetoothmac(const ::std::string& value) {
  set_has_bluetoothmac();
  if (bluetoothmac_ == &::google::protobuf::internal::kEmptyString) {
    bluetoothmac_ = new ::std::string;
  }
  bluetoothmac_->assign(value);
}
inline void MobileAdRequest::set_bluetoothmac(const char* value) {
  set_has_bluetoothmac();
  if (bluetoothmac_ == &::google::protobuf::internal::kEmptyString) {
    bluetoothmac_ = new ::std::string;
  }
  bluetoothmac_->assign(value);
}
inline void MobileAdRequest::set_bluetoothmac(const char* value, size_t size) {
  set_has_bluetoothmac();
  if (bluetoothmac_ == &::google::protobuf::internal::kEmptyString) {
    bluetoothmac_ = new ::std::string;
  }
  bluetoothmac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_bluetoothmac() {
  set_has_bluetoothmac();
  if (bluetoothmac_ == &::google::protobuf::internal::kEmptyString) {
    bluetoothmac_ = new ::std::string;
  }
  return bluetoothmac_;
}
inline ::std::string* MobileAdRequest::release_bluetoothmac() {
  clear_has_bluetoothmac();
  if (bluetoothmac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bluetoothmac_;
    bluetoothmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_bluetoothmac(::std::string* bluetoothmac) {
  if (bluetoothmac_ != &::google::protobuf::internal::kEmptyString) {
    delete bluetoothmac_;
  }
  if (bluetoothmac) {
    set_has_bluetoothmac();
    bluetoothmac_ = bluetoothmac;
  } else {
    clear_has_bluetoothmac();
    bluetoothmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string simSerialNumber = 28;
inline bool MobileAdRequest::has_simserialnumber() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MobileAdRequest::set_has_simserialnumber() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MobileAdRequest::clear_has_simserialnumber() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MobileAdRequest::clear_simserialnumber() {
  if (simserialnumber_ != &::google::protobuf::internal::kEmptyString) {
    simserialnumber_->clear();
  }
  clear_has_simserialnumber();
}
inline const ::std::string& MobileAdRequest::simserialnumber() const {
  return *simserialnumber_;
}
inline void MobileAdRequest::set_simserialnumber(const ::std::string& value) {
  set_has_simserialnumber();
  if (simserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    simserialnumber_ = new ::std::string;
  }
  simserialnumber_->assign(value);
}
inline void MobileAdRequest::set_simserialnumber(const char* value) {
  set_has_simserialnumber();
  if (simserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    simserialnumber_ = new ::std::string;
  }
  simserialnumber_->assign(value);
}
inline void MobileAdRequest::set_simserialnumber(const char* value, size_t size) {
  set_has_simserialnumber();
  if (simserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    simserialnumber_ = new ::std::string;
  }
  simserialnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_simserialnumber() {
  set_has_simserialnumber();
  if (simserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    simserialnumber_ = new ::std::string;
  }
  return simserialnumber_;
}
inline ::std::string* MobileAdRequest::release_simserialnumber() {
  clear_has_simserialnumber();
  if (simserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = simserialnumber_;
    simserialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_simserialnumber(::std::string* simserialnumber) {
  if (simserialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete simserialnumber_;
  }
  if (simserialnumber) {
    set_has_simserialnumber();
    simserialnumber_ = simserialnumber;
  } else {
    clear_has_simserialnumber();
    simserialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string androidId = 29;
inline bool MobileAdRequest::has_androidid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MobileAdRequest::set_has_androidid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MobileAdRequest::clear_has_androidid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MobileAdRequest::clear_androidid() {
  if (androidid_ != &::google::protobuf::internal::kEmptyString) {
    androidid_->clear();
  }
  clear_has_androidid();
}
inline const ::std::string& MobileAdRequest::androidid() const {
  return *androidid_;
}
inline void MobileAdRequest::set_androidid(const ::std::string& value) {
  set_has_androidid();
  if (androidid_ == &::google::protobuf::internal::kEmptyString) {
    androidid_ = new ::std::string;
  }
  androidid_->assign(value);
}
inline void MobileAdRequest::set_androidid(const char* value) {
  set_has_androidid();
  if (androidid_ == &::google::protobuf::internal::kEmptyString) {
    androidid_ = new ::std::string;
  }
  androidid_->assign(value);
}
inline void MobileAdRequest::set_androidid(const char* value, size_t size) {
  set_has_androidid();
  if (androidid_ == &::google::protobuf::internal::kEmptyString) {
    androidid_ = new ::std::string;
  }
  androidid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_androidid() {
  set_has_androidid();
  if (androidid_ == &::google::protobuf::internal::kEmptyString) {
    androidid_ = new ::std::string;
  }
  return androidid_;
}
inline ::std::string* MobileAdRequest::release_androidid() {
  clear_has_androidid();
  if (androidid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = androidid_;
    androidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_androidid(::std::string* androidid) {
  if (androidid_ != &::google::protobuf::internal::kEmptyString) {
    delete androidid_;
  }
  if (androidid) {
    set_has_androidid();
    androidid_ = androidid;
  } else {
    clear_has_androidid();
    androidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceSerialNumber = 30;
inline bool MobileAdRequest::has_deviceserialnumber() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MobileAdRequest::set_has_deviceserialnumber() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MobileAdRequest::clear_has_deviceserialnumber() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MobileAdRequest::clear_deviceserialnumber() {
  if (deviceserialnumber_ != &::google::protobuf::internal::kEmptyString) {
    deviceserialnumber_->clear();
  }
  clear_has_deviceserialnumber();
}
inline const ::std::string& MobileAdRequest::deviceserialnumber() const {
  return *deviceserialnumber_;
}
inline void MobileAdRequest::set_deviceserialnumber(const ::std::string& value) {
  set_has_deviceserialnumber();
  if (deviceserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    deviceserialnumber_ = new ::std::string;
  }
  deviceserialnumber_->assign(value);
}
inline void MobileAdRequest::set_deviceserialnumber(const char* value) {
  set_has_deviceserialnumber();
  if (deviceserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    deviceserialnumber_ = new ::std::string;
  }
  deviceserialnumber_->assign(value);
}
inline void MobileAdRequest::set_deviceserialnumber(const char* value, size_t size) {
  set_has_deviceserialnumber();
  if (deviceserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    deviceserialnumber_ = new ::std::string;
  }
  deviceserialnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_deviceserialnumber() {
  set_has_deviceserialnumber();
  if (deviceserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    deviceserialnumber_ = new ::std::string;
  }
  return deviceserialnumber_;
}
inline ::std::string* MobileAdRequest::release_deviceserialnumber() {
  clear_has_deviceserialnumber();
  if (deviceserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceserialnumber_;
    deviceserialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_deviceserialnumber(::std::string* deviceserialnumber) {
  if (deviceserialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceserialnumber_;
  }
  if (deviceserialnumber) {
    set_has_deviceserialnumber();
    deviceserialnumber_ = deviceserialnumber;
  } else {
    clear_has_deviceserialnumber();
    deviceserialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cpuSerialNumber = 31;
inline bool MobileAdRequest::has_cpuserialnumber() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MobileAdRequest::set_has_cpuserialnumber() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MobileAdRequest::clear_has_cpuserialnumber() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MobileAdRequest::clear_cpuserialnumber() {
  if (cpuserialnumber_ != &::google::protobuf::internal::kEmptyString) {
    cpuserialnumber_->clear();
  }
  clear_has_cpuserialnumber();
}
inline const ::std::string& MobileAdRequest::cpuserialnumber() const {
  return *cpuserialnumber_;
}
inline void MobileAdRequest::set_cpuserialnumber(const ::std::string& value) {
  set_has_cpuserialnumber();
  if (cpuserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    cpuserialnumber_ = new ::std::string;
  }
  cpuserialnumber_->assign(value);
}
inline void MobileAdRequest::set_cpuserialnumber(const char* value) {
  set_has_cpuserialnumber();
  if (cpuserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    cpuserialnumber_ = new ::std::string;
  }
  cpuserialnumber_->assign(value);
}
inline void MobileAdRequest::set_cpuserialnumber(const char* value, size_t size) {
  set_has_cpuserialnumber();
  if (cpuserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    cpuserialnumber_ = new ::std::string;
  }
  cpuserialnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdRequest::mutable_cpuserialnumber() {
  set_has_cpuserialnumber();
  if (cpuserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    cpuserialnumber_ = new ::std::string;
  }
  return cpuserialnumber_;
}
inline ::std::string* MobileAdRequest::release_cpuserialnumber() {
  clear_has_cpuserialnumber();
  if (cpuserialnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cpuserialnumber_;
    cpuserialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdRequest::set_allocated_cpuserialnumber(::std::string* cpuserialnumber) {
  if (cpuserialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete cpuserialnumber_;
  }
  if (cpuserialnumber) {
    set_has_cpuserialnumber();
    cpuserialnumber_ = cpuserialnumber;
  } else {
    clear_has_cpuserialnumber();
    cpuserialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mobile
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_User_Gender>() {
  return ::com::rj::protos::mobile::MobileAdRequest_User_Gender_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_TestFlag>() {
  return ::com::rj::protos::mobile::MobileAdRequest_TestFlag_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_Type>() {
  return ::com::rj::protos::mobile::MobileAdRequest_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_Platform>() {
  return ::com::rj::protos::mobile::MobileAdRequest_Platform_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_SlidingEffect>() {
  return ::com::rj::protos::mobile::MobileAdRequest_SlidingEffect_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdRequest_Orientation>() {
  return ::com::rj::protos::mobile::MobileAdRequest_Orientation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AdMobileRequest_2eproto__INCLUDED
