// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdVastRequestTemplate.proto

#ifndef PROTOBUF_AdVastRequestTemplate_2eproto__INCLUDED
#define PROTOBUF_AdVastRequestTemplate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AdVastRequestTemplate_2eproto();
void protobuf_AssignDesc_AdVastRequestTemplate_2eproto();
void protobuf_ShutdownFile_AdVastRequestTemplate_2eproto();

class VastRequest;
class VastRequest_Video;
class VastRequest_Site;
class VastRequest_Device;
class VastRequest_User;

// ===================================================================

class VastRequest_Video : public ::google::protobuf::Message {
 public:
  VastRequest_Video();
  virtual ~VastRequest_Video();

  VastRequest_Video(const VastRequest_Video& from);

  inline VastRequest_Video& operator=(const VastRequest_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VastRequest_Video& default_instance();

  void Swap(VastRequest_Video* other);

  // implements Message ----------------------------------------------

  VastRequest_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VastRequest_Video& from);
  void MergeFrom(const VastRequest_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string videoId = 1;
  inline bool has_videoid() const;
  inline void clear_videoid();
  static const int kVideoIdFieldNumber = 1;
  inline const ::std::string& videoid() const;
  inline void set_videoid(const ::std::string& value);
  inline void set_videoid(const char* value);
  inline void set_videoid(const char* value, size_t size);
  inline ::std::string* mutable_videoid();
  inline ::std::string* release_videoid();
  inline void set_allocated_videoid(::std::string* videoid);

  // optional string videoTitle = 2;
  inline bool has_videotitle() const;
  inline void clear_videotitle();
  static const int kVideoTitleFieldNumber = 2;
  inline const ::std::string& videotitle() const;
  inline void set_videotitle(const ::std::string& value);
  inline void set_videotitle(const char* value);
  inline void set_videotitle(const char* value, size_t size);
  inline ::std::string* mutable_videotitle();
  inline ::std::string* release_videotitle();
  inline void set_allocated_videotitle(::std::string* videotitle);

  // optional string videoDesc = 3;
  inline bool has_videodesc() const;
  inline void clear_videodesc();
  static const int kVideoDescFieldNumber = 3;
  inline const ::std::string& videodesc() const;
  inline void set_videodesc(const ::std::string& value);
  inline void set_videodesc(const char* value);
  inline void set_videodesc(const char* value, size_t size);
  inline ::std::string* mutable_videodesc();
  inline ::std::string* release_videodesc();
  inline void set_allocated_videodesc(::std::string* videodesc);

  // optional string pageUrl = 4;
  inline bool has_pageurl() const;
  inline void clear_pageurl();
  static const int kPageUrlFieldNumber = 4;
  inline const ::std::string& pageurl() const;
  inline void set_pageurl(const ::std::string& value);
  inline void set_pageurl(const char* value);
  inline void set_pageurl(const char* value, size_t size);
  inline ::std::string* mutable_pageurl();
  inline ::std::string* release_pageurl();
  inline void set_allocated_pageurl(::std::string* pageurl);

  // optional string videoAssetUrl = 5;
  inline bool has_videoasseturl() const;
  inline void clear_videoasseturl();
  static const int kVideoAssetUrlFieldNumber = 5;
  inline const ::std::string& videoasseturl() const;
  inline void set_videoasseturl(const ::std::string& value);
  inline void set_videoasseturl(const char* value);
  inline void set_videoasseturl(const char* value, size_t size);
  inline ::std::string* mutable_videoasseturl();
  inline ::std::string* release_videoasseturl();
  inline void set_allocated_videoasseturl(::std::string* videoasseturl);

  // optional string videoWidth = 6;
  inline bool has_videowidth() const;
  inline void clear_videowidth();
  static const int kVideoWidthFieldNumber = 6;
  inline const ::std::string& videowidth() const;
  inline void set_videowidth(const ::std::string& value);
  inline void set_videowidth(const char* value);
  inline void set_videowidth(const char* value, size_t size);
  inline ::std::string* mutable_videowidth();
  inline ::std::string* release_videowidth();
  inline void set_allocated_videowidth(::std::string* videowidth);

  // optional string videoHeight = 7;
  inline bool has_videoheight() const;
  inline void clear_videoheight();
  static const int kVideoHeightFieldNumber = 7;
  inline const ::std::string& videoheight() const;
  inline void set_videoheight(const ::std::string& value);
  inline void set_videoheight(const char* value);
  inline void set_videoheight(const char* value, size_t size);
  inline ::std::string* mutable_videoheight();
  inline ::std::string* release_videoheight();
  inline void set_allocated_videoheight(::std::string* videoheight);

  // optional string startdelay = 8;
  inline bool has_startdelay() const;
  inline void clear_startdelay();
  static const int kStartdelayFieldNumber = 8;
  inline const ::std::string& startdelay() const;
  inline void set_startdelay(const ::std::string& value);
  inline void set_startdelay(const char* value);
  inline void set_startdelay(const char* value, size_t size);
  inline ::std::string* mutable_startdelay();
  inline ::std::string* release_startdelay();
  inline void set_allocated_startdelay(::std::string* startdelay);

  // optional string maxAdDuration = 9;
  inline bool has_maxadduration() const;
  inline void clear_maxadduration();
  static const int kMaxAdDurationFieldNumber = 9;
  inline const ::std::string& maxadduration() const;
  inline void set_maxadduration(const ::std::string& value);
  inline void set_maxadduration(const char* value);
  inline void set_maxadduration(const char* value, size_t size);
  inline ::std::string* mutable_maxadduration();
  inline ::std::string* release_maxadduration();
  inline void set_allocated_maxadduration(::std::string* maxadduration);

  // optional string minAdDuration = 10;
  inline bool has_minadduration() const;
  inline void clear_minadduration();
  static const int kMinAdDurationFieldNumber = 10;
  inline const ::std::string& minadduration() const;
  inline void set_minadduration(const ::std::string& value);
  inline void set_minadduration(const char* value);
  inline void set_minadduration(const char* value, size_t size);
  inline ::std::string* mutable_minadduration();
  inline ::std::string* release_minadduration();
  inline void set_allocated_minadduration(::std::string* minadduration);

  // optional string maxAdNum = 11;
  inline bool has_maxadnum() const;
  inline void clear_maxadnum();
  static const int kMaxAdNumFieldNumber = 11;
  inline const ::std::string& maxadnum() const;
  inline void set_maxadnum(const ::std::string& value);
  inline void set_maxadnum(const char* value);
  inline void set_maxadnum(const char* value, size_t size);
  inline ::std::string* mutable_maxadnum();
  inline ::std::string* release_maxadnum();
  inline void set_allocated_maxadnum(::std::string* maxadnum);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.VastRequest.Video)
 private:
  inline void set_has_videoid();
  inline void clear_has_videoid();
  inline void set_has_videotitle();
  inline void clear_has_videotitle();
  inline void set_has_videodesc();
  inline void clear_has_videodesc();
  inline void set_has_pageurl();
  inline void clear_has_pageurl();
  inline void set_has_videoasseturl();
  inline void clear_has_videoasseturl();
  inline void set_has_videowidth();
  inline void clear_has_videowidth();
  inline void set_has_videoheight();
  inline void clear_has_videoheight();
  inline void set_has_startdelay();
  inline void clear_has_startdelay();
  inline void set_has_maxadduration();
  inline void clear_has_maxadduration();
  inline void set_has_minadduration();
  inline void clear_has_minadduration();
  inline void set_has_maxadnum();
  inline void clear_has_maxadnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* videoid_;
  ::std::string* videotitle_;
  ::std::string* videodesc_;
  ::std::string* pageurl_;
  ::std::string* videoasseturl_;
  ::std::string* videowidth_;
  ::std::string* videoheight_;
  ::std::string* startdelay_;
  ::std::string* maxadduration_;
  ::std::string* minadduration_;
  ::std::string* maxadnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_AssignDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdVastRequestTemplate_2eproto();

  void InitAsDefaultInstance();
  static VastRequest_Video* default_instance_;
};
// -------------------------------------------------------------------

class VastRequest_Site : public ::google::protobuf::Message {
 public:
  VastRequest_Site();
  virtual ~VastRequest_Site();

  VastRequest_Site(const VastRequest_Site& from);

  inline VastRequest_Site& operator=(const VastRequest_Site& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VastRequest_Site& default_instance();

  void Swap(VastRequest_Site* other);

  // implements Message ----------------------------------------------

  VastRequest_Site* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VastRequest_Site& from);
  void MergeFrom(const VastRequest_Site& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string domain = 3;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 3;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional string publisherId = 4;
  inline bool has_publisherid() const;
  inline void clear_publisherid();
  static const int kPublisherIdFieldNumber = 4;
  inline const ::std::string& publisherid() const;
  inline void set_publisherid(const ::std::string& value);
  inline void set_publisherid(const char* value);
  inline void set_publisherid(const char* value, size_t size);
  inline ::std::string* mutable_publisherid();
  inline ::std::string* release_publisherid();
  inline void set_allocated_publisherid(::std::string* publisherid);

  // optional string sitecat = 5;
  inline bool has_sitecat() const;
  inline void clear_sitecat();
  static const int kSitecatFieldNumber = 5;
  inline const ::std::string& sitecat() const;
  inline void set_sitecat(const ::std::string& value);
  inline void set_sitecat(const char* value);
  inline void set_sitecat(const char* value, size_t size);
  inline ::std::string* mutable_sitecat();
  inline ::std::string* release_sitecat();
  inline void set_allocated_sitecat(::std::string* sitecat);

  // optional string page = 6;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 6;
  inline const ::std::string& page() const;
  inline void set_page(const ::std::string& value);
  inline void set_page(const char* value);
  inline void set_page(const char* value, size_t size);
  inline ::std::string* mutable_page();
  inline ::std::string* release_page();
  inline void set_allocated_page(::std::string* page);

  // optional string ref = 7;
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 7;
  inline const ::std::string& ref() const;
  inline void set_ref(const ::std::string& value);
  inline void set_ref(const char* value);
  inline void set_ref(const char* value, size_t size);
  inline ::std::string* mutable_ref();
  inline ::std::string* release_ref();
  inline void set_allocated_ref(::std::string* ref);

  // optional bool vast20 = 8;
  inline bool has_vast20() const;
  inline void clear_vast20();
  static const int kVast20FieldNumber = 8;
  inline bool vast20() const;
  inline void set_vast20(bool value);

  // optional bool vast30 = 9;
  inline bool has_vast30() const;
  inline void clear_vast30();
  static const int kVast30FieldNumber = 9;
  inline bool vast30() const;
  inline void set_vast30(bool value);

  // optional bool vpaid10 = 10;
  inline bool has_vpaid10() const;
  inline void clear_vpaid10();
  static const int kVpaid10FieldNumber = 10;
  inline bool vpaid10() const;
  inline void set_vpaid10(bool value);

  // optional bool failover = 11;
  inline bool has_failover() const;
  inline void clear_failover();
  static const int kFailoverFieldNumber = 11;
  inline bool failover() const;
  inline void set_failover(bool value);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.VastRequest.Site)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_publisherid();
  inline void clear_has_publisherid();
  inline void set_has_sitecat();
  inline void clear_has_sitecat();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_ref();
  inline void clear_has_ref();
  inline void set_has_vast20();
  inline void clear_has_vast20();
  inline void set_has_vast30();
  inline void clear_has_vast30();
  inline void set_has_vpaid10();
  inline void clear_has_vpaid10();
  inline void set_has_failover();
  inline void clear_has_failover();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sid_;
  ::std::string* name_;
  ::std::string* domain_;
  ::std::string* publisherid_;
  ::std::string* sitecat_;
  ::std::string* page_;
  ::std::string* ref_;
  bool vast20_;
  bool vast30_;
  bool vpaid10_;
  bool failover_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_AssignDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdVastRequestTemplate_2eproto();

  void InitAsDefaultInstance();
  static VastRequest_Site* default_instance_;
};
// -------------------------------------------------------------------

class VastRequest_Device : public ::google::protobuf::Message {
 public:
  VastRequest_Device();
  virtual ~VastRequest_Device();

  VastRequest_Device(const VastRequest_Device& from);

  inline VastRequest_Device& operator=(const VastRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VastRequest_Device& default_instance();

  void Swap(VastRequest_Device* other);

  // implements Message ----------------------------------------------

  VastRequest_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VastRequest_Device& from);
  void MergeFrom(const VastRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dnt = 1;
  inline bool has_dnt() const;
  inline void clear_dnt();
  static const int kDntFieldNumber = 1;
  inline const ::std::string& dnt() const;
  inline void set_dnt(const ::std::string& value);
  inline void set_dnt(const char* value);
  inline void set_dnt(const char* value, size_t size);
  inline ::std::string* mutable_dnt();
  inline ::std::string* release_dnt();
  inline void set_allocated_dnt(::std::string* dnt);

  // optional string ua = 2;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 2;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string lang = 4;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 4;
  inline const ::std::string& lang() const;
  inline void set_lang(const ::std::string& value);
  inline void set_lang(const char* value);
  inline void set_lang(const char* value, size_t size);
  inline ::std::string* mutable_lang();
  inline ::std::string* release_lang();
  inline void set_allocated_lang(::std::string* lang);

  // optional string os = 5;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 5;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // optional string browser = 6;
  inline bool has_browser() const;
  inline void clear_browser();
  static const int kBrowserFieldNumber = 6;
  inline const ::std::string& browser() const;
  inline void set_browser(const ::std::string& value);
  inline void set_browser(const char* value);
  inline void set_browser(const char* value, size_t size);
  inline ::std::string* mutable_browser();
  inline ::std::string* release_browser();
  inline void set_allocated_browser(::std::string* browser);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.VastRequest.Device)
 private:
  inline void set_has_dnt();
  inline void clear_has_dnt();
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_browser();
  inline void clear_has_browser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dnt_;
  ::std::string* ua_;
  ::std::string* ip_;
  ::std::string* lang_;
  ::std::string* os_;
  ::std::string* browser_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_AssignDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdVastRequestTemplate_2eproto();

  void InitAsDefaultInstance();
  static VastRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class VastRequest_User : public ::google::protobuf::Message {
 public:
  VastRequest_User();
  virtual ~VastRequest_User();

  VastRequest_User(const VastRequest_User& from);

  inline VastRequest_User& operator=(const VastRequest_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VastRequest_User& default_instance();

  void Swap(VastRequest_User* other);

  // implements Message ----------------------------------------------

  VastRequest_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VastRequest_User& from);
  void MergeFrom(const VastRequest_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string countryCode = 2;
  inline bool has_countrycode() const;
  inline void clear_countrycode();
  static const int kCountryCodeFieldNumber = 2;
  inline const ::std::string& countrycode() const;
  inline void set_countrycode(const ::std::string& value);
  inline void set_countrycode(const char* value);
  inline void set_countrycode(const char* value, size_t size);
  inline ::std::string* mutable_countrycode();
  inline ::std::string* release_countrycode();
  inline void set_allocated_countrycode(::std::string* countrycode);

  // optional string regionName = 3;
  inline bool has_regionname() const;
  inline void clear_regionname();
  static const int kRegionNameFieldNumber = 3;
  inline const ::std::string& regionname() const;
  inline void set_regionname(const ::std::string& value);
  inline void set_regionname(const char* value);
  inline void set_regionname(const char* value, size_t size);
  inline ::std::string* mutable_regionname();
  inline ::std::string* release_regionname();
  inline void set_allocated_regionname(::std::string* regionname);

  // optional string cityName = 4;
  inline bool has_cityname() const;
  inline void clear_cityname();
  static const int kCityNameFieldNumber = 4;
  inline const ::std::string& cityname() const;
  inline void set_cityname(const ::std::string& value);
  inline void set_cityname(const char* value);
  inline void set_cityname(const char* value, size_t size);
  inline ::std::string* mutable_cityname();
  inline ::std::string* release_cityname();
  inline void set_allocated_cityname(::std::string* cityname);

  // optional string latitude = 5;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  inline const ::std::string& latitude() const;
  inline void set_latitude(const ::std::string& value);
  inline void set_latitude(const char* value);
  inline void set_latitude(const char* value, size_t size);
  inline ::std::string* mutable_latitude();
  inline ::std::string* release_latitude();
  inline void set_allocated_latitude(::std::string* latitude);

  // optional string longitude = 6;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 6;
  inline const ::std::string& longitude() const;
  inline void set_longitude(const ::std::string& value);
  inline void set_longitude(const char* value);
  inline void set_longitude(const char* value, size_t size);
  inline ::std::string* mutable_longitude();
  inline ::std::string* release_longitude();
  inline void set_allocated_longitude(::std::string* longitude);

  // optional string isp = 7;
  inline bool has_isp() const;
  inline void clear_isp();
  static const int kIspFieldNumber = 7;
  inline const ::std::string& isp() const;
  inline void set_isp(const ::std::string& value);
  inline void set_isp(const char* value);
  inline void set_isp(const char* value, size_t size);
  inline ::std::string* mutable_isp();
  inline ::std::string* release_isp();
  inline void set_allocated_isp(::std::string* isp);

  // optional string domain = 8;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 8;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional string mcc = 9;
  inline bool has_mcc() const;
  inline void clear_mcc();
  static const int kMccFieldNumber = 9;
  inline const ::std::string& mcc() const;
  inline void set_mcc(const ::std::string& value);
  inline void set_mcc(const char* value);
  inline void set_mcc(const char* value, size_t size);
  inline ::std::string* mutable_mcc();
  inline ::std::string* release_mcc();
  inline void set_allocated_mcc(::std::string* mcc);

  // optional string mnc = 10;
  inline bool has_mnc() const;
  inline void clear_mnc();
  static const int kMncFieldNumber = 10;
  inline const ::std::string& mnc() const;
  inline void set_mnc(const ::std::string& value);
  inline void set_mnc(const char* value);
  inline void set_mnc(const char* value, size_t size);
  inline ::std::string* mutable_mnc();
  inline ::std::string* release_mnc();
  inline void set_allocated_mnc(::std::string* mnc);

  // optional string mobile_brand = 11;
  inline bool has_mobile_brand() const;
  inline void clear_mobile_brand();
  static const int kMobileBrandFieldNumber = 11;
  inline const ::std::string& mobile_brand() const;
  inline void set_mobile_brand(const ::std::string& value);
  inline void set_mobile_brand(const char* value);
  inline void set_mobile_brand(const char* value, size_t size);
  inline ::std::string* mutable_mobile_brand();
  inline ::std::string* release_mobile_brand();
  inline void set_allocated_mobile_brand(::std::string* mobile_brand);

  // optional string usageType = 12;
  inline bool has_usagetype() const;
  inline void clear_usagetype();
  static const int kUsageTypeFieldNumber = 12;
  inline const ::std::string& usagetype() const;
  inline void set_usagetype(const ::std::string& value);
  inline void set_usagetype(const char* value);
  inline void set_usagetype(const char* value, size_t size);
  inline ::std::string* mutable_usagetype();
  inline ::std::string* release_usagetype();
  inline void set_allocated_usagetype(::std::string* usagetype);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.VastRequest.User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_countrycode();
  inline void clear_has_countrycode();
  inline void set_has_regionname();
  inline void clear_has_regionname();
  inline void set_has_cityname();
  inline void clear_has_cityname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_isp();
  inline void clear_has_isp();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_mcc();
  inline void clear_has_mcc();
  inline void set_has_mnc();
  inline void clear_has_mnc();
  inline void set_has_mobile_brand();
  inline void clear_has_mobile_brand();
  inline void set_has_usagetype();
  inline void clear_has_usagetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::std::string* countrycode_;
  ::std::string* regionname_;
  ::std::string* cityname_;
  ::std::string* latitude_;
  ::std::string* longitude_;
  ::std::string* isp_;
  ::std::string* domain_;
  ::std::string* mcc_;
  ::std::string* mnc_;
  ::std::string* mobile_brand_;
  ::std::string* usagetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_AssignDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdVastRequestTemplate_2eproto();

  void InitAsDefaultInstance();
  static VastRequest_User* default_instance_;
};
// -------------------------------------------------------------------

class VastRequest : public ::google::protobuf::Message {
 public:
  VastRequest();
  virtual ~VastRequest();

  VastRequest(const VastRequest& from);

  inline VastRequest& operator=(const VastRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VastRequest& default_instance();

  void Swap(VastRequest* other);

  // implements Message ----------------------------------------------

  VastRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VastRequest& from);
  void MergeFrom(const VastRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VastRequest_Video Video;
  typedef VastRequest_Site Site;
  typedef VastRequest_Device Device;
  typedef VastRequest_User User;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::std::string& player() const;
  inline void set_player(const ::std::string& value);
  inline void set_player(const char* value);
  inline void set_player(const char* value, size_t size);
  inline ::std::string* mutable_player();
  inline ::std::string* release_player();
  inline void set_allocated_player(::std::string* player);

  // optional .com.rj.protos.msg.VastRequest.Video video = 3;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 3;
  inline const ::com::rj::protos::msg::VastRequest_Video& video() const;
  inline ::com::rj::protos::msg::VastRequest_Video* mutable_video();
  inline ::com::rj::protos::msg::VastRequest_Video* release_video();
  inline void set_allocated_video(::com::rj::protos::msg::VastRequest_Video* video);

  // optional .com.rj.protos.msg.VastRequest.Site site = 4;
  inline bool has_site() const;
  inline void clear_site();
  static const int kSiteFieldNumber = 4;
  inline const ::com::rj::protos::msg::VastRequest_Site& site() const;
  inline ::com::rj::protos::msg::VastRequest_Site* mutable_site();
  inline ::com::rj::protos::msg::VastRequest_Site* release_site();
  inline void set_allocated_site(::com::rj::protos::msg::VastRequest_Site* site);

  // optional .com.rj.protos.msg.VastRequest.Device device = 5;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 5;
  inline const ::com::rj::protos::msg::VastRequest_Device& device() const;
  inline ::com::rj::protos::msg::VastRequest_Device* mutable_device();
  inline ::com::rj::protos::msg::VastRequest_Device* release_device();
  inline void set_allocated_device(::com::rj::protos::msg::VastRequest_Device* device);

  // optional .com.rj.protos.msg.VastRequest.User user = 6;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 6;
  inline const ::com::rj::protos::msg::VastRequest_User& user() const;
  inline ::com::rj::protos::msg::VastRequest_User* mutable_user();
  inline ::com::rj::protos::msg::VastRequest_User* release_user();
  inline void set_allocated_user(::com::rj::protos::msg::VastRequest_User* user);

  // optional string ssl = 7;
  inline bool has_ssl() const;
  inline void clear_ssl();
  static const int kSslFieldNumber = 7;
  inline const ::std::string& ssl() const;
  inline void set_ssl(const ::std::string& value);
  inline void set_ssl(const char* value);
  inline void set_ssl(const char* value, size_t size);
  inline ::std::string* mutable_ssl();
  inline ::std::string* release_ssl();
  inline void set_allocated_ssl(::std::string* ssl);

  // @@protoc_insertion_point(class_scope:com.rj.protos.msg.VastRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_site();
  inline void clear_has_site();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_ssl();
  inline void clear_has_ssl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* player_;
  ::com::rj::protos::msg::VastRequest_Video* video_;
  ::com::rj::protos::msg::VastRequest_Site* site_;
  ::com::rj::protos::msg::VastRequest_Device* device_;
  ::com::rj::protos::msg::VastRequest_User* user_;
  ::std::string* ssl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_AssignDesc_AdVastRequestTemplate_2eproto();
  friend void protobuf_ShutdownFile_AdVastRequestTemplate_2eproto();

  void InitAsDefaultInstance();
  static VastRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// VastRequest_Video

// optional string videoId = 1;
inline bool VastRequest_Video::has_videoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VastRequest_Video::set_has_videoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VastRequest_Video::clear_has_videoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VastRequest_Video::clear_videoid() {
  if (videoid_ != &::google::protobuf::internal::kEmptyString) {
    videoid_->clear();
  }
  clear_has_videoid();
}
inline const ::std::string& VastRequest_Video::videoid() const {
  return *videoid_;
}
inline void VastRequest_Video::set_videoid(const ::std::string& value) {
  set_has_videoid();
  if (videoid_ == &::google::protobuf::internal::kEmptyString) {
    videoid_ = new ::std::string;
  }
  videoid_->assign(value);
}
inline void VastRequest_Video::set_videoid(const char* value) {
  set_has_videoid();
  if (videoid_ == &::google::protobuf::internal::kEmptyString) {
    videoid_ = new ::std::string;
  }
  videoid_->assign(value);
}
inline void VastRequest_Video::set_videoid(const char* value, size_t size) {
  set_has_videoid();
  if (videoid_ == &::google::protobuf::internal::kEmptyString) {
    videoid_ = new ::std::string;
  }
  videoid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_videoid() {
  set_has_videoid();
  if (videoid_ == &::google::protobuf::internal::kEmptyString) {
    videoid_ = new ::std::string;
  }
  return videoid_;
}
inline ::std::string* VastRequest_Video::release_videoid() {
  clear_has_videoid();
  if (videoid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videoid_;
    videoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_videoid(::std::string* videoid) {
  if (videoid_ != &::google::protobuf::internal::kEmptyString) {
    delete videoid_;
  }
  if (videoid) {
    set_has_videoid();
    videoid_ = videoid;
  } else {
    clear_has_videoid();
    videoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoTitle = 2;
inline bool VastRequest_Video::has_videotitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VastRequest_Video::set_has_videotitle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VastRequest_Video::clear_has_videotitle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VastRequest_Video::clear_videotitle() {
  if (videotitle_ != &::google::protobuf::internal::kEmptyString) {
    videotitle_->clear();
  }
  clear_has_videotitle();
}
inline const ::std::string& VastRequest_Video::videotitle() const {
  return *videotitle_;
}
inline void VastRequest_Video::set_videotitle(const ::std::string& value) {
  set_has_videotitle();
  if (videotitle_ == &::google::protobuf::internal::kEmptyString) {
    videotitle_ = new ::std::string;
  }
  videotitle_->assign(value);
}
inline void VastRequest_Video::set_videotitle(const char* value) {
  set_has_videotitle();
  if (videotitle_ == &::google::protobuf::internal::kEmptyString) {
    videotitle_ = new ::std::string;
  }
  videotitle_->assign(value);
}
inline void VastRequest_Video::set_videotitle(const char* value, size_t size) {
  set_has_videotitle();
  if (videotitle_ == &::google::protobuf::internal::kEmptyString) {
    videotitle_ = new ::std::string;
  }
  videotitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_videotitle() {
  set_has_videotitle();
  if (videotitle_ == &::google::protobuf::internal::kEmptyString) {
    videotitle_ = new ::std::string;
  }
  return videotitle_;
}
inline ::std::string* VastRequest_Video::release_videotitle() {
  clear_has_videotitle();
  if (videotitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videotitle_;
    videotitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_videotitle(::std::string* videotitle) {
  if (videotitle_ != &::google::protobuf::internal::kEmptyString) {
    delete videotitle_;
  }
  if (videotitle) {
    set_has_videotitle();
    videotitle_ = videotitle;
  } else {
    clear_has_videotitle();
    videotitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoDesc = 3;
inline bool VastRequest_Video::has_videodesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VastRequest_Video::set_has_videodesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VastRequest_Video::clear_has_videodesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VastRequest_Video::clear_videodesc() {
  if (videodesc_ != &::google::protobuf::internal::kEmptyString) {
    videodesc_->clear();
  }
  clear_has_videodesc();
}
inline const ::std::string& VastRequest_Video::videodesc() const {
  return *videodesc_;
}
inline void VastRequest_Video::set_videodesc(const ::std::string& value) {
  set_has_videodesc();
  if (videodesc_ == &::google::protobuf::internal::kEmptyString) {
    videodesc_ = new ::std::string;
  }
  videodesc_->assign(value);
}
inline void VastRequest_Video::set_videodesc(const char* value) {
  set_has_videodesc();
  if (videodesc_ == &::google::protobuf::internal::kEmptyString) {
    videodesc_ = new ::std::string;
  }
  videodesc_->assign(value);
}
inline void VastRequest_Video::set_videodesc(const char* value, size_t size) {
  set_has_videodesc();
  if (videodesc_ == &::google::protobuf::internal::kEmptyString) {
    videodesc_ = new ::std::string;
  }
  videodesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_videodesc() {
  set_has_videodesc();
  if (videodesc_ == &::google::protobuf::internal::kEmptyString) {
    videodesc_ = new ::std::string;
  }
  return videodesc_;
}
inline ::std::string* VastRequest_Video::release_videodesc() {
  clear_has_videodesc();
  if (videodesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videodesc_;
    videodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_videodesc(::std::string* videodesc) {
  if (videodesc_ != &::google::protobuf::internal::kEmptyString) {
    delete videodesc_;
  }
  if (videodesc) {
    set_has_videodesc();
    videodesc_ = videodesc;
  } else {
    clear_has_videodesc();
    videodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pageUrl = 4;
inline bool VastRequest_Video::has_pageurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VastRequest_Video::set_has_pageurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VastRequest_Video::clear_has_pageurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VastRequest_Video::clear_pageurl() {
  if (pageurl_ != &::google::protobuf::internal::kEmptyString) {
    pageurl_->clear();
  }
  clear_has_pageurl();
}
inline const ::std::string& VastRequest_Video::pageurl() const {
  return *pageurl_;
}
inline void VastRequest_Video::set_pageurl(const ::std::string& value) {
  set_has_pageurl();
  if (pageurl_ == &::google::protobuf::internal::kEmptyString) {
    pageurl_ = new ::std::string;
  }
  pageurl_->assign(value);
}
inline void VastRequest_Video::set_pageurl(const char* value) {
  set_has_pageurl();
  if (pageurl_ == &::google::protobuf::internal::kEmptyString) {
    pageurl_ = new ::std::string;
  }
  pageurl_->assign(value);
}
inline void VastRequest_Video::set_pageurl(const char* value, size_t size) {
  set_has_pageurl();
  if (pageurl_ == &::google::protobuf::internal::kEmptyString) {
    pageurl_ = new ::std::string;
  }
  pageurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_pageurl() {
  set_has_pageurl();
  if (pageurl_ == &::google::protobuf::internal::kEmptyString) {
    pageurl_ = new ::std::string;
  }
  return pageurl_;
}
inline ::std::string* VastRequest_Video::release_pageurl() {
  clear_has_pageurl();
  if (pageurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pageurl_;
    pageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_pageurl(::std::string* pageurl) {
  if (pageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete pageurl_;
  }
  if (pageurl) {
    set_has_pageurl();
    pageurl_ = pageurl;
  } else {
    clear_has_pageurl();
    pageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoAssetUrl = 5;
inline bool VastRequest_Video::has_videoasseturl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VastRequest_Video::set_has_videoasseturl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VastRequest_Video::clear_has_videoasseturl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VastRequest_Video::clear_videoasseturl() {
  if (videoasseturl_ != &::google::protobuf::internal::kEmptyString) {
    videoasseturl_->clear();
  }
  clear_has_videoasseturl();
}
inline const ::std::string& VastRequest_Video::videoasseturl() const {
  return *videoasseturl_;
}
inline void VastRequest_Video::set_videoasseturl(const ::std::string& value) {
  set_has_videoasseturl();
  if (videoasseturl_ == &::google::protobuf::internal::kEmptyString) {
    videoasseturl_ = new ::std::string;
  }
  videoasseturl_->assign(value);
}
inline void VastRequest_Video::set_videoasseturl(const char* value) {
  set_has_videoasseturl();
  if (videoasseturl_ == &::google::protobuf::internal::kEmptyString) {
    videoasseturl_ = new ::std::string;
  }
  videoasseturl_->assign(value);
}
inline void VastRequest_Video::set_videoasseturl(const char* value, size_t size) {
  set_has_videoasseturl();
  if (videoasseturl_ == &::google::protobuf::internal::kEmptyString) {
    videoasseturl_ = new ::std::string;
  }
  videoasseturl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_videoasseturl() {
  set_has_videoasseturl();
  if (videoasseturl_ == &::google::protobuf::internal::kEmptyString) {
    videoasseturl_ = new ::std::string;
  }
  return videoasseturl_;
}
inline ::std::string* VastRequest_Video::release_videoasseturl() {
  clear_has_videoasseturl();
  if (videoasseturl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videoasseturl_;
    videoasseturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_videoasseturl(::std::string* videoasseturl) {
  if (videoasseturl_ != &::google::protobuf::internal::kEmptyString) {
    delete videoasseturl_;
  }
  if (videoasseturl) {
    set_has_videoasseturl();
    videoasseturl_ = videoasseturl;
  } else {
    clear_has_videoasseturl();
    videoasseturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoWidth = 6;
inline bool VastRequest_Video::has_videowidth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VastRequest_Video::set_has_videowidth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VastRequest_Video::clear_has_videowidth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VastRequest_Video::clear_videowidth() {
  if (videowidth_ != &::google::protobuf::internal::kEmptyString) {
    videowidth_->clear();
  }
  clear_has_videowidth();
}
inline const ::std::string& VastRequest_Video::videowidth() const {
  return *videowidth_;
}
inline void VastRequest_Video::set_videowidth(const ::std::string& value) {
  set_has_videowidth();
  if (videowidth_ == &::google::protobuf::internal::kEmptyString) {
    videowidth_ = new ::std::string;
  }
  videowidth_->assign(value);
}
inline void VastRequest_Video::set_videowidth(const char* value) {
  set_has_videowidth();
  if (videowidth_ == &::google::protobuf::internal::kEmptyString) {
    videowidth_ = new ::std::string;
  }
  videowidth_->assign(value);
}
inline void VastRequest_Video::set_videowidth(const char* value, size_t size) {
  set_has_videowidth();
  if (videowidth_ == &::google::protobuf::internal::kEmptyString) {
    videowidth_ = new ::std::string;
  }
  videowidth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_videowidth() {
  set_has_videowidth();
  if (videowidth_ == &::google::protobuf::internal::kEmptyString) {
    videowidth_ = new ::std::string;
  }
  return videowidth_;
}
inline ::std::string* VastRequest_Video::release_videowidth() {
  clear_has_videowidth();
  if (videowidth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videowidth_;
    videowidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_videowidth(::std::string* videowidth) {
  if (videowidth_ != &::google::protobuf::internal::kEmptyString) {
    delete videowidth_;
  }
  if (videowidth) {
    set_has_videowidth();
    videowidth_ = videowidth;
  } else {
    clear_has_videowidth();
    videowidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoHeight = 7;
inline bool VastRequest_Video::has_videoheight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VastRequest_Video::set_has_videoheight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VastRequest_Video::clear_has_videoheight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VastRequest_Video::clear_videoheight() {
  if (videoheight_ != &::google::protobuf::internal::kEmptyString) {
    videoheight_->clear();
  }
  clear_has_videoheight();
}
inline const ::std::string& VastRequest_Video::videoheight() const {
  return *videoheight_;
}
inline void VastRequest_Video::set_videoheight(const ::std::string& value) {
  set_has_videoheight();
  if (videoheight_ == &::google::protobuf::internal::kEmptyString) {
    videoheight_ = new ::std::string;
  }
  videoheight_->assign(value);
}
inline void VastRequest_Video::set_videoheight(const char* value) {
  set_has_videoheight();
  if (videoheight_ == &::google::protobuf::internal::kEmptyString) {
    videoheight_ = new ::std::string;
  }
  videoheight_->assign(value);
}
inline void VastRequest_Video::set_videoheight(const char* value, size_t size) {
  set_has_videoheight();
  if (videoheight_ == &::google::protobuf::internal::kEmptyString) {
    videoheight_ = new ::std::string;
  }
  videoheight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_videoheight() {
  set_has_videoheight();
  if (videoheight_ == &::google::protobuf::internal::kEmptyString) {
    videoheight_ = new ::std::string;
  }
  return videoheight_;
}
inline ::std::string* VastRequest_Video::release_videoheight() {
  clear_has_videoheight();
  if (videoheight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videoheight_;
    videoheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_videoheight(::std::string* videoheight) {
  if (videoheight_ != &::google::protobuf::internal::kEmptyString) {
    delete videoheight_;
  }
  if (videoheight) {
    set_has_videoheight();
    videoheight_ = videoheight;
  } else {
    clear_has_videoheight();
    videoheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string startdelay = 8;
inline bool VastRequest_Video::has_startdelay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VastRequest_Video::set_has_startdelay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VastRequest_Video::clear_has_startdelay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VastRequest_Video::clear_startdelay() {
  if (startdelay_ != &::google::protobuf::internal::kEmptyString) {
    startdelay_->clear();
  }
  clear_has_startdelay();
}
inline const ::std::string& VastRequest_Video::startdelay() const {
  return *startdelay_;
}
inline void VastRequest_Video::set_startdelay(const ::std::string& value) {
  set_has_startdelay();
  if (startdelay_ == &::google::protobuf::internal::kEmptyString) {
    startdelay_ = new ::std::string;
  }
  startdelay_->assign(value);
}
inline void VastRequest_Video::set_startdelay(const char* value) {
  set_has_startdelay();
  if (startdelay_ == &::google::protobuf::internal::kEmptyString) {
    startdelay_ = new ::std::string;
  }
  startdelay_->assign(value);
}
inline void VastRequest_Video::set_startdelay(const char* value, size_t size) {
  set_has_startdelay();
  if (startdelay_ == &::google::protobuf::internal::kEmptyString) {
    startdelay_ = new ::std::string;
  }
  startdelay_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_startdelay() {
  set_has_startdelay();
  if (startdelay_ == &::google::protobuf::internal::kEmptyString) {
    startdelay_ = new ::std::string;
  }
  return startdelay_;
}
inline ::std::string* VastRequest_Video::release_startdelay() {
  clear_has_startdelay();
  if (startdelay_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = startdelay_;
    startdelay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_startdelay(::std::string* startdelay) {
  if (startdelay_ != &::google::protobuf::internal::kEmptyString) {
    delete startdelay_;
  }
  if (startdelay) {
    set_has_startdelay();
    startdelay_ = startdelay;
  } else {
    clear_has_startdelay();
    startdelay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string maxAdDuration = 9;
inline bool VastRequest_Video::has_maxadduration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VastRequest_Video::set_has_maxadduration() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VastRequest_Video::clear_has_maxadduration() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VastRequest_Video::clear_maxadduration() {
  if (maxadduration_ != &::google::protobuf::internal::kEmptyString) {
    maxadduration_->clear();
  }
  clear_has_maxadduration();
}
inline const ::std::string& VastRequest_Video::maxadduration() const {
  return *maxadduration_;
}
inline void VastRequest_Video::set_maxadduration(const ::std::string& value) {
  set_has_maxadduration();
  if (maxadduration_ == &::google::protobuf::internal::kEmptyString) {
    maxadduration_ = new ::std::string;
  }
  maxadduration_->assign(value);
}
inline void VastRequest_Video::set_maxadduration(const char* value) {
  set_has_maxadduration();
  if (maxadduration_ == &::google::protobuf::internal::kEmptyString) {
    maxadduration_ = new ::std::string;
  }
  maxadduration_->assign(value);
}
inline void VastRequest_Video::set_maxadduration(const char* value, size_t size) {
  set_has_maxadduration();
  if (maxadduration_ == &::google::protobuf::internal::kEmptyString) {
    maxadduration_ = new ::std::string;
  }
  maxadduration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_maxadduration() {
  set_has_maxadduration();
  if (maxadduration_ == &::google::protobuf::internal::kEmptyString) {
    maxadduration_ = new ::std::string;
  }
  return maxadduration_;
}
inline ::std::string* VastRequest_Video::release_maxadduration() {
  clear_has_maxadduration();
  if (maxadduration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = maxadduration_;
    maxadduration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_maxadduration(::std::string* maxadduration) {
  if (maxadduration_ != &::google::protobuf::internal::kEmptyString) {
    delete maxadduration_;
  }
  if (maxadduration) {
    set_has_maxadduration();
    maxadduration_ = maxadduration;
  } else {
    clear_has_maxadduration();
    maxadduration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string minAdDuration = 10;
inline bool VastRequest_Video::has_minadduration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VastRequest_Video::set_has_minadduration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VastRequest_Video::clear_has_minadduration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VastRequest_Video::clear_minadduration() {
  if (minadduration_ != &::google::protobuf::internal::kEmptyString) {
    minadduration_->clear();
  }
  clear_has_minadduration();
}
inline const ::std::string& VastRequest_Video::minadduration() const {
  return *minadduration_;
}
inline void VastRequest_Video::set_minadduration(const ::std::string& value) {
  set_has_minadduration();
  if (minadduration_ == &::google::protobuf::internal::kEmptyString) {
    minadduration_ = new ::std::string;
  }
  minadduration_->assign(value);
}
inline void VastRequest_Video::set_minadduration(const char* value) {
  set_has_minadduration();
  if (minadduration_ == &::google::protobuf::internal::kEmptyString) {
    minadduration_ = new ::std::string;
  }
  minadduration_->assign(value);
}
inline void VastRequest_Video::set_minadduration(const char* value, size_t size) {
  set_has_minadduration();
  if (minadduration_ == &::google::protobuf::internal::kEmptyString) {
    minadduration_ = new ::std::string;
  }
  minadduration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_minadduration() {
  set_has_minadduration();
  if (minadduration_ == &::google::protobuf::internal::kEmptyString) {
    minadduration_ = new ::std::string;
  }
  return minadduration_;
}
inline ::std::string* VastRequest_Video::release_minadduration() {
  clear_has_minadduration();
  if (minadduration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = minadduration_;
    minadduration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_minadduration(::std::string* minadduration) {
  if (minadduration_ != &::google::protobuf::internal::kEmptyString) {
    delete minadduration_;
  }
  if (minadduration) {
    set_has_minadduration();
    minadduration_ = minadduration;
  } else {
    clear_has_minadduration();
    minadduration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string maxAdNum = 11;
inline bool VastRequest_Video::has_maxadnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VastRequest_Video::set_has_maxadnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VastRequest_Video::clear_has_maxadnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VastRequest_Video::clear_maxadnum() {
  if (maxadnum_ != &::google::protobuf::internal::kEmptyString) {
    maxadnum_->clear();
  }
  clear_has_maxadnum();
}
inline const ::std::string& VastRequest_Video::maxadnum() const {
  return *maxadnum_;
}
inline void VastRequest_Video::set_maxadnum(const ::std::string& value) {
  set_has_maxadnum();
  if (maxadnum_ == &::google::protobuf::internal::kEmptyString) {
    maxadnum_ = new ::std::string;
  }
  maxadnum_->assign(value);
}
inline void VastRequest_Video::set_maxadnum(const char* value) {
  set_has_maxadnum();
  if (maxadnum_ == &::google::protobuf::internal::kEmptyString) {
    maxadnum_ = new ::std::string;
  }
  maxadnum_->assign(value);
}
inline void VastRequest_Video::set_maxadnum(const char* value, size_t size) {
  set_has_maxadnum();
  if (maxadnum_ == &::google::protobuf::internal::kEmptyString) {
    maxadnum_ = new ::std::string;
  }
  maxadnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Video::mutable_maxadnum() {
  set_has_maxadnum();
  if (maxadnum_ == &::google::protobuf::internal::kEmptyString) {
    maxadnum_ = new ::std::string;
  }
  return maxadnum_;
}
inline ::std::string* VastRequest_Video::release_maxadnum() {
  clear_has_maxadnum();
  if (maxadnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = maxadnum_;
    maxadnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Video::set_allocated_maxadnum(::std::string* maxadnum) {
  if (maxadnum_ != &::google::protobuf::internal::kEmptyString) {
    delete maxadnum_;
  }
  if (maxadnum) {
    set_has_maxadnum();
    maxadnum_ = maxadnum;
  } else {
    clear_has_maxadnum();
    maxadnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// VastRequest_Site

// optional string sid = 1;
inline bool VastRequest_Site::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VastRequest_Site::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VastRequest_Site::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VastRequest_Site::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& VastRequest_Site::sid() const {
  return *sid_;
}
inline void VastRequest_Site::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void VastRequest_Site::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void VastRequest_Site::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Site::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* VastRequest_Site::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Site::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool VastRequest_Site::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VastRequest_Site::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VastRequest_Site::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VastRequest_Site::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VastRequest_Site::name() const {
  return *name_;
}
inline void VastRequest_Site::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VastRequest_Site::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VastRequest_Site::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Site::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VastRequest_Site::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Site::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string domain = 3;
inline bool VastRequest_Site::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VastRequest_Site::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VastRequest_Site::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VastRequest_Site::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& VastRequest_Site::domain() const {
  return *domain_;
}
inline void VastRequest_Site::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void VastRequest_Site::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void VastRequest_Site::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Site::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* VastRequest_Site::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Site::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string publisherId = 4;
inline bool VastRequest_Site::has_publisherid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VastRequest_Site::set_has_publisherid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VastRequest_Site::clear_has_publisherid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VastRequest_Site::clear_publisherid() {
  if (publisherid_ != &::google::protobuf::internal::kEmptyString) {
    publisherid_->clear();
  }
  clear_has_publisherid();
}
inline const ::std::string& VastRequest_Site::publisherid() const {
  return *publisherid_;
}
inline void VastRequest_Site::set_publisherid(const ::std::string& value) {
  set_has_publisherid();
  if (publisherid_ == &::google::protobuf::internal::kEmptyString) {
    publisherid_ = new ::std::string;
  }
  publisherid_->assign(value);
}
inline void VastRequest_Site::set_publisherid(const char* value) {
  set_has_publisherid();
  if (publisherid_ == &::google::protobuf::internal::kEmptyString) {
    publisherid_ = new ::std::string;
  }
  publisherid_->assign(value);
}
inline void VastRequest_Site::set_publisherid(const char* value, size_t size) {
  set_has_publisherid();
  if (publisherid_ == &::google::protobuf::internal::kEmptyString) {
    publisherid_ = new ::std::string;
  }
  publisherid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Site::mutable_publisherid() {
  set_has_publisherid();
  if (publisherid_ == &::google::protobuf::internal::kEmptyString) {
    publisherid_ = new ::std::string;
  }
  return publisherid_;
}
inline ::std::string* VastRequest_Site::release_publisherid() {
  clear_has_publisherid();
  if (publisherid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = publisherid_;
    publisherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Site::set_allocated_publisherid(::std::string* publisherid) {
  if (publisherid_ != &::google::protobuf::internal::kEmptyString) {
    delete publisherid_;
  }
  if (publisherid) {
    set_has_publisherid();
    publisherid_ = publisherid;
  } else {
    clear_has_publisherid();
    publisherid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sitecat = 5;
inline bool VastRequest_Site::has_sitecat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VastRequest_Site::set_has_sitecat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VastRequest_Site::clear_has_sitecat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VastRequest_Site::clear_sitecat() {
  if (sitecat_ != &::google::protobuf::internal::kEmptyString) {
    sitecat_->clear();
  }
  clear_has_sitecat();
}
inline const ::std::string& VastRequest_Site::sitecat() const {
  return *sitecat_;
}
inline void VastRequest_Site::set_sitecat(const ::std::string& value) {
  set_has_sitecat();
  if (sitecat_ == &::google::protobuf::internal::kEmptyString) {
    sitecat_ = new ::std::string;
  }
  sitecat_->assign(value);
}
inline void VastRequest_Site::set_sitecat(const char* value) {
  set_has_sitecat();
  if (sitecat_ == &::google::protobuf::internal::kEmptyString) {
    sitecat_ = new ::std::string;
  }
  sitecat_->assign(value);
}
inline void VastRequest_Site::set_sitecat(const char* value, size_t size) {
  set_has_sitecat();
  if (sitecat_ == &::google::protobuf::internal::kEmptyString) {
    sitecat_ = new ::std::string;
  }
  sitecat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Site::mutable_sitecat() {
  set_has_sitecat();
  if (sitecat_ == &::google::protobuf::internal::kEmptyString) {
    sitecat_ = new ::std::string;
  }
  return sitecat_;
}
inline ::std::string* VastRequest_Site::release_sitecat() {
  clear_has_sitecat();
  if (sitecat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sitecat_;
    sitecat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Site::set_allocated_sitecat(::std::string* sitecat) {
  if (sitecat_ != &::google::protobuf::internal::kEmptyString) {
    delete sitecat_;
  }
  if (sitecat) {
    set_has_sitecat();
    sitecat_ = sitecat;
  } else {
    clear_has_sitecat();
    sitecat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string page = 6;
inline bool VastRequest_Site::has_page() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VastRequest_Site::set_has_page() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VastRequest_Site::clear_has_page() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VastRequest_Site::clear_page() {
  if (page_ != &::google::protobuf::internal::kEmptyString) {
    page_->clear();
  }
  clear_has_page();
}
inline const ::std::string& VastRequest_Site::page() const {
  return *page_;
}
inline void VastRequest_Site::set_page(const ::std::string& value) {
  set_has_page();
  if (page_ == &::google::protobuf::internal::kEmptyString) {
    page_ = new ::std::string;
  }
  page_->assign(value);
}
inline void VastRequest_Site::set_page(const char* value) {
  set_has_page();
  if (page_ == &::google::protobuf::internal::kEmptyString) {
    page_ = new ::std::string;
  }
  page_->assign(value);
}
inline void VastRequest_Site::set_page(const char* value, size_t size) {
  set_has_page();
  if (page_ == &::google::protobuf::internal::kEmptyString) {
    page_ = new ::std::string;
  }
  page_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Site::mutable_page() {
  set_has_page();
  if (page_ == &::google::protobuf::internal::kEmptyString) {
    page_ = new ::std::string;
  }
  return page_;
}
inline ::std::string* VastRequest_Site::release_page() {
  clear_has_page();
  if (page_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_;
    page_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Site::set_allocated_page(::std::string* page) {
  if (page_ != &::google::protobuf::internal::kEmptyString) {
    delete page_;
  }
  if (page) {
    set_has_page();
    page_ = page;
  } else {
    clear_has_page();
    page_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ref = 7;
inline bool VastRequest_Site::has_ref() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VastRequest_Site::set_has_ref() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VastRequest_Site::clear_has_ref() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VastRequest_Site::clear_ref() {
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    ref_->clear();
  }
  clear_has_ref();
}
inline const ::std::string& VastRequest_Site::ref() const {
  return *ref_;
}
inline void VastRequest_Site::set_ref(const ::std::string& value) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void VastRequest_Site::set_ref(const char* value) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void VastRequest_Site::set_ref(const char* value, size_t size) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Site::mutable_ref() {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  return ref_;
}
inline ::std::string* VastRequest_Site::release_ref() {
  clear_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ref_;
    ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Site::set_allocated_ref(::std::string* ref) {
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (ref) {
    set_has_ref();
    ref_ = ref;
  } else {
    clear_has_ref();
    ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool vast20 = 8;
inline bool VastRequest_Site::has_vast20() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VastRequest_Site::set_has_vast20() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VastRequest_Site::clear_has_vast20() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VastRequest_Site::clear_vast20() {
  vast20_ = false;
  clear_has_vast20();
}
inline bool VastRequest_Site::vast20() const {
  return vast20_;
}
inline void VastRequest_Site::set_vast20(bool value) {
  set_has_vast20();
  vast20_ = value;
}

// optional bool vast30 = 9;
inline bool VastRequest_Site::has_vast30() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VastRequest_Site::set_has_vast30() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VastRequest_Site::clear_has_vast30() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VastRequest_Site::clear_vast30() {
  vast30_ = false;
  clear_has_vast30();
}
inline bool VastRequest_Site::vast30() const {
  return vast30_;
}
inline void VastRequest_Site::set_vast30(bool value) {
  set_has_vast30();
  vast30_ = value;
}

// optional bool vpaid10 = 10;
inline bool VastRequest_Site::has_vpaid10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VastRequest_Site::set_has_vpaid10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VastRequest_Site::clear_has_vpaid10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VastRequest_Site::clear_vpaid10() {
  vpaid10_ = false;
  clear_has_vpaid10();
}
inline bool VastRequest_Site::vpaid10() const {
  return vpaid10_;
}
inline void VastRequest_Site::set_vpaid10(bool value) {
  set_has_vpaid10();
  vpaid10_ = value;
}

// optional bool failover = 11;
inline bool VastRequest_Site::has_failover() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VastRequest_Site::set_has_failover() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VastRequest_Site::clear_has_failover() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VastRequest_Site::clear_failover() {
  failover_ = false;
  clear_has_failover();
}
inline bool VastRequest_Site::failover() const {
  return failover_;
}
inline void VastRequest_Site::set_failover(bool value) {
  set_has_failover();
  failover_ = value;
}

// -------------------------------------------------------------------

// VastRequest_Device

// optional string dnt = 1;
inline bool VastRequest_Device::has_dnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VastRequest_Device::set_has_dnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VastRequest_Device::clear_has_dnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VastRequest_Device::clear_dnt() {
  if (dnt_ != &::google::protobuf::internal::kEmptyString) {
    dnt_->clear();
  }
  clear_has_dnt();
}
inline const ::std::string& VastRequest_Device::dnt() const {
  return *dnt_;
}
inline void VastRequest_Device::set_dnt(const ::std::string& value) {
  set_has_dnt();
  if (dnt_ == &::google::protobuf::internal::kEmptyString) {
    dnt_ = new ::std::string;
  }
  dnt_->assign(value);
}
inline void VastRequest_Device::set_dnt(const char* value) {
  set_has_dnt();
  if (dnt_ == &::google::protobuf::internal::kEmptyString) {
    dnt_ = new ::std::string;
  }
  dnt_->assign(value);
}
inline void VastRequest_Device::set_dnt(const char* value, size_t size) {
  set_has_dnt();
  if (dnt_ == &::google::protobuf::internal::kEmptyString) {
    dnt_ = new ::std::string;
  }
  dnt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Device::mutable_dnt() {
  set_has_dnt();
  if (dnt_ == &::google::protobuf::internal::kEmptyString) {
    dnt_ = new ::std::string;
  }
  return dnt_;
}
inline ::std::string* VastRequest_Device::release_dnt() {
  clear_has_dnt();
  if (dnt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dnt_;
    dnt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Device::set_allocated_dnt(::std::string* dnt) {
  if (dnt_ != &::google::protobuf::internal::kEmptyString) {
    delete dnt_;
  }
  if (dnt) {
    set_has_dnt();
    dnt_ = dnt;
  } else {
    clear_has_dnt();
    dnt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ua = 2;
inline bool VastRequest_Device::has_ua() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VastRequest_Device::set_has_ua() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VastRequest_Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VastRequest_Device::clear_ua() {
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& VastRequest_Device::ua() const {
  return *ua_;
}
inline void VastRequest_Device::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
}
inline void VastRequest_Device::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
}
inline void VastRequest_Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Device::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  return ua_;
}
inline ::std::string* VastRequest_Device::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Device::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 3;
inline bool VastRequest_Device::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VastRequest_Device::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VastRequest_Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VastRequest_Device::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& VastRequest_Device::ip() const {
  return *ip_;
}
inline void VastRequest_Device::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void VastRequest_Device::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void VastRequest_Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Device::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* VastRequest_Device::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Device::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lang = 4;
inline bool VastRequest_Device::has_lang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VastRequest_Device::set_has_lang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VastRequest_Device::clear_has_lang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VastRequest_Device::clear_lang() {
  if (lang_ != &::google::protobuf::internal::kEmptyString) {
    lang_->clear();
  }
  clear_has_lang();
}
inline const ::std::string& VastRequest_Device::lang() const {
  return *lang_;
}
inline void VastRequest_Device::set_lang(const ::std::string& value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
}
inline void VastRequest_Device::set_lang(const char* value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
}
inline void VastRequest_Device::set_lang(const char* value, size_t size) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    lang_ = new ::std::string;
  }
  lang_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Device::mutable_lang() {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    lang_ = new ::std::string;
  }
  return lang_;
}
inline ::std::string* VastRequest_Device::release_lang() {
  clear_has_lang();
  if (lang_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lang_;
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Device::set_allocated_lang(::std::string* lang) {
  if (lang_ != &::google::protobuf::internal::kEmptyString) {
    delete lang_;
  }
  if (lang) {
    set_has_lang();
    lang_ = lang;
  } else {
    clear_has_lang();
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string os = 5;
inline bool VastRequest_Device::has_os() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VastRequest_Device::set_has_os() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VastRequest_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VastRequest_Device::clear_os() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& VastRequest_Device::os() const {
  return *os_;
}
inline void VastRequest_Device::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void VastRequest_Device::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void VastRequest_Device::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Device::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  return os_;
}
inline ::std::string* VastRequest_Device::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Device::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string browser = 6;
inline bool VastRequest_Device::has_browser() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VastRequest_Device::set_has_browser() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VastRequest_Device::clear_has_browser() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VastRequest_Device::clear_browser() {
  if (browser_ != &::google::protobuf::internal::kEmptyString) {
    browser_->clear();
  }
  clear_has_browser();
}
inline const ::std::string& VastRequest_Device::browser() const {
  return *browser_;
}
inline void VastRequest_Device::set_browser(const ::std::string& value) {
  set_has_browser();
  if (browser_ == &::google::protobuf::internal::kEmptyString) {
    browser_ = new ::std::string;
  }
  browser_->assign(value);
}
inline void VastRequest_Device::set_browser(const char* value) {
  set_has_browser();
  if (browser_ == &::google::protobuf::internal::kEmptyString) {
    browser_ = new ::std::string;
  }
  browser_->assign(value);
}
inline void VastRequest_Device::set_browser(const char* value, size_t size) {
  set_has_browser();
  if (browser_ == &::google::protobuf::internal::kEmptyString) {
    browser_ = new ::std::string;
  }
  browser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_Device::mutable_browser() {
  set_has_browser();
  if (browser_ == &::google::protobuf::internal::kEmptyString) {
    browser_ = new ::std::string;
  }
  return browser_;
}
inline ::std::string* VastRequest_Device::release_browser() {
  clear_has_browser();
  if (browser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = browser_;
    browser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_Device::set_allocated_browser(::std::string* browser) {
  if (browser_ != &::google::protobuf::internal::kEmptyString) {
    delete browser_;
  }
  if (browser) {
    set_has_browser();
    browser_ = browser;
  } else {
    clear_has_browser();
    browser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// VastRequest_User

// optional string uid = 1;
inline bool VastRequest_User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VastRequest_User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VastRequest_User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VastRequest_User::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& VastRequest_User::uid() const {
  return *uid_;
}
inline void VastRequest_User::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void VastRequest_User::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void VastRequest_User::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* VastRequest_User::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string countryCode = 2;
inline bool VastRequest_User::has_countrycode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VastRequest_User::set_has_countrycode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VastRequest_User::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VastRequest_User::clear_countrycode() {
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    countrycode_->clear();
  }
  clear_has_countrycode();
}
inline const ::std::string& VastRequest_User::countrycode() const {
  return *countrycode_;
}
inline void VastRequest_User::set_countrycode(const ::std::string& value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void VastRequest_User::set_countrycode(const char* value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void VastRequest_User::set_countrycode(const char* value, size_t size) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_countrycode() {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  return countrycode_;
}
inline ::std::string* VastRequest_User::release_countrycode() {
  clear_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = countrycode_;
    countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete countrycode_;
  }
  if (countrycode) {
    set_has_countrycode();
    countrycode_ = countrycode;
  } else {
    clear_has_countrycode();
    countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string regionName = 3;
inline bool VastRequest_User::has_regionname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VastRequest_User::set_has_regionname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VastRequest_User::clear_has_regionname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VastRequest_User::clear_regionname() {
  if (regionname_ != &::google::protobuf::internal::kEmptyString) {
    regionname_->clear();
  }
  clear_has_regionname();
}
inline const ::std::string& VastRequest_User::regionname() const {
  return *regionname_;
}
inline void VastRequest_User::set_regionname(const ::std::string& value) {
  set_has_regionname();
  if (regionname_ == &::google::protobuf::internal::kEmptyString) {
    regionname_ = new ::std::string;
  }
  regionname_->assign(value);
}
inline void VastRequest_User::set_regionname(const char* value) {
  set_has_regionname();
  if (regionname_ == &::google::protobuf::internal::kEmptyString) {
    regionname_ = new ::std::string;
  }
  regionname_->assign(value);
}
inline void VastRequest_User::set_regionname(const char* value, size_t size) {
  set_has_regionname();
  if (regionname_ == &::google::protobuf::internal::kEmptyString) {
    regionname_ = new ::std::string;
  }
  regionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_regionname() {
  set_has_regionname();
  if (regionname_ == &::google::protobuf::internal::kEmptyString) {
    regionname_ = new ::std::string;
  }
  return regionname_;
}
inline ::std::string* VastRequest_User::release_regionname() {
  clear_has_regionname();
  if (regionname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = regionname_;
    regionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_regionname(::std::string* regionname) {
  if (regionname_ != &::google::protobuf::internal::kEmptyString) {
    delete regionname_;
  }
  if (regionname) {
    set_has_regionname();
    regionname_ = regionname;
  } else {
    clear_has_regionname();
    regionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cityName = 4;
inline bool VastRequest_User::has_cityname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VastRequest_User::set_has_cityname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VastRequest_User::clear_has_cityname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VastRequest_User::clear_cityname() {
  if (cityname_ != &::google::protobuf::internal::kEmptyString) {
    cityname_->clear();
  }
  clear_has_cityname();
}
inline const ::std::string& VastRequest_User::cityname() const {
  return *cityname_;
}
inline void VastRequest_User::set_cityname(const ::std::string& value) {
  set_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    cityname_ = new ::std::string;
  }
  cityname_->assign(value);
}
inline void VastRequest_User::set_cityname(const char* value) {
  set_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    cityname_ = new ::std::string;
  }
  cityname_->assign(value);
}
inline void VastRequest_User::set_cityname(const char* value, size_t size) {
  set_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    cityname_ = new ::std::string;
  }
  cityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_cityname() {
  set_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    cityname_ = new ::std::string;
  }
  return cityname_;
}
inline ::std::string* VastRequest_User::release_cityname() {
  clear_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cityname_;
    cityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_cityname(::std::string* cityname) {
  if (cityname_ != &::google::protobuf::internal::kEmptyString) {
    delete cityname_;
  }
  if (cityname) {
    set_has_cityname();
    cityname_ = cityname;
  } else {
    clear_has_cityname();
    cityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string latitude = 5;
inline bool VastRequest_User::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VastRequest_User::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VastRequest_User::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VastRequest_User::clear_latitude() {
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    latitude_->clear();
  }
  clear_has_latitude();
}
inline const ::std::string& VastRequest_User::latitude() const {
  return *latitude_;
}
inline void VastRequest_User::set_latitude(const ::std::string& value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
}
inline void VastRequest_User::set_latitude(const char* value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
}
inline void VastRequest_User::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_latitude() {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  return latitude_;
}
inline ::std::string* VastRequest_User::release_latitude() {
  clear_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latitude_;
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_latitude(::std::string* latitude) {
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    delete latitude_;
  }
  if (latitude) {
    set_has_latitude();
    latitude_ = latitude;
  } else {
    clear_has_latitude();
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string longitude = 6;
inline bool VastRequest_User::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VastRequest_User::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VastRequest_User::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VastRequest_User::clear_longitude() {
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    longitude_->clear();
  }
  clear_has_longitude();
}
inline const ::std::string& VastRequest_User::longitude() const {
  return *longitude_;
}
inline void VastRequest_User::set_longitude(const ::std::string& value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
}
inline void VastRequest_User::set_longitude(const char* value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
}
inline void VastRequest_User::set_longitude(const char* value, size_t size) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_longitude() {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  return longitude_;
}
inline ::std::string* VastRequest_User::release_longitude() {
  clear_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = longitude_;
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_longitude(::std::string* longitude) {
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    delete longitude_;
  }
  if (longitude) {
    set_has_longitude();
    longitude_ = longitude;
  } else {
    clear_has_longitude();
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string isp = 7;
inline bool VastRequest_User::has_isp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VastRequest_User::set_has_isp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VastRequest_User::clear_has_isp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VastRequest_User::clear_isp() {
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    isp_->clear();
  }
  clear_has_isp();
}
inline const ::std::string& VastRequest_User::isp() const {
  return *isp_;
}
inline void VastRequest_User::set_isp(const ::std::string& value) {
  set_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    isp_ = new ::std::string;
  }
  isp_->assign(value);
}
inline void VastRequest_User::set_isp(const char* value) {
  set_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    isp_ = new ::std::string;
  }
  isp_->assign(value);
}
inline void VastRequest_User::set_isp(const char* value, size_t size) {
  set_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    isp_ = new ::std::string;
  }
  isp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_isp() {
  set_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    isp_ = new ::std::string;
  }
  return isp_;
}
inline ::std::string* VastRequest_User::release_isp() {
  clear_has_isp();
  if (isp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isp_;
    isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_isp(::std::string* isp) {
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (isp) {
    set_has_isp();
    isp_ = isp;
  } else {
    clear_has_isp();
    isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string domain = 8;
inline bool VastRequest_User::has_domain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VastRequest_User::set_has_domain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VastRequest_User::clear_has_domain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VastRequest_User::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& VastRequest_User::domain() const {
  return *domain_;
}
inline void VastRequest_User::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void VastRequest_User::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void VastRequest_User::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* VastRequest_User::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mcc = 9;
inline bool VastRequest_User::has_mcc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VastRequest_User::set_has_mcc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VastRequest_User::clear_has_mcc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VastRequest_User::clear_mcc() {
  if (mcc_ != &::google::protobuf::internal::kEmptyString) {
    mcc_->clear();
  }
  clear_has_mcc();
}
inline const ::std::string& VastRequest_User::mcc() const {
  return *mcc_;
}
inline void VastRequest_User::set_mcc(const ::std::string& value) {
  set_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(value);
}
inline void VastRequest_User::set_mcc(const char* value) {
  set_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(value);
}
inline void VastRequest_User::set_mcc(const char* value, size_t size) {
  set_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_mcc() {
  set_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    mcc_ = new ::std::string;
  }
  return mcc_;
}
inline ::std::string* VastRequest_User::release_mcc() {
  clear_has_mcc();
  if (mcc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mcc_;
    mcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_mcc(::std::string* mcc) {
  if (mcc_ != &::google::protobuf::internal::kEmptyString) {
    delete mcc_;
  }
  if (mcc) {
    set_has_mcc();
    mcc_ = mcc;
  } else {
    clear_has_mcc();
    mcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mnc = 10;
inline bool VastRequest_User::has_mnc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VastRequest_User::set_has_mnc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VastRequest_User::clear_has_mnc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VastRequest_User::clear_mnc() {
  if (mnc_ != &::google::protobuf::internal::kEmptyString) {
    mnc_->clear();
  }
  clear_has_mnc();
}
inline const ::std::string& VastRequest_User::mnc() const {
  return *mnc_;
}
inline void VastRequest_User::set_mnc(const ::std::string& value) {
  set_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(value);
}
inline void VastRequest_User::set_mnc(const char* value) {
  set_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(value);
}
inline void VastRequest_User::set_mnc(const char* value, size_t size) {
  set_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_mnc() {
  set_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    mnc_ = new ::std::string;
  }
  return mnc_;
}
inline ::std::string* VastRequest_User::release_mnc() {
  clear_has_mnc();
  if (mnc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mnc_;
    mnc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_mnc(::std::string* mnc) {
  if (mnc_ != &::google::protobuf::internal::kEmptyString) {
    delete mnc_;
  }
  if (mnc) {
    set_has_mnc();
    mnc_ = mnc;
  } else {
    clear_has_mnc();
    mnc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mobile_brand = 11;
inline bool VastRequest_User::has_mobile_brand() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VastRequest_User::set_has_mobile_brand() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VastRequest_User::clear_has_mobile_brand() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VastRequest_User::clear_mobile_brand() {
  if (mobile_brand_ != &::google::protobuf::internal::kEmptyString) {
    mobile_brand_->clear();
  }
  clear_has_mobile_brand();
}
inline const ::std::string& VastRequest_User::mobile_brand() const {
  return *mobile_brand_;
}
inline void VastRequest_User::set_mobile_brand(const ::std::string& value) {
  set_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::kEmptyString) {
    mobile_brand_ = new ::std::string;
  }
  mobile_brand_->assign(value);
}
inline void VastRequest_User::set_mobile_brand(const char* value) {
  set_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::kEmptyString) {
    mobile_brand_ = new ::std::string;
  }
  mobile_brand_->assign(value);
}
inline void VastRequest_User::set_mobile_brand(const char* value, size_t size) {
  set_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::kEmptyString) {
    mobile_brand_ = new ::std::string;
  }
  mobile_brand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_mobile_brand() {
  set_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::kEmptyString) {
    mobile_brand_ = new ::std::string;
  }
  return mobile_brand_;
}
inline ::std::string* VastRequest_User::release_mobile_brand() {
  clear_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_brand_;
    mobile_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_mobile_brand(::std::string* mobile_brand) {
  if (mobile_brand_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_brand_;
  }
  if (mobile_brand) {
    set_has_mobile_brand();
    mobile_brand_ = mobile_brand;
  } else {
    clear_has_mobile_brand();
    mobile_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string usageType = 12;
inline bool VastRequest_User::has_usagetype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VastRequest_User::set_has_usagetype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VastRequest_User::clear_has_usagetype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VastRequest_User::clear_usagetype() {
  if (usagetype_ != &::google::protobuf::internal::kEmptyString) {
    usagetype_->clear();
  }
  clear_has_usagetype();
}
inline const ::std::string& VastRequest_User::usagetype() const {
  return *usagetype_;
}
inline void VastRequest_User::set_usagetype(const ::std::string& value) {
  set_has_usagetype();
  if (usagetype_ == &::google::protobuf::internal::kEmptyString) {
    usagetype_ = new ::std::string;
  }
  usagetype_->assign(value);
}
inline void VastRequest_User::set_usagetype(const char* value) {
  set_has_usagetype();
  if (usagetype_ == &::google::protobuf::internal::kEmptyString) {
    usagetype_ = new ::std::string;
  }
  usagetype_->assign(value);
}
inline void VastRequest_User::set_usagetype(const char* value, size_t size) {
  set_has_usagetype();
  if (usagetype_ == &::google::protobuf::internal::kEmptyString) {
    usagetype_ = new ::std::string;
  }
  usagetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest_User::mutable_usagetype() {
  set_has_usagetype();
  if (usagetype_ == &::google::protobuf::internal::kEmptyString) {
    usagetype_ = new ::std::string;
  }
  return usagetype_;
}
inline ::std::string* VastRequest_User::release_usagetype() {
  clear_has_usagetype();
  if (usagetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usagetype_;
    usagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest_User::set_allocated_usagetype(::std::string* usagetype) {
  if (usagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete usagetype_;
  }
  if (usagetype) {
    set_has_usagetype();
    usagetype_ = usagetype;
  } else {
    clear_has_usagetype();
    usagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// VastRequest

// optional string id = 1;
inline bool VastRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VastRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VastRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VastRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& VastRequest::id() const {
  return *id_;
}
inline void VastRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void VastRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void VastRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* VastRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string player = 2;
inline bool VastRequest::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VastRequest::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VastRequest::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VastRequest::clear_player() {
  if (player_ != &::google::protobuf::internal::kEmptyString) {
    player_->clear();
  }
  clear_has_player();
}
inline const ::std::string& VastRequest::player() const {
  return *player_;
}
inline void VastRequest::set_player(const ::std::string& value) {
  set_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    player_ = new ::std::string;
  }
  player_->assign(value);
}
inline void VastRequest::set_player(const char* value) {
  set_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    player_ = new ::std::string;
  }
  player_->assign(value);
}
inline void VastRequest::set_player(const char* value, size_t size) {
  set_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    player_ = new ::std::string;
  }
  player_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest::mutable_player() {
  set_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    player_ = new ::std::string;
  }
  return player_;
}
inline ::std::string* VastRequest::release_player() {
  clear_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_;
    player_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest::set_allocated_player(::std::string* player) {
  if (player_ != &::google::protobuf::internal::kEmptyString) {
    delete player_;
  }
  if (player) {
    set_has_player();
    player_ = player;
  } else {
    clear_has_player();
    player_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.rj.protos.msg.VastRequest.Video video = 3;
inline bool VastRequest::has_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VastRequest::set_has_video() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VastRequest::clear_has_video() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VastRequest::clear_video() {
  if (video_ != NULL) video_->::com::rj::protos::msg::VastRequest_Video::Clear();
  clear_has_video();
}
inline const ::com::rj::protos::msg::VastRequest_Video& VastRequest::video() const {
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::com::rj::protos::msg::VastRequest_Video* VastRequest::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::com::rj::protos::msg::VastRequest_Video;
  return video_;
}
inline ::com::rj::protos::msg::VastRequest_Video* VastRequest::release_video() {
  clear_has_video();
  ::com::rj::protos::msg::VastRequest_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void VastRequest::set_allocated_video(::com::rj::protos::msg::VastRequest_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
}

// optional .com.rj.protos.msg.VastRequest.Site site = 4;
inline bool VastRequest::has_site() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VastRequest::set_has_site() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VastRequest::clear_has_site() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VastRequest::clear_site() {
  if (site_ != NULL) site_->::com::rj::protos::msg::VastRequest_Site::Clear();
  clear_has_site();
}
inline const ::com::rj::protos::msg::VastRequest_Site& VastRequest::site() const {
  return site_ != NULL ? *site_ : *default_instance_->site_;
}
inline ::com::rj::protos::msg::VastRequest_Site* VastRequest::mutable_site() {
  set_has_site();
  if (site_ == NULL) site_ = new ::com::rj::protos::msg::VastRequest_Site;
  return site_;
}
inline ::com::rj::protos::msg::VastRequest_Site* VastRequest::release_site() {
  clear_has_site();
  ::com::rj::protos::msg::VastRequest_Site* temp = site_;
  site_ = NULL;
  return temp;
}
inline void VastRequest::set_allocated_site(::com::rj::protos::msg::VastRequest_Site* site) {
  delete site_;
  site_ = site;
  if (site) {
    set_has_site();
  } else {
    clear_has_site();
  }
}

// optional .com.rj.protos.msg.VastRequest.Device device = 5;
inline bool VastRequest::has_device() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VastRequest::set_has_device() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VastRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VastRequest::clear_device() {
  if (device_ != NULL) device_->::com::rj::protos::msg::VastRequest_Device::Clear();
  clear_has_device();
}
inline const ::com::rj::protos::msg::VastRequest_Device& VastRequest::device() const {
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::com::rj::protos::msg::VastRequest_Device* VastRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::com::rj::protos::msg::VastRequest_Device;
  return device_;
}
inline ::com::rj::protos::msg::VastRequest_Device* VastRequest::release_device() {
  clear_has_device();
  ::com::rj::protos::msg::VastRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void VastRequest::set_allocated_device(::com::rj::protos::msg::VastRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
}

// optional .com.rj.protos.msg.VastRequest.User user = 6;
inline bool VastRequest::has_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VastRequest::set_has_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VastRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VastRequest::clear_user() {
  if (user_ != NULL) user_->::com::rj::protos::msg::VastRequest_User::Clear();
  clear_has_user();
}
inline const ::com::rj::protos::msg::VastRequest_User& VastRequest::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::com::rj::protos::msg::VastRequest_User* VastRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::com::rj::protos::msg::VastRequest_User;
  return user_;
}
inline ::com::rj::protos::msg::VastRequest_User* VastRequest::release_user() {
  clear_has_user();
  ::com::rj::protos::msg::VastRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void VastRequest::set_allocated_user(::com::rj::protos::msg::VastRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional string ssl = 7;
inline bool VastRequest::has_ssl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VastRequest::set_has_ssl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VastRequest::clear_has_ssl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VastRequest::clear_ssl() {
  if (ssl_ != &::google::protobuf::internal::kEmptyString) {
    ssl_->clear();
  }
  clear_has_ssl();
}
inline const ::std::string& VastRequest::ssl() const {
  return *ssl_;
}
inline void VastRequest::set_ssl(const ::std::string& value) {
  set_has_ssl();
  if (ssl_ == &::google::protobuf::internal::kEmptyString) {
    ssl_ = new ::std::string;
  }
  ssl_->assign(value);
}
inline void VastRequest::set_ssl(const char* value) {
  set_has_ssl();
  if (ssl_ == &::google::protobuf::internal::kEmptyString) {
    ssl_ = new ::std::string;
  }
  ssl_->assign(value);
}
inline void VastRequest::set_ssl(const char* value, size_t size) {
  set_has_ssl();
  if (ssl_ == &::google::protobuf::internal::kEmptyString) {
    ssl_ = new ::std::string;
  }
  ssl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VastRequest::mutable_ssl() {
  set_has_ssl();
  if (ssl_ == &::google::protobuf::internal::kEmptyString) {
    ssl_ = new ::std::string;
  }
  return ssl_;
}
inline ::std::string* VastRequest::release_ssl() {
  clear_has_ssl();
  if (ssl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ssl_;
    ssl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VastRequest::set_allocated_ssl(::std::string* ssl) {
  if (ssl_ != &::google::protobuf::internal::kEmptyString) {
    delete ssl_;
  }
  if (ssl) {
    set_has_ssl();
    ssl_ = ssl;
  } else {
    clear_has_ssl();
    ssl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AdVastRequestTemplate_2eproto__INCLUDED
