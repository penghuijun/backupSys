// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MobileAdResponse_new.proto

#ifndef PROTOBUF_MobileAdResponse_5fnew_2eproto__INCLUDED
#define PROTOBUF_MobileAdResponse_5fnew_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace mobile {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MobileAdResponse_5fnew_2eproto();
void protobuf_AssignDesc_MobileAdResponse_5fnew_2eproto();
void protobuf_ShutdownFile_MobileAdResponse_5fnew_2eproto();

class MobileAdResponse;
class MobileAdResponse_TrackingEvents;

enum MobileAdResponse_Orientation {
  MobileAdResponse_Orientation_LANDSCAPE = 0,
  MobileAdResponse_Orientation_PORTRAIT = 1
};
bool MobileAdResponse_Orientation_IsValid(int value);
const MobileAdResponse_Orientation MobileAdResponse_Orientation_Orientation_MIN = MobileAdResponse_Orientation_LANDSCAPE;
const MobileAdResponse_Orientation MobileAdResponse_Orientation_Orientation_MAX = MobileAdResponse_Orientation_PORTRAIT;
const int MobileAdResponse_Orientation_Orientation_ARRAYSIZE = MobileAdResponse_Orientation_Orientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* MobileAdResponse_Orientation_descriptor();
inline const ::std::string& MobileAdResponse_Orientation_Name(MobileAdResponse_Orientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    MobileAdResponse_Orientation_descriptor(), value);
}
inline bool MobileAdResponse_Orientation_Parse(
    const ::std::string& name, MobileAdResponse_Orientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MobileAdResponse_Orientation>(
    MobileAdResponse_Orientation_descriptor(), name, value);
}
// ===================================================================

class MobileAdResponse_TrackingEvents : public ::google::protobuf::Message {
 public:
  MobileAdResponse_TrackingEvents();
  virtual ~MobileAdResponse_TrackingEvents();

  MobileAdResponse_TrackingEvents(const MobileAdResponse_TrackingEvents& from);

  inline MobileAdResponse_TrackingEvents& operator=(const MobileAdResponse_TrackingEvents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse_TrackingEvents& default_instance();

  void Swap(MobileAdResponse_TrackingEvents* other);

  // implements Message ----------------------------------------------

  MobileAdResponse_TrackingEvents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse_TrackingEvents& from);
  void MergeFrom(const MobileAdResponse_TrackingEvents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const char* value, size_t size);
  inline ::std::string* mutable_event();
  inline ::std::string* release_event();
  inline void set_allocated_event(::std::string* event);

  // optional string trackUrl = 2;
  inline bool has_trackurl() const;
  inline void clear_trackurl();
  static const int kTrackUrlFieldNumber = 2;
  inline const ::std::string& trackurl() const;
  inline void set_trackurl(const ::std::string& value);
  inline void set_trackurl(const char* value);
  inline void set_trackurl(const char* value, size_t size);
  inline ::std::string* mutable_trackurl();
  inline ::std::string* release_trackurl();
  inline void set_allocated_trackurl(::std::string* trackurl);

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse.TrackingEvents)
 private:
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_trackurl();
  inline void clear_has_trackurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* event_;
  ::std::string* trackurl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_5fnew_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_5fnew_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_5fnew_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse_TrackingEvents* default_instance_;
};
// -------------------------------------------------------------------

class MobileAdResponse : public ::google::protobuf::Message {
 public:
  MobileAdResponse();
  virtual ~MobileAdResponse();

  MobileAdResponse(const MobileAdResponse& from);

  inline MobileAdResponse& operator=(const MobileAdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileAdResponse& default_instance();

  void Swap(MobileAdResponse* other);

  // implements Message ----------------------------------------------

  MobileAdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileAdResponse& from);
  void MergeFrom(const MobileAdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MobileAdResponse_TrackingEvents TrackingEvents;

  typedef MobileAdResponse_Orientation Orientation;
  static const Orientation LANDSCAPE = MobileAdResponse_Orientation_LANDSCAPE;
  static const Orientation PORTRAIT = MobileAdResponse_Orientation_PORTRAIT;
  static inline bool Orientation_IsValid(int value) {
    return MobileAdResponse_Orientation_IsValid(value);
  }
  static const Orientation Orientation_MIN =
    MobileAdResponse_Orientation_Orientation_MIN;
  static const Orientation Orientation_MAX =
    MobileAdResponse_Orientation_Orientation_MAX;
  static const int Orientation_ARRAYSIZE =
    MobileAdResponse_Orientation_Orientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Orientation_descriptor() {
    return MobileAdResponse_Orientation_descriptor();
  }
  static inline const ::std::string& Orientation_Name(Orientation value) {
    return MobileAdResponse_Orientation_Name(value);
  }
  static inline bool Orientation_Parse(const ::std::string& name,
      Orientation* value) {
    return MobileAdResponse_Orientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string bidderId = 2;
  inline bool has_bidderid() const;
  inline void clear_bidderid();
  static const int kBidderIdFieldNumber = 2;
  inline const ::std::string& bidderid() const;
  inline void set_bidderid(const ::std::string& value);
  inline void set_bidderid(const char* value);
  inline void set_bidderid(const char* value, size_t size);
  inline ::std::string* mutable_bidderid();
  inline ::std::string* release_bidderid();
  inline void set_allocated_bidderid(::std::string* bidderid);

  // optional string adType = 3;
  inline bool has_adtype() const;
  inline void clear_adtype();
  static const int kAdTypeFieldNumber = 3;
  inline const ::std::string& adtype() const;
  inline void set_adtype(const ::std::string& value);
  inline void set_adtype(const char* value);
  inline void set_adtype(const char* value, size_t size);
  inline ::std::string* mutable_adtype();
  inline ::std::string* release_adtype();
  inline void set_allocated_adtype(::std::string* adtype);

  // optional string iconUrl = 4;
  inline bool has_iconurl() const;
  inline void clear_iconurl();
  static const int kIconUrlFieldNumber = 4;
  inline const ::std::string& iconurl() const;
  inline void set_iconurl(const ::std::string& value);
  inline void set_iconurl(const char* value);
  inline void set_iconurl(const char* value, size_t size);
  inline ::std::string* mutable_iconurl();
  inline ::std::string* release_iconurl();
  inline void set_allocated_iconurl(::std::string* iconurl);

  // optional string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string subTitle = 6;
  inline bool has_subtitle() const;
  inline void clear_subtitle();
  static const int kSubTitleFieldNumber = 6;
  inline const ::std::string& subtitle() const;
  inline void set_subtitle(const ::std::string& value);
  inline void set_subtitle(const char* value);
  inline void set_subtitle(const char* value, size_t size);
  inline ::std::string* mutable_subtitle();
  inline ::std::string* release_subtitle();
  inline void set_allocated_subtitle(::std::string* subtitle);

  // optional string relatedInfo = 7;
  inline bool has_relatedinfo() const;
  inline void clear_relatedinfo();
  static const int kRelatedInfoFieldNumber = 7;
  inline const ::std::string& relatedinfo() const;
  inline void set_relatedinfo(const ::std::string& value);
  inline void set_relatedinfo(const char* value);
  inline void set_relatedinfo(const char* value, size_t size);
  inline ::std::string* mutable_relatedinfo();
  inline ::std::string* release_relatedinfo();
  inline void set_allocated_relatedinfo(::std::string* relatedinfo);

  // optional string imageUrl = 8;
  inline bool has_imageurl() const;
  inline void clear_imageurl();
  static const int kImageUrlFieldNumber = 8;
  inline const ::std::string& imageurl() const;
  inline void set_imageurl(const ::std::string& value);
  inline void set_imageurl(const char* value);
  inline void set_imageurl(const char* value, size_t size);
  inline ::std::string* mutable_imageurl();
  inline ::std::string* release_imageurl();
  inline void set_allocated_imageurl(::std::string* imageurl);

  // optional string htmlMarkup = 9;
  inline bool has_htmlmarkup() const;
  inline void clear_htmlmarkup();
  static const int kHtmlMarkupFieldNumber = 9;
  inline const ::std::string& htmlmarkup() const;
  inline void set_htmlmarkup(const ::std::string& value);
  inline void set_htmlmarkup(const char* value);
  inline void set_htmlmarkup(const char* value, size_t size);
  inline ::std::string* mutable_htmlmarkup();
  inline ::std::string* release_htmlmarkup();
  inline void set_allocated_htmlmarkup(::std::string* htmlmarkup);

  // optional string adLink = 10;
  inline bool has_adlink() const;
  inline void clear_adlink();
  static const int kAdLinkFieldNumber = 10;
  inline const ::std::string& adlink() const;
  inline void set_adlink(const ::std::string& value);
  inline void set_adlink(const char* value);
  inline void set_adlink(const char* value, size_t size);
  inline ::std::string* mutable_adlink();
  inline ::std::string* release_adlink();
  inline void set_allocated_adlink(::std::string* adlink);

  // optional string videoUrl = 11;
  inline bool has_videourl() const;
  inline void clear_videourl();
  static const int kVideoUrlFieldNumber = 11;
  inline const ::std::string& videourl() const;
  inline void set_videourl(const ::std::string& value);
  inline void set_videourl(const char* value);
  inline void set_videourl(const char* value, size_t size);
  inline ::std::string* mutable_videourl();
  inline ::std::string* release_videourl();
  inline void set_allocated_videourl(::std::string* videourl);

  // optional string youtubeUrl = 12;
  inline bool has_youtubeurl() const;
  inline void clear_youtubeurl();
  static const int kYoutubeUrlFieldNumber = 12;
  inline const ::std::string& youtubeurl() const;
  inline void set_youtubeurl(const ::std::string& value);
  inline void set_youtubeurl(const char* value);
  inline void set_youtubeurl(const char* value, size_t size);
  inline ::std::string* mutable_youtubeurl();
  inline ::std::string* release_youtubeurl();
  inline void set_allocated_youtubeurl(::std::string* youtubeurl);

  // optional string telNum = 13;
  inline bool has_telnum() const;
  inline void clear_telnum();
  static const int kTelNumFieldNumber = 13;
  inline const ::std::string& telnum() const;
  inline void set_telnum(const ::std::string& value);
  inline void set_telnum(const char* value);
  inline void set_telnum(const char* value, size_t size);
  inline ::std::string* mutable_telnum();
  inline ::std::string* release_telnum();
  inline void set_allocated_telnum(::std::string* telnum);

  // optional string shareUrl = 14;
  inline bool has_shareurl() const;
  inline void clear_shareurl();
  static const int kShareUrlFieldNumber = 14;
  inline const ::std::string& shareurl() const;
  inline void set_shareurl(const ::std::string& value);
  inline void set_shareurl(const char* value);
  inline void set_shareurl(const char* value, size_t size);
  inline ::std::string* mutable_shareurl();
  inline ::std::string* release_shareurl();
  inline void set_allocated_shareurl(::std::string* shareurl);

  // optional string packageName = 15;
  inline bool has_packagename() const;
  inline void clear_packagename();
  static const int kPackageNameFieldNumber = 15;
  inline const ::std::string& packagename() const;
  inline void set_packagename(const ::std::string& value);
  inline void set_packagename(const char* value);
  inline void set_packagename(const char* value, size_t size);
  inline ::std::string* mutable_packagename();
  inline ::std::string* release_packagename();
  inline void set_allocated_packagename(::std::string* packagename);

  // optional string schemeUrl = 16;
  inline bool has_schemeurl() const;
  inline void clear_schemeurl();
  static const int kSchemeUrlFieldNumber = 16;
  inline const ::std::string& schemeurl() const;
  inline void set_schemeurl(const ::std::string& value);
  inline void set_schemeurl(const char* value);
  inline void set_schemeurl(const char* value, size_t size);
  inline ::std::string* mutable_schemeurl();
  inline ::std::string* release_schemeurl();
  inline void set_allocated_schemeurl(::std::string* schemeurl);

  // optional string webUrl = 17;
  inline bool has_weburl() const;
  inline void clear_weburl();
  static const int kWebUrlFieldNumber = 17;
  inline const ::std::string& weburl() const;
  inline void set_weburl(const ::std::string& value);
  inline void set_weburl(const char* value);
  inline void set_weburl(const char* value, size_t size);
  inline ::std::string* mutable_weburl();
  inline ::std::string* release_weburl();
  inline void set_allocated_weburl(::std::string* weburl);

  // optional string fallbackUrl = 18;
  inline bool has_fallbackurl() const;
  inline void clear_fallbackurl();
  static const int kFallbackUrlFieldNumber = 18;
  inline const ::std::string& fallbackurl() const;
  inline void set_fallbackurl(const ::std::string& value);
  inline void set_fallbackurl(const char* value);
  inline void set_fallbackurl(const char* value, size_t size);
  inline ::std::string* mutable_fallbackurl();
  inline ::std::string* release_fallbackurl();
  inline void set_allocated_fallbackurl(::std::string* fallbackurl);

  // optional string clickOpenType = 19;
  inline bool has_clickopentype() const;
  inline void clear_clickopentype();
  static const int kClickOpenTypeFieldNumber = 19;
  inline const ::std::string& clickopentype() const;
  inline void set_clickopentype(const ::std::string& value);
  inline void set_clickopentype(const char* value);
  inline void set_clickopentype(const char* value, size_t size);
  inline ::std::string* mutable_clickopentype();
  inline ::std::string* release_clickopentype();
  inline void set_allocated_clickopentype(::std::string* clickopentype);

  // optional string clickUrl = 20;
  inline bool has_clickurl() const;
  inline void clear_clickurl();
  static const int kClickUrlFieldNumber = 20;
  inline const ::std::string& clickurl() const;
  inline void set_clickurl(const ::std::string& value);
  inline void set_clickurl(const char* value);
  inline void set_clickurl(const char* value, size_t size);
  inline ::std::string* mutable_clickurl();
  inline ::std::string* release_clickurl();
  inline void set_allocated_clickurl(::std::string* clickurl);

  // optional string animation = 21;
  inline bool has_animation() const;
  inline void clear_animation();
  static const int kAnimationFieldNumber = 21;
  inline const ::std::string& animation() const;
  inline void set_animation(const ::std::string& value);
  inline void set_animation(const char* value);
  inline void set_animation(const char* value, size_t size);
  inline ::std::string* mutable_animation();
  inline ::std::string* release_animation();
  inline void set_allocated_animation(::std::string* animation);

  // optional string refresh = 22;
  inline bool has_refresh() const;
  inline void clear_refresh();
  static const int kRefreshFieldNumber = 22;
  inline const ::std::string& refresh() const;
  inline void set_refresh(const ::std::string& value);
  inline void set_refresh(const char* value);
  inline void set_refresh(const char* value, size_t size);
  inline ::std::string* mutable_refresh();
  inline ::std::string* release_refresh();
  inline void set_allocated_refresh(::std::string* refresh);

  // optional string width = 23;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 23;
  inline const ::std::string& width() const;
  inline void set_width(const ::std::string& value);
  inline void set_width(const char* value);
  inline void set_width(const char* value, size_t size);
  inline ::std::string* mutable_width();
  inline ::std::string* release_width();
  inline void set_allocated_width(::std::string* width);

  // optional string height = 24;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 24;
  inline const ::std::string& height() const;
  inline void set_height(const ::std::string& value);
  inline void set_height(const char* value);
  inline void set_height(const char* value, size_t size);
  inline ::std::string* mutable_height();
  inline ::std::string* release_height();
  inline void set_allocated_height(::std::string* height);

  // optional string autoClose = 25;
  inline bool has_autoclose() const;
  inline void clear_autoclose();
  static const int kAutoCloseFieldNumber = 25;
  inline const ::std::string& autoclose() const;
  inline void set_autoclose(const ::std::string& value);
  inline void set_autoclose(const char* value);
  inline void set_autoclose(const char* value, size_t size);
  inline ::std::string* mutable_autoclose();
  inline ::std::string* release_autoclose();
  inline void set_allocated_autoclose(::std::string* autoclose);

  // repeated string impressionUrl = 26;
  inline int impressionurl_size() const;
  inline void clear_impressionurl();
  static const int kImpressionUrlFieldNumber = 26;
  inline const ::std::string& impressionurl(int index) const;
  inline ::std::string* mutable_impressionurl(int index);
  inline void set_impressionurl(int index, const ::std::string& value);
  inline void set_impressionurl(int index, const char* value);
  inline void set_impressionurl(int index, const char* value, size_t size);
  inline ::std::string* add_impressionurl();
  inline void add_impressionurl(const ::std::string& value);
  inline void add_impressionurl(const char* value);
  inline void add_impressionurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& impressionurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impressionurl();

  // optional .com.rj.protos.mobile.MobileAdResponse.Orientation orientation = 27;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 27;
  inline ::com::rj::protos::mobile::MobileAdResponse_Orientation orientation() const;
  inline void set_orientation(::com::rj::protos::mobile::MobileAdResponse_Orientation value);

  // repeated .com.rj.protos.mobile.MobileAdResponse.TrackingEvents trackingEvents = 28;
  inline int trackingevents_size() const;
  inline void clear_trackingevents();
  static const int kTrackingEventsFieldNumber = 28;
  inline const ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents& trackingevents(int index) const;
  inline ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents* mutable_trackingevents(int index);
  inline ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents* add_trackingevents();
  inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents >&
      trackingevents() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents >*
      mutable_trackingevents();

  // @@protoc_insertion_point(class_scope:com.rj.protos.mobile.MobileAdResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bidderid();
  inline void clear_has_bidderid();
  inline void set_has_adtype();
  inline void clear_has_adtype();
  inline void set_has_iconurl();
  inline void clear_has_iconurl();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_subtitle();
  inline void clear_has_subtitle();
  inline void set_has_relatedinfo();
  inline void clear_has_relatedinfo();
  inline void set_has_imageurl();
  inline void clear_has_imageurl();
  inline void set_has_htmlmarkup();
  inline void clear_has_htmlmarkup();
  inline void set_has_adlink();
  inline void clear_has_adlink();
  inline void set_has_videourl();
  inline void clear_has_videourl();
  inline void set_has_youtubeurl();
  inline void clear_has_youtubeurl();
  inline void set_has_telnum();
  inline void clear_has_telnum();
  inline void set_has_shareurl();
  inline void clear_has_shareurl();
  inline void set_has_packagename();
  inline void clear_has_packagename();
  inline void set_has_schemeurl();
  inline void clear_has_schemeurl();
  inline void set_has_weburl();
  inline void clear_has_weburl();
  inline void set_has_fallbackurl();
  inline void clear_has_fallbackurl();
  inline void set_has_clickopentype();
  inline void clear_has_clickopentype();
  inline void set_has_clickurl();
  inline void clear_has_clickurl();
  inline void set_has_animation();
  inline void clear_has_animation();
  inline void set_has_refresh();
  inline void clear_has_refresh();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_autoclose();
  inline void clear_has_autoclose();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* bidderid_;
  ::std::string* adtype_;
  ::std::string* iconurl_;
  ::std::string* title_;
  ::std::string* subtitle_;
  ::std::string* relatedinfo_;
  ::std::string* imageurl_;
  ::std::string* htmlmarkup_;
  ::std::string* adlink_;
  ::std::string* videourl_;
  ::std::string* youtubeurl_;
  ::std::string* telnum_;
  ::std::string* shareurl_;
  ::std::string* packagename_;
  ::std::string* schemeurl_;
  ::std::string* weburl_;
  ::std::string* fallbackurl_;
  ::std::string* clickopentype_;
  ::std::string* clickurl_;
  ::std::string* animation_;
  ::std::string* refresh_;
  ::std::string* width_;
  ::std::string* height_;
  ::std::string* autoclose_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impressionurl_;
  ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents > trackingevents_;
  int orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  friend void  protobuf_AddDesc_MobileAdResponse_5fnew_2eproto();
  friend void protobuf_AssignDesc_MobileAdResponse_5fnew_2eproto();
  friend void protobuf_ShutdownFile_MobileAdResponse_5fnew_2eproto();

  void InitAsDefaultInstance();
  static MobileAdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MobileAdResponse_TrackingEvents

// optional string event = 1;
inline bool MobileAdResponse_TrackingEvents::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse_TrackingEvents::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse_TrackingEvents::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse_TrackingEvents::clear_event() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    event_->clear();
  }
  clear_has_event();
}
inline const ::std::string& MobileAdResponse_TrackingEvents::event() const {
  return *event_;
}
inline void MobileAdResponse_TrackingEvents::set_event(const ::std::string& value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void MobileAdResponse_TrackingEvents::set_event(const char* value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void MobileAdResponse_TrackingEvents::set_event(const char* value, size_t size) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_TrackingEvents::mutable_event() {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  return event_;
}
inline ::std::string* MobileAdResponse_TrackingEvents::release_event() {
  clear_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_;
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_TrackingEvents::set_allocated_event(::std::string* event) {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (event) {
    set_has_event();
    event_ = event;
  } else {
    clear_has_event();
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string trackUrl = 2;
inline bool MobileAdResponse_TrackingEvents::has_trackurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse_TrackingEvents::set_has_trackurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse_TrackingEvents::clear_has_trackurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse_TrackingEvents::clear_trackurl() {
  if (trackurl_ != &::google::protobuf::internal::kEmptyString) {
    trackurl_->clear();
  }
  clear_has_trackurl();
}
inline const ::std::string& MobileAdResponse_TrackingEvents::trackurl() const {
  return *trackurl_;
}
inline void MobileAdResponse_TrackingEvents::set_trackurl(const ::std::string& value) {
  set_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    trackurl_ = new ::std::string;
  }
  trackurl_->assign(value);
}
inline void MobileAdResponse_TrackingEvents::set_trackurl(const char* value) {
  set_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    trackurl_ = new ::std::string;
  }
  trackurl_->assign(value);
}
inline void MobileAdResponse_TrackingEvents::set_trackurl(const char* value, size_t size) {
  set_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    trackurl_ = new ::std::string;
  }
  trackurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse_TrackingEvents::mutable_trackurl() {
  set_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    trackurl_ = new ::std::string;
  }
  return trackurl_;
}
inline ::std::string* MobileAdResponse_TrackingEvents::release_trackurl() {
  clear_has_trackurl();
  if (trackurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackurl_;
    trackurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse_TrackingEvents::set_allocated_trackurl(::std::string* trackurl) {
  if (trackurl_ != &::google::protobuf::internal::kEmptyString) {
    delete trackurl_;
  }
  if (trackurl) {
    set_has_trackurl();
    trackurl_ = trackurl;
  } else {
    clear_has_trackurl();
    trackurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MobileAdResponse

// required string id = 1;
inline bool MobileAdResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileAdResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileAdResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileAdResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MobileAdResponse::id() const {
  return *id_;
}
inline void MobileAdResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MobileAdResponse::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MobileAdResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bidderId = 2;
inline bool MobileAdResponse::has_bidderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileAdResponse::set_has_bidderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileAdResponse::clear_has_bidderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileAdResponse::clear_bidderid() {
  if (bidderid_ != &::google::protobuf::internal::kEmptyString) {
    bidderid_->clear();
  }
  clear_has_bidderid();
}
inline const ::std::string& MobileAdResponse::bidderid() const {
  return *bidderid_;
}
inline void MobileAdResponse::set_bidderid(const ::std::string& value) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(value);
}
inline void MobileAdResponse::set_bidderid(const char* value) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(value);
}
inline void MobileAdResponse::set_bidderid(const char* value, size_t size) {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  bidderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_bidderid() {
  set_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    bidderid_ = new ::std::string;
  }
  return bidderid_;
}
inline ::std::string* MobileAdResponse::release_bidderid() {
  clear_has_bidderid();
  if (bidderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bidderid_;
    bidderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_bidderid(::std::string* bidderid) {
  if (bidderid_ != &::google::protobuf::internal::kEmptyString) {
    delete bidderid_;
  }
  if (bidderid) {
    set_has_bidderid();
    bidderid_ = bidderid;
  } else {
    clear_has_bidderid();
    bidderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adType = 3;
inline bool MobileAdResponse::has_adtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileAdResponse::set_has_adtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileAdResponse::clear_has_adtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileAdResponse::clear_adtype() {
  if (adtype_ != &::google::protobuf::internal::kEmptyString) {
    adtype_->clear();
  }
  clear_has_adtype();
}
inline const ::std::string& MobileAdResponse::adtype() const {
  return *adtype_;
}
inline void MobileAdResponse::set_adtype(const ::std::string& value) {
  set_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    adtype_ = new ::std::string;
  }
  adtype_->assign(value);
}
inline void MobileAdResponse::set_adtype(const char* value) {
  set_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    adtype_ = new ::std::string;
  }
  adtype_->assign(value);
}
inline void MobileAdResponse::set_adtype(const char* value, size_t size) {
  set_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    adtype_ = new ::std::string;
  }
  adtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_adtype() {
  set_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    adtype_ = new ::std::string;
  }
  return adtype_;
}
inline ::std::string* MobileAdResponse::release_adtype() {
  clear_has_adtype();
  if (adtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adtype_;
    adtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_adtype(::std::string* adtype) {
  if (adtype_ != &::google::protobuf::internal::kEmptyString) {
    delete adtype_;
  }
  if (adtype) {
    set_has_adtype();
    adtype_ = adtype;
  } else {
    clear_has_adtype();
    adtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string iconUrl = 4;
inline bool MobileAdResponse::has_iconurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileAdResponse::set_has_iconurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileAdResponse::clear_has_iconurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileAdResponse::clear_iconurl() {
  if (iconurl_ != &::google::protobuf::internal::kEmptyString) {
    iconurl_->clear();
  }
  clear_has_iconurl();
}
inline const ::std::string& MobileAdResponse::iconurl() const {
  return *iconurl_;
}
inline void MobileAdResponse::set_iconurl(const ::std::string& value) {
  set_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    iconurl_ = new ::std::string;
  }
  iconurl_->assign(value);
}
inline void MobileAdResponse::set_iconurl(const char* value) {
  set_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    iconurl_ = new ::std::string;
  }
  iconurl_->assign(value);
}
inline void MobileAdResponse::set_iconurl(const char* value, size_t size) {
  set_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    iconurl_ = new ::std::string;
  }
  iconurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_iconurl() {
  set_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    iconurl_ = new ::std::string;
  }
  return iconurl_;
}
inline ::std::string* MobileAdResponse::release_iconurl() {
  clear_has_iconurl();
  if (iconurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iconurl_;
    iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl_ != &::google::protobuf::internal::kEmptyString) {
    delete iconurl_;
  }
  if (iconurl) {
    set_has_iconurl();
    iconurl_ = iconurl;
  } else {
    clear_has_iconurl();
    iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 5;
inline bool MobileAdResponse::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileAdResponse::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileAdResponse::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileAdResponse::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MobileAdResponse::title() const {
  return *title_;
}
inline void MobileAdResponse::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MobileAdResponse::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MobileAdResponse::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* MobileAdResponse::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string subTitle = 6;
inline bool MobileAdResponse::has_subtitle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileAdResponse::set_has_subtitle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileAdResponse::clear_has_subtitle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileAdResponse::clear_subtitle() {
  if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
    subtitle_->clear();
  }
  clear_has_subtitle();
}
inline const ::std::string& MobileAdResponse::subtitle() const {
  return *subtitle_;
}
inline void MobileAdResponse::set_subtitle(const ::std::string& value) {
  set_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    subtitle_ = new ::std::string;
  }
  subtitle_->assign(value);
}
inline void MobileAdResponse::set_subtitle(const char* value) {
  set_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    subtitle_ = new ::std::string;
  }
  subtitle_->assign(value);
}
inline void MobileAdResponse::set_subtitle(const char* value, size_t size) {
  set_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    subtitle_ = new ::std::string;
  }
  subtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_subtitle() {
  set_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    subtitle_ = new ::std::string;
  }
  return subtitle_;
}
inline ::std::string* MobileAdResponse::release_subtitle() {
  clear_has_subtitle();
  if (subtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subtitle_;
    subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete subtitle_;
  }
  if (subtitle) {
    set_has_subtitle();
    subtitle_ = subtitle;
  } else {
    clear_has_subtitle();
    subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string relatedInfo = 7;
inline bool MobileAdResponse::has_relatedinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileAdResponse::set_has_relatedinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileAdResponse::clear_has_relatedinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileAdResponse::clear_relatedinfo() {
  if (relatedinfo_ != &::google::protobuf::internal::kEmptyString) {
    relatedinfo_->clear();
  }
  clear_has_relatedinfo();
}
inline const ::std::string& MobileAdResponse::relatedinfo() const {
  return *relatedinfo_;
}
inline void MobileAdResponse::set_relatedinfo(const ::std::string& value) {
  set_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    relatedinfo_ = new ::std::string;
  }
  relatedinfo_->assign(value);
}
inline void MobileAdResponse::set_relatedinfo(const char* value) {
  set_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    relatedinfo_ = new ::std::string;
  }
  relatedinfo_->assign(value);
}
inline void MobileAdResponse::set_relatedinfo(const char* value, size_t size) {
  set_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    relatedinfo_ = new ::std::string;
  }
  relatedinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_relatedinfo() {
  set_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    relatedinfo_ = new ::std::string;
  }
  return relatedinfo_;
}
inline ::std::string* MobileAdResponse::release_relatedinfo() {
  clear_has_relatedinfo();
  if (relatedinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relatedinfo_;
    relatedinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_relatedinfo(::std::string* relatedinfo) {
  if (relatedinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete relatedinfo_;
  }
  if (relatedinfo) {
    set_has_relatedinfo();
    relatedinfo_ = relatedinfo;
  } else {
    clear_has_relatedinfo();
    relatedinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imageUrl = 8;
inline bool MobileAdResponse::has_imageurl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileAdResponse::set_has_imageurl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileAdResponse::clear_has_imageurl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileAdResponse::clear_imageurl() {
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    imageurl_->clear();
  }
  clear_has_imageurl();
}
inline const ::std::string& MobileAdResponse::imageurl() const {
  return *imageurl_;
}
inline void MobileAdResponse::set_imageurl(const ::std::string& value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
}
inline void MobileAdResponse::set_imageurl(const char* value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
}
inline void MobileAdResponse::set_imageurl(const char* value, size_t size) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_imageurl() {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    imageurl_ = new ::std::string;
  }
  return imageurl_;
}
inline ::std::string* MobileAdResponse::release_imageurl() {
  clear_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageurl_;
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_imageurl(::std::string* imageurl) {
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imageurl_;
  }
  if (imageurl) {
    set_has_imageurl();
    imageurl_ = imageurl;
  } else {
    clear_has_imageurl();
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string htmlMarkup = 9;
inline bool MobileAdResponse::has_htmlmarkup() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileAdResponse::set_has_htmlmarkup() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileAdResponse::clear_has_htmlmarkup() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileAdResponse::clear_htmlmarkup() {
  if (htmlmarkup_ != &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_->clear();
  }
  clear_has_htmlmarkup();
}
inline const ::std::string& MobileAdResponse::htmlmarkup() const {
  return *htmlmarkup_;
}
inline void MobileAdResponse::set_htmlmarkup(const ::std::string& value) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(value);
}
inline void MobileAdResponse::set_htmlmarkup(const char* value) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(value);
}
inline void MobileAdResponse::set_htmlmarkup(const char* value, size_t size) {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  htmlmarkup_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_htmlmarkup() {
  set_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    htmlmarkup_ = new ::std::string;
  }
  return htmlmarkup_;
}
inline ::std::string* MobileAdResponse::release_htmlmarkup() {
  clear_has_htmlmarkup();
  if (htmlmarkup_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = htmlmarkup_;
    htmlmarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_htmlmarkup(::std::string* htmlmarkup) {
  if (htmlmarkup_ != &::google::protobuf::internal::kEmptyString) {
    delete htmlmarkup_;
  }
  if (htmlmarkup) {
    set_has_htmlmarkup();
    htmlmarkup_ = htmlmarkup;
  } else {
    clear_has_htmlmarkup();
    htmlmarkup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adLink = 10;
inline bool MobileAdResponse::has_adlink() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileAdResponse::set_has_adlink() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileAdResponse::clear_has_adlink() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileAdResponse::clear_adlink() {
  if (adlink_ != &::google::protobuf::internal::kEmptyString) {
    adlink_->clear();
  }
  clear_has_adlink();
}
inline const ::std::string& MobileAdResponse::adlink() const {
  return *adlink_;
}
inline void MobileAdResponse::set_adlink(const ::std::string& value) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(value);
}
inline void MobileAdResponse::set_adlink(const char* value) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(value);
}
inline void MobileAdResponse::set_adlink(const char* value, size_t size) {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  adlink_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_adlink() {
  set_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    adlink_ = new ::std::string;
  }
  return adlink_;
}
inline ::std::string* MobileAdResponse::release_adlink() {
  clear_has_adlink();
  if (adlink_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adlink_;
    adlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_adlink(::std::string* adlink) {
  if (adlink_ != &::google::protobuf::internal::kEmptyString) {
    delete adlink_;
  }
  if (adlink) {
    set_has_adlink();
    adlink_ = adlink;
  } else {
    clear_has_adlink();
    adlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoUrl = 11;
inline bool MobileAdResponse::has_videourl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileAdResponse::set_has_videourl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileAdResponse::clear_has_videourl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileAdResponse::clear_videourl() {
  if (videourl_ != &::google::protobuf::internal::kEmptyString) {
    videourl_->clear();
  }
  clear_has_videourl();
}
inline const ::std::string& MobileAdResponse::videourl() const {
  return *videourl_;
}
inline void MobileAdResponse::set_videourl(const ::std::string& value) {
  set_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    videourl_ = new ::std::string;
  }
  videourl_->assign(value);
}
inline void MobileAdResponse::set_videourl(const char* value) {
  set_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    videourl_ = new ::std::string;
  }
  videourl_->assign(value);
}
inline void MobileAdResponse::set_videourl(const char* value, size_t size) {
  set_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    videourl_ = new ::std::string;
  }
  videourl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_videourl() {
  set_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    videourl_ = new ::std::string;
  }
  return videourl_;
}
inline ::std::string* MobileAdResponse::release_videourl() {
  clear_has_videourl();
  if (videourl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videourl_;
    videourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_videourl(::std::string* videourl) {
  if (videourl_ != &::google::protobuf::internal::kEmptyString) {
    delete videourl_;
  }
  if (videourl) {
    set_has_videourl();
    videourl_ = videourl;
  } else {
    clear_has_videourl();
    videourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string youtubeUrl = 12;
inline bool MobileAdResponse::has_youtubeurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileAdResponse::set_has_youtubeurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileAdResponse::clear_has_youtubeurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileAdResponse::clear_youtubeurl() {
  if (youtubeurl_ != &::google::protobuf::internal::kEmptyString) {
    youtubeurl_->clear();
  }
  clear_has_youtubeurl();
}
inline const ::std::string& MobileAdResponse::youtubeurl() const {
  return *youtubeurl_;
}
inline void MobileAdResponse::set_youtubeurl(const ::std::string& value) {
  set_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    youtubeurl_ = new ::std::string;
  }
  youtubeurl_->assign(value);
}
inline void MobileAdResponse::set_youtubeurl(const char* value) {
  set_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    youtubeurl_ = new ::std::string;
  }
  youtubeurl_->assign(value);
}
inline void MobileAdResponse::set_youtubeurl(const char* value, size_t size) {
  set_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    youtubeurl_ = new ::std::string;
  }
  youtubeurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_youtubeurl() {
  set_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    youtubeurl_ = new ::std::string;
  }
  return youtubeurl_;
}
inline ::std::string* MobileAdResponse::release_youtubeurl() {
  clear_has_youtubeurl();
  if (youtubeurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = youtubeurl_;
    youtubeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_youtubeurl(::std::string* youtubeurl) {
  if (youtubeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete youtubeurl_;
  }
  if (youtubeurl) {
    set_has_youtubeurl();
    youtubeurl_ = youtubeurl;
  } else {
    clear_has_youtubeurl();
    youtubeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string telNum = 13;
inline bool MobileAdResponse::has_telnum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MobileAdResponse::set_has_telnum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MobileAdResponse::clear_has_telnum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MobileAdResponse::clear_telnum() {
  if (telnum_ != &::google::protobuf::internal::kEmptyString) {
    telnum_->clear();
  }
  clear_has_telnum();
}
inline const ::std::string& MobileAdResponse::telnum() const {
  return *telnum_;
}
inline void MobileAdResponse::set_telnum(const ::std::string& value) {
  set_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    telnum_ = new ::std::string;
  }
  telnum_->assign(value);
}
inline void MobileAdResponse::set_telnum(const char* value) {
  set_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    telnum_ = new ::std::string;
  }
  telnum_->assign(value);
}
inline void MobileAdResponse::set_telnum(const char* value, size_t size) {
  set_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    telnum_ = new ::std::string;
  }
  telnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_telnum() {
  set_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    telnum_ = new ::std::string;
  }
  return telnum_;
}
inline ::std::string* MobileAdResponse::release_telnum() {
  clear_has_telnum();
  if (telnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = telnum_;
    telnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_telnum(::std::string* telnum) {
  if (telnum_ != &::google::protobuf::internal::kEmptyString) {
    delete telnum_;
  }
  if (telnum) {
    set_has_telnum();
    telnum_ = telnum;
  } else {
    clear_has_telnum();
    telnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string shareUrl = 14;
inline bool MobileAdResponse::has_shareurl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MobileAdResponse::set_has_shareurl() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MobileAdResponse::clear_has_shareurl() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MobileAdResponse::clear_shareurl() {
  if (shareurl_ != &::google::protobuf::internal::kEmptyString) {
    shareurl_->clear();
  }
  clear_has_shareurl();
}
inline const ::std::string& MobileAdResponse::shareurl() const {
  return *shareurl_;
}
inline void MobileAdResponse::set_shareurl(const ::std::string& value) {
  set_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    shareurl_ = new ::std::string;
  }
  shareurl_->assign(value);
}
inline void MobileAdResponse::set_shareurl(const char* value) {
  set_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    shareurl_ = new ::std::string;
  }
  shareurl_->assign(value);
}
inline void MobileAdResponse::set_shareurl(const char* value, size_t size) {
  set_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    shareurl_ = new ::std::string;
  }
  shareurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_shareurl() {
  set_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    shareurl_ = new ::std::string;
  }
  return shareurl_;
}
inline ::std::string* MobileAdResponse::release_shareurl() {
  clear_has_shareurl();
  if (shareurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shareurl_;
    shareurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_shareurl(::std::string* shareurl) {
  if (shareurl_ != &::google::protobuf::internal::kEmptyString) {
    delete shareurl_;
  }
  if (shareurl) {
    set_has_shareurl();
    shareurl_ = shareurl;
  } else {
    clear_has_shareurl();
    shareurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string packageName = 15;
inline bool MobileAdResponse::has_packagename() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileAdResponse::set_has_packagename() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileAdResponse::clear_has_packagename() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileAdResponse::clear_packagename() {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    packagename_->clear();
  }
  clear_has_packagename();
}
inline const ::std::string& MobileAdResponse::packagename() const {
  return *packagename_;
}
inline void MobileAdResponse::set_packagename(const ::std::string& value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void MobileAdResponse::set_packagename(const char* value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void MobileAdResponse::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_packagename() {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  return packagename_;
}
inline ::std::string* MobileAdResponse::release_packagename() {
  clear_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packagename_;
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_packagename(::std::string* packagename) {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (packagename) {
    set_has_packagename();
    packagename_ = packagename;
  } else {
    clear_has_packagename();
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string schemeUrl = 16;
inline bool MobileAdResponse::has_schemeurl() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MobileAdResponse::set_has_schemeurl() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MobileAdResponse::clear_has_schemeurl() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MobileAdResponse::clear_schemeurl() {
  if (schemeurl_ != &::google::protobuf::internal::kEmptyString) {
    schemeurl_->clear();
  }
  clear_has_schemeurl();
}
inline const ::std::string& MobileAdResponse::schemeurl() const {
  return *schemeurl_;
}
inline void MobileAdResponse::set_schemeurl(const ::std::string& value) {
  set_has_schemeurl();
  if (schemeurl_ == &::google::protobuf::internal::kEmptyString) {
    schemeurl_ = new ::std::string;
  }
  schemeurl_->assign(value);
}
inline void MobileAdResponse::set_schemeurl(const char* value) {
  set_has_schemeurl();
  if (schemeurl_ == &::google::protobuf::internal::kEmptyString) {
    schemeurl_ = new ::std::string;
  }
  schemeurl_->assign(value);
}
inline void MobileAdResponse::set_schemeurl(const char* value, size_t size) {
  set_has_schemeurl();
  if (schemeurl_ == &::google::protobuf::internal::kEmptyString) {
    schemeurl_ = new ::std::string;
  }
  schemeurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_schemeurl() {
  set_has_schemeurl();
  if (schemeurl_ == &::google::protobuf::internal::kEmptyString) {
    schemeurl_ = new ::std::string;
  }
  return schemeurl_;
}
inline ::std::string* MobileAdResponse::release_schemeurl() {
  clear_has_schemeurl();
  if (schemeurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = schemeurl_;
    schemeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_schemeurl(::std::string* schemeurl) {
  if (schemeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete schemeurl_;
  }
  if (schemeurl) {
    set_has_schemeurl();
    schemeurl_ = schemeurl;
  } else {
    clear_has_schemeurl();
    schemeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string webUrl = 17;
inline bool MobileAdResponse::has_weburl() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MobileAdResponse::set_has_weburl() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MobileAdResponse::clear_has_weburl() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MobileAdResponse::clear_weburl() {
  if (weburl_ != &::google::protobuf::internal::kEmptyString) {
    weburl_->clear();
  }
  clear_has_weburl();
}
inline const ::std::string& MobileAdResponse::weburl() const {
  return *weburl_;
}
inline void MobileAdResponse::set_weburl(const ::std::string& value) {
  set_has_weburl();
  if (weburl_ == &::google::protobuf::internal::kEmptyString) {
    weburl_ = new ::std::string;
  }
  weburl_->assign(value);
}
inline void MobileAdResponse::set_weburl(const char* value) {
  set_has_weburl();
  if (weburl_ == &::google::protobuf::internal::kEmptyString) {
    weburl_ = new ::std::string;
  }
  weburl_->assign(value);
}
inline void MobileAdResponse::set_weburl(const char* value, size_t size) {
  set_has_weburl();
  if (weburl_ == &::google::protobuf::internal::kEmptyString) {
    weburl_ = new ::std::string;
  }
  weburl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_weburl() {
  set_has_weburl();
  if (weburl_ == &::google::protobuf::internal::kEmptyString) {
    weburl_ = new ::std::string;
  }
  return weburl_;
}
inline ::std::string* MobileAdResponse::release_weburl() {
  clear_has_weburl();
  if (weburl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weburl_;
    weburl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_weburl(::std::string* weburl) {
  if (weburl_ != &::google::protobuf::internal::kEmptyString) {
    delete weburl_;
  }
  if (weburl) {
    set_has_weburl();
    weburl_ = weburl;
  } else {
    clear_has_weburl();
    weburl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fallbackUrl = 18;
inline bool MobileAdResponse::has_fallbackurl() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MobileAdResponse::set_has_fallbackurl() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MobileAdResponse::clear_has_fallbackurl() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MobileAdResponse::clear_fallbackurl() {
  if (fallbackurl_ != &::google::protobuf::internal::kEmptyString) {
    fallbackurl_->clear();
  }
  clear_has_fallbackurl();
}
inline const ::std::string& MobileAdResponse::fallbackurl() const {
  return *fallbackurl_;
}
inline void MobileAdResponse::set_fallbackurl(const ::std::string& value) {
  set_has_fallbackurl();
  if (fallbackurl_ == &::google::protobuf::internal::kEmptyString) {
    fallbackurl_ = new ::std::string;
  }
  fallbackurl_->assign(value);
}
inline void MobileAdResponse::set_fallbackurl(const char* value) {
  set_has_fallbackurl();
  if (fallbackurl_ == &::google::protobuf::internal::kEmptyString) {
    fallbackurl_ = new ::std::string;
  }
  fallbackurl_->assign(value);
}
inline void MobileAdResponse::set_fallbackurl(const char* value, size_t size) {
  set_has_fallbackurl();
  if (fallbackurl_ == &::google::protobuf::internal::kEmptyString) {
    fallbackurl_ = new ::std::string;
  }
  fallbackurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_fallbackurl() {
  set_has_fallbackurl();
  if (fallbackurl_ == &::google::protobuf::internal::kEmptyString) {
    fallbackurl_ = new ::std::string;
  }
  return fallbackurl_;
}
inline ::std::string* MobileAdResponse::release_fallbackurl() {
  clear_has_fallbackurl();
  if (fallbackurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fallbackurl_;
    fallbackurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_fallbackurl(::std::string* fallbackurl) {
  if (fallbackurl_ != &::google::protobuf::internal::kEmptyString) {
    delete fallbackurl_;
  }
  if (fallbackurl) {
    set_has_fallbackurl();
    fallbackurl_ = fallbackurl;
  } else {
    clear_has_fallbackurl();
    fallbackurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string clickOpenType = 19;
inline bool MobileAdResponse::has_clickopentype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MobileAdResponse::set_has_clickopentype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MobileAdResponse::clear_has_clickopentype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MobileAdResponse::clear_clickopentype() {
  if (clickopentype_ != &::google::protobuf::internal::kEmptyString) {
    clickopentype_->clear();
  }
  clear_has_clickopentype();
}
inline const ::std::string& MobileAdResponse::clickopentype() const {
  return *clickopentype_;
}
inline void MobileAdResponse::set_clickopentype(const ::std::string& value) {
  set_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    clickopentype_ = new ::std::string;
  }
  clickopentype_->assign(value);
}
inline void MobileAdResponse::set_clickopentype(const char* value) {
  set_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    clickopentype_ = new ::std::string;
  }
  clickopentype_->assign(value);
}
inline void MobileAdResponse::set_clickopentype(const char* value, size_t size) {
  set_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    clickopentype_ = new ::std::string;
  }
  clickopentype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_clickopentype() {
  set_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    clickopentype_ = new ::std::string;
  }
  return clickopentype_;
}
inline ::std::string* MobileAdResponse::release_clickopentype() {
  clear_has_clickopentype();
  if (clickopentype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clickopentype_;
    clickopentype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_clickopentype(::std::string* clickopentype) {
  if (clickopentype_ != &::google::protobuf::internal::kEmptyString) {
    delete clickopentype_;
  }
  if (clickopentype) {
    set_has_clickopentype();
    clickopentype_ = clickopentype;
  } else {
    clear_has_clickopentype();
    clickopentype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string clickUrl = 20;
inline bool MobileAdResponse::has_clickurl() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MobileAdResponse::set_has_clickurl() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MobileAdResponse::clear_has_clickurl() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MobileAdResponse::clear_clickurl() {
  if (clickurl_ != &::google::protobuf::internal::kEmptyString) {
    clickurl_->clear();
  }
  clear_has_clickurl();
}
inline const ::std::string& MobileAdResponse::clickurl() const {
  return *clickurl_;
}
inline void MobileAdResponse::set_clickurl(const ::std::string& value) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(value);
}
inline void MobileAdResponse::set_clickurl(const char* value) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(value);
}
inline void MobileAdResponse::set_clickurl(const char* value, size_t size) {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  clickurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_clickurl() {
  set_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    clickurl_ = new ::std::string;
  }
  return clickurl_;
}
inline ::std::string* MobileAdResponse::release_clickurl() {
  clear_has_clickurl();
  if (clickurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clickurl_;
    clickurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_clickurl(::std::string* clickurl) {
  if (clickurl_ != &::google::protobuf::internal::kEmptyString) {
    delete clickurl_;
  }
  if (clickurl) {
    set_has_clickurl();
    clickurl_ = clickurl;
  } else {
    clear_has_clickurl();
    clickurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string animation = 21;
inline bool MobileAdResponse::has_animation() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MobileAdResponse::set_has_animation() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MobileAdResponse::clear_has_animation() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MobileAdResponse::clear_animation() {
  if (animation_ != &::google::protobuf::internal::kEmptyString) {
    animation_->clear();
  }
  clear_has_animation();
}
inline const ::std::string& MobileAdResponse::animation() const {
  return *animation_;
}
inline void MobileAdResponse::set_animation(const ::std::string& value) {
  set_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    animation_ = new ::std::string;
  }
  animation_->assign(value);
}
inline void MobileAdResponse::set_animation(const char* value) {
  set_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    animation_ = new ::std::string;
  }
  animation_->assign(value);
}
inline void MobileAdResponse::set_animation(const char* value, size_t size) {
  set_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    animation_ = new ::std::string;
  }
  animation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_animation() {
  set_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    animation_ = new ::std::string;
  }
  return animation_;
}
inline ::std::string* MobileAdResponse::release_animation() {
  clear_has_animation();
  if (animation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = animation_;
    animation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_animation(::std::string* animation) {
  if (animation_ != &::google::protobuf::internal::kEmptyString) {
    delete animation_;
  }
  if (animation) {
    set_has_animation();
    animation_ = animation;
  } else {
    clear_has_animation();
    animation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string refresh = 22;
inline bool MobileAdResponse::has_refresh() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MobileAdResponse::set_has_refresh() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MobileAdResponse::clear_has_refresh() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MobileAdResponse::clear_refresh() {
  if (refresh_ != &::google::protobuf::internal::kEmptyString) {
    refresh_->clear();
  }
  clear_has_refresh();
}
inline const ::std::string& MobileAdResponse::refresh() const {
  return *refresh_;
}
inline void MobileAdResponse::set_refresh(const ::std::string& value) {
  set_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    refresh_ = new ::std::string;
  }
  refresh_->assign(value);
}
inline void MobileAdResponse::set_refresh(const char* value) {
  set_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    refresh_ = new ::std::string;
  }
  refresh_->assign(value);
}
inline void MobileAdResponse::set_refresh(const char* value, size_t size) {
  set_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    refresh_ = new ::std::string;
  }
  refresh_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_refresh() {
  set_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    refresh_ = new ::std::string;
  }
  return refresh_;
}
inline ::std::string* MobileAdResponse::release_refresh() {
  clear_has_refresh();
  if (refresh_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refresh_;
    refresh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_refresh(::std::string* refresh) {
  if (refresh_ != &::google::protobuf::internal::kEmptyString) {
    delete refresh_;
  }
  if (refresh) {
    set_has_refresh();
    refresh_ = refresh;
  } else {
    clear_has_refresh();
    refresh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string width = 23;
inline bool MobileAdResponse::has_width() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MobileAdResponse::set_has_width() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MobileAdResponse::clear_has_width() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MobileAdResponse::clear_width() {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    width_->clear();
  }
  clear_has_width();
}
inline const ::std::string& MobileAdResponse::width() const {
  return *width_;
}
inline void MobileAdResponse::set_width(const ::std::string& value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void MobileAdResponse::set_width(const char* value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void MobileAdResponse::set_width(const char* value, size_t size) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_width() {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  return width_;
}
inline ::std::string* MobileAdResponse::release_width() {
  clear_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = width_;
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_width(::std::string* width) {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    delete width_;
  }
  if (width) {
    set_has_width();
    width_ = width;
  } else {
    clear_has_width();
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string height = 24;
inline bool MobileAdResponse::has_height() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MobileAdResponse::set_has_height() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MobileAdResponse::clear_has_height() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MobileAdResponse::clear_height() {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    height_->clear();
  }
  clear_has_height();
}
inline const ::std::string& MobileAdResponse::height() const {
  return *height_;
}
inline void MobileAdResponse::set_height(const ::std::string& value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void MobileAdResponse::set_height(const char* value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void MobileAdResponse::set_height(const char* value, size_t size) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_height() {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  return height_;
}
inline ::std::string* MobileAdResponse::release_height() {
  clear_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = height_;
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_height(::std::string* height) {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    delete height_;
  }
  if (height) {
    set_has_height();
    height_ = height;
  } else {
    clear_has_height();
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string autoClose = 25;
inline bool MobileAdResponse::has_autoclose() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MobileAdResponse::set_has_autoclose() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MobileAdResponse::clear_has_autoclose() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MobileAdResponse::clear_autoclose() {
  if (autoclose_ != &::google::protobuf::internal::kEmptyString) {
    autoclose_->clear();
  }
  clear_has_autoclose();
}
inline const ::std::string& MobileAdResponse::autoclose() const {
  return *autoclose_;
}
inline void MobileAdResponse::set_autoclose(const ::std::string& value) {
  set_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    autoclose_ = new ::std::string;
  }
  autoclose_->assign(value);
}
inline void MobileAdResponse::set_autoclose(const char* value) {
  set_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    autoclose_ = new ::std::string;
  }
  autoclose_->assign(value);
}
inline void MobileAdResponse::set_autoclose(const char* value, size_t size) {
  set_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    autoclose_ = new ::std::string;
  }
  autoclose_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::mutable_autoclose() {
  set_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    autoclose_ = new ::std::string;
  }
  return autoclose_;
}
inline ::std::string* MobileAdResponse::release_autoclose() {
  clear_has_autoclose();
  if (autoclose_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = autoclose_;
    autoclose_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MobileAdResponse::set_allocated_autoclose(::std::string* autoclose) {
  if (autoclose_ != &::google::protobuf::internal::kEmptyString) {
    delete autoclose_;
  }
  if (autoclose) {
    set_has_autoclose();
    autoclose_ = autoclose;
  } else {
    clear_has_autoclose();
    autoclose_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string impressionUrl = 26;
inline int MobileAdResponse::impressionurl_size() const {
  return impressionurl_.size();
}
inline void MobileAdResponse::clear_impressionurl() {
  impressionurl_.Clear();
}
inline const ::std::string& MobileAdResponse::impressionurl(int index) const {
  return impressionurl_.Get(index);
}
inline ::std::string* MobileAdResponse::mutable_impressionurl(int index) {
  return impressionurl_.Mutable(index);
}
inline void MobileAdResponse::set_impressionurl(int index, const ::std::string& value) {
  impressionurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse::set_impressionurl(int index, const char* value) {
  impressionurl_.Mutable(index)->assign(value);
}
inline void MobileAdResponse::set_impressionurl(int index, const char* value, size_t size) {
  impressionurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileAdResponse::add_impressionurl() {
  return impressionurl_.Add();
}
inline void MobileAdResponse::add_impressionurl(const ::std::string& value) {
  impressionurl_.Add()->assign(value);
}
inline void MobileAdResponse::add_impressionurl(const char* value) {
  impressionurl_.Add()->assign(value);
}
inline void MobileAdResponse::add_impressionurl(const char* value, size_t size) {
  impressionurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileAdResponse::impressionurl() const {
  return impressionurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileAdResponse::mutable_impressionurl() {
  return &impressionurl_;
}

// optional .com.rj.protos.mobile.MobileAdResponse.Orientation orientation = 27;
inline bool MobileAdResponse::has_orientation() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MobileAdResponse::set_has_orientation() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MobileAdResponse::clear_has_orientation() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MobileAdResponse::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::com::rj::protos::mobile::MobileAdResponse_Orientation MobileAdResponse::orientation() const {
  return static_cast< ::com::rj::protos::mobile::MobileAdResponse_Orientation >(orientation_);
}
inline void MobileAdResponse::set_orientation(::com::rj::protos::mobile::MobileAdResponse_Orientation value) {
  assert(::com::rj::protos::mobile::MobileAdResponse_Orientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// repeated .com.rj.protos.mobile.MobileAdResponse.TrackingEvents trackingEvents = 28;
inline int MobileAdResponse::trackingevents_size() const {
  return trackingevents_.size();
}
inline void MobileAdResponse::clear_trackingevents() {
  trackingevents_.Clear();
}
inline const ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents& MobileAdResponse::trackingevents(int index) const {
  return trackingevents_.Get(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents* MobileAdResponse::mutable_trackingevents(int index) {
  return trackingevents_.Mutable(index);
}
inline ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents* MobileAdResponse::add_trackingevents() {
  return trackingevents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents >&
MobileAdResponse::trackingevents() const {
  return trackingevents_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::rj::protos::mobile::MobileAdResponse_TrackingEvents >*
MobileAdResponse::mutable_trackingevents() {
  return &trackingevents_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mobile
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::mobile::MobileAdResponse_Orientation>() {
  return ::com::rj::protos::mobile::MobileAdResponse_Orientation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MobileAdResponse_5fnew_2eproto__INCLUDED
