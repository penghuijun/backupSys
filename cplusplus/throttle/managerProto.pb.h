// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: managerProto.proto

#ifndef PROTOBUF_managerProto_2eproto__INCLUDED
#define PROTOBUF_managerProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace rj {
namespace protos {
namespace manager {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_managerProto_2eproto();
void protobuf_AssignDesc_managerProto_2eproto();
void protobuf_ShutdownFile_managerProto_2eproto();

class managerProtocol;
class managerProtocol_messageValue;

enum managerProtocol_messageType {
  managerProtocol_messageType_LOGIN_REQ = 1,
  managerProtocol_messageType_LOGIN_RSP = 2,
  managerProtocol_messageType_HEART_REQ = 3,
  managerProtocol_messageType_HEART_RSP = 4,
  managerProtocol_messageType_REGISTER_REQ = 5,
  managerProtocol_messageType_REGISTER_RSP = 6
};
bool managerProtocol_messageType_IsValid(int value);
const managerProtocol_messageType managerProtocol_messageType_messageType_MIN = managerProtocol_messageType_LOGIN_REQ;
const managerProtocol_messageType managerProtocol_messageType_messageType_MAX = managerProtocol_messageType_REGISTER_RSP;
const int managerProtocol_messageType_messageType_ARRAYSIZE = managerProtocol_messageType_messageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* managerProtocol_messageType_descriptor();
inline const ::std::string& managerProtocol_messageType_Name(managerProtocol_messageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    managerProtocol_messageType_descriptor(), value);
}
inline bool managerProtocol_messageType_Parse(
    const ::std::string& name, managerProtocol_messageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<managerProtocol_messageType>(
    managerProtocol_messageType_descriptor(), name, value);
}
enum managerProtocol_messageTrans {
  managerProtocol_messageTrans_THROTTLE = 1,
  managerProtocol_messageTrans_BIDDER = 2,
  managerProtocol_messageTrans_CONNECTOR = 3,
  managerProtocol_messageTrans_BC = 4
};
bool managerProtocol_messageTrans_IsValid(int value);
const managerProtocol_messageTrans managerProtocol_messageTrans_messageTrans_MIN = managerProtocol_messageTrans_THROTTLE;
const managerProtocol_messageTrans managerProtocol_messageTrans_messageTrans_MAX = managerProtocol_messageTrans_BC;
const int managerProtocol_messageTrans_messageTrans_ARRAYSIZE = managerProtocol_messageTrans_messageTrans_MAX + 1;

const ::google::protobuf::EnumDescriptor* managerProtocol_messageTrans_descriptor();
inline const ::std::string& managerProtocol_messageTrans_Name(managerProtocol_messageTrans value) {
  return ::google::protobuf::internal::NameOfEnum(
    managerProtocol_messageTrans_descriptor(), value);
}
inline bool managerProtocol_messageTrans_Parse(
    const ::std::string& name, managerProtocol_messageTrans* value) {
  return ::google::protobuf::internal::ParseNamedEnum<managerProtocol_messageTrans>(
    managerProtocol_messageTrans_descriptor(), name, value);
}
// ===================================================================

class managerProtocol_messageValue : public ::google::protobuf::Message {
 public:
  managerProtocol_messageValue();
  virtual ~managerProtocol_messageValue();

  managerProtocol_messageValue(const managerProtocol_messageValue& from);

  inline managerProtocol_messageValue& operator=(const managerProtocol_messageValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const managerProtocol_messageValue& default_instance();

  void Swap(managerProtocol_messageValue* other);

  // implements Message ----------------------------------------------

  managerProtocol_messageValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const managerProtocol_messageValue& from);
  void MergeFrom(const managerProtocol_messageValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // repeated uint32 port = 2;
  inline int port_size() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port(int index) const;
  inline void set_port(int index, ::google::protobuf::uint32 value);
  inline void add_port(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      port() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_port();

  // optional string ip1 = 3;
  inline bool has_ip1() const;
  inline void clear_ip1();
  static const int kIp1FieldNumber = 3;
  inline const ::std::string& ip1() const;
  inline void set_ip1(const ::std::string& value);
  inline void set_ip1(const char* value);
  inline void set_ip1(const char* value, size_t size);
  inline ::std::string* mutable_ip1();
  inline ::std::string* release_ip1();
  inline void set_allocated_ip1(::std::string* ip1);

  // optional uint32 port1 = 4;
  inline bool has_port1() const;
  inline void clear_port1();
  static const int kPort1FieldNumber = 4;
  inline ::google::protobuf::uint32 port1() const;
  inline void set_port1(::google::protobuf::uint32 value);

  // optional string key = 5;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 5;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:com.rj.protos.manager.managerProtocol.messageValue)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_ip1();
  inline void clear_has_ip1();
  inline void set_has_port1();
  inline void clear_has_port1();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > port_;
  ::std::string* ip1_;
  ::std::string* key_;
  ::google::protobuf::uint32 port1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_managerProto_2eproto();
  friend void protobuf_AssignDesc_managerProto_2eproto();
  friend void protobuf_ShutdownFile_managerProto_2eproto();

  void InitAsDefaultInstance();
  static managerProtocol_messageValue* default_instance_;
};
// -------------------------------------------------------------------

class managerProtocol : public ::google::protobuf::Message {
 public:
  managerProtocol();
  virtual ~managerProtocol();

  managerProtocol(const managerProtocol& from);

  inline managerProtocol& operator=(const managerProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const managerProtocol& default_instance();

  void Swap(managerProtocol* other);

  // implements Message ----------------------------------------------

  managerProtocol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const managerProtocol& from);
  void MergeFrom(const managerProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef managerProtocol_messageValue messageValue;

  typedef managerProtocol_messageType messageType;
  static const messageType LOGIN_REQ = managerProtocol_messageType_LOGIN_REQ;
  static const messageType LOGIN_RSP = managerProtocol_messageType_LOGIN_RSP;
  static const messageType HEART_REQ = managerProtocol_messageType_HEART_REQ;
  static const messageType HEART_RSP = managerProtocol_messageType_HEART_RSP;
  static const messageType REGISTER_REQ = managerProtocol_messageType_REGISTER_REQ;
  static const messageType REGISTER_RSP = managerProtocol_messageType_REGISTER_RSP;
  static inline bool messageType_IsValid(int value) {
    return managerProtocol_messageType_IsValid(value);
  }
  static const messageType messageType_MIN =
    managerProtocol_messageType_messageType_MIN;
  static const messageType messageType_MAX =
    managerProtocol_messageType_messageType_MAX;
  static const int messageType_ARRAYSIZE =
    managerProtocol_messageType_messageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  messageType_descriptor() {
    return managerProtocol_messageType_descriptor();
  }
  static inline const ::std::string& messageType_Name(messageType value) {
    return managerProtocol_messageType_Name(value);
  }
  static inline bool messageType_Parse(const ::std::string& name,
      messageType* value) {
    return managerProtocol_messageType_Parse(name, value);
  }

  typedef managerProtocol_messageTrans messageTrans;
  static const messageTrans THROTTLE = managerProtocol_messageTrans_THROTTLE;
  static const messageTrans BIDDER = managerProtocol_messageTrans_BIDDER;
  static const messageTrans CONNECTOR = managerProtocol_messageTrans_CONNECTOR;
  static const messageTrans BC = managerProtocol_messageTrans_BC;
  static inline bool messageTrans_IsValid(int value) {
    return managerProtocol_messageTrans_IsValid(value);
  }
  static const messageTrans messageTrans_MIN =
    managerProtocol_messageTrans_messageTrans_MIN;
  static const messageTrans messageTrans_MAX =
    managerProtocol_messageTrans_messageTrans_MAX;
  static const int messageTrans_ARRAYSIZE =
    managerProtocol_messageTrans_messageTrans_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  messageTrans_descriptor() {
    return managerProtocol_messageTrans_descriptor();
  }
  static inline const ::std::string& messageTrans_Name(messageTrans value) {
    return managerProtocol_messageTrans_Name(value);
  }
  static inline bool messageTrans_Parse(const ::std::string& name,
      messageTrans* value) {
    return managerProtocol_messageTrans_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.rj.protos.manager.managerProtocol.messageType messagetype = 1;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessagetypeFieldNumber = 1;
  inline ::com::rj::protos::manager::managerProtocol_messageType messagetype() const;
  inline void set_messagetype(::com::rj::protos::manager::managerProtocol_messageType value);

  // required .com.rj.protos.manager.managerProtocol.messageTrans messagefrom = 2;
  inline bool has_messagefrom() const;
  inline void clear_messagefrom();
  static const int kMessagefromFieldNumber = 2;
  inline ::com::rj::protos::manager::managerProtocol_messageTrans messagefrom() const;
  inline void set_messagefrom(::com::rj::protos::manager::managerProtocol_messageTrans value);

  // required .com.rj.protos.manager.managerProtocol.messageValue messagevalue = 3;
  inline bool has_messagevalue() const;
  inline void clear_messagevalue();
  static const int kMessagevalueFieldNumber = 3;
  inline const ::com::rj::protos::manager::managerProtocol_messageValue& messagevalue() const;
  inline ::com::rj::protos::manager::managerProtocol_messageValue* mutable_messagevalue();
  inline ::com::rj::protos::manager::managerProtocol_messageValue* release_messagevalue();
  inline void set_allocated_messagevalue(::com::rj::protos::manager::managerProtocol_messageValue* messagevalue);

  // @@protoc_insertion_point(class_scope:com.rj.protos.manager.managerProtocol)
 private:
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_messagefrom();
  inline void clear_has_messagefrom();
  inline void set_has_messagevalue();
  inline void clear_has_messagevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int messagetype_;
  int messagefrom_;
  ::com::rj::protos::manager::managerProtocol_messageValue* messagevalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_managerProto_2eproto();
  friend void protobuf_AssignDesc_managerProto_2eproto();
  friend void protobuf_ShutdownFile_managerProto_2eproto();

  void InitAsDefaultInstance();
  static managerProtocol* default_instance_;
};
// ===================================================================


// ===================================================================

// managerProtocol_messageValue

// optional string ip = 1;
inline bool managerProtocol_messageValue::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void managerProtocol_messageValue::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void managerProtocol_messageValue::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void managerProtocol_messageValue::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& managerProtocol_messageValue::ip() const {
  return *ip_;
}
inline void managerProtocol_messageValue::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void managerProtocol_messageValue::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void managerProtocol_messageValue::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* managerProtocol_messageValue::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* managerProtocol_messageValue::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void managerProtocol_messageValue::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 port = 2;
inline int managerProtocol_messageValue::port_size() const {
  return port_.size();
}
inline void managerProtocol_messageValue::clear_port() {
  port_.Clear();
}
inline ::google::protobuf::uint32 managerProtocol_messageValue::port(int index) const {
  return port_.Get(index);
}
inline void managerProtocol_messageValue::set_port(int index, ::google::protobuf::uint32 value) {
  port_.Set(index, value);
}
inline void managerProtocol_messageValue::add_port(::google::protobuf::uint32 value) {
  port_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
managerProtocol_messageValue::port() const {
  return port_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
managerProtocol_messageValue::mutable_port() {
  return &port_;
}

// optional string ip1 = 3;
inline bool managerProtocol_messageValue::has_ip1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void managerProtocol_messageValue::set_has_ip1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void managerProtocol_messageValue::clear_has_ip1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void managerProtocol_messageValue::clear_ip1() {
  if (ip1_ != &::google::protobuf::internal::kEmptyString) {
    ip1_->clear();
  }
  clear_has_ip1();
}
inline const ::std::string& managerProtocol_messageValue::ip1() const {
  return *ip1_;
}
inline void managerProtocol_messageValue::set_ip1(const ::std::string& value) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::kEmptyString) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(value);
}
inline void managerProtocol_messageValue::set_ip1(const char* value) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::kEmptyString) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(value);
}
inline void managerProtocol_messageValue::set_ip1(const char* value, size_t size) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::kEmptyString) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* managerProtocol_messageValue::mutable_ip1() {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::kEmptyString) {
    ip1_ = new ::std::string;
  }
  return ip1_;
}
inline ::std::string* managerProtocol_messageValue::release_ip1() {
  clear_has_ip1();
  if (ip1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip1_;
    ip1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void managerProtocol_messageValue::set_allocated_ip1(::std::string* ip1) {
  if (ip1_ != &::google::protobuf::internal::kEmptyString) {
    delete ip1_;
  }
  if (ip1) {
    set_has_ip1();
    ip1_ = ip1;
  } else {
    clear_has_ip1();
    ip1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port1 = 4;
inline bool managerProtocol_messageValue::has_port1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void managerProtocol_messageValue::set_has_port1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void managerProtocol_messageValue::clear_has_port1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void managerProtocol_messageValue::clear_port1() {
  port1_ = 0u;
  clear_has_port1();
}
inline ::google::protobuf::uint32 managerProtocol_messageValue::port1() const {
  return port1_;
}
inline void managerProtocol_messageValue::set_port1(::google::protobuf::uint32 value) {
  set_has_port1();
  port1_ = value;
}

// optional string key = 5;
inline bool managerProtocol_messageValue::has_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void managerProtocol_messageValue::set_has_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void managerProtocol_messageValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void managerProtocol_messageValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& managerProtocol_messageValue::key() const {
  return *key_;
}
inline void managerProtocol_messageValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void managerProtocol_messageValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void managerProtocol_messageValue::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* managerProtocol_messageValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* managerProtocol_messageValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void managerProtocol_messageValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// managerProtocol

// required .com.rj.protos.manager.managerProtocol.messageType messagetype = 1;
inline bool managerProtocol::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void managerProtocol::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void managerProtocol::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void managerProtocol::clear_messagetype() {
  messagetype_ = 1;
  clear_has_messagetype();
}
inline ::com::rj::protos::manager::managerProtocol_messageType managerProtocol::messagetype() const {
  return static_cast< ::com::rj::protos::manager::managerProtocol_messageType >(messagetype_);
}
inline void managerProtocol::set_messagetype(::com::rj::protos::manager::managerProtocol_messageType value) {
  assert(::com::rj::protos::manager::managerProtocol_messageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
}

// required .com.rj.protos.manager.managerProtocol.messageTrans messagefrom = 2;
inline bool managerProtocol::has_messagefrom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void managerProtocol::set_has_messagefrom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void managerProtocol::clear_has_messagefrom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void managerProtocol::clear_messagefrom() {
  messagefrom_ = 1;
  clear_has_messagefrom();
}
inline ::com::rj::protos::manager::managerProtocol_messageTrans managerProtocol::messagefrom() const {
  return static_cast< ::com::rj::protos::manager::managerProtocol_messageTrans >(messagefrom_);
}
inline void managerProtocol::set_messagefrom(::com::rj::protos::manager::managerProtocol_messageTrans value) {
  assert(::com::rj::protos::manager::managerProtocol_messageTrans_IsValid(value));
  set_has_messagefrom();
  messagefrom_ = value;
}

// required .com.rj.protos.manager.managerProtocol.messageValue messagevalue = 3;
inline bool managerProtocol::has_messagevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void managerProtocol::set_has_messagevalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void managerProtocol::clear_has_messagevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void managerProtocol::clear_messagevalue() {
  if (messagevalue_ != NULL) messagevalue_->::com::rj::protos::manager::managerProtocol_messageValue::Clear();
  clear_has_messagevalue();
}
inline const ::com::rj::protos::manager::managerProtocol_messageValue& managerProtocol::messagevalue() const {
  return messagevalue_ != NULL ? *messagevalue_ : *default_instance_->messagevalue_;
}
inline ::com::rj::protos::manager::managerProtocol_messageValue* managerProtocol::mutable_messagevalue() {
  set_has_messagevalue();
  if (messagevalue_ == NULL) messagevalue_ = new ::com::rj::protos::manager::managerProtocol_messageValue;
  return messagevalue_;
}
inline ::com::rj::protos::manager::managerProtocol_messageValue* managerProtocol::release_messagevalue() {
  clear_has_messagevalue();
  ::com::rj::protos::manager::managerProtocol_messageValue* temp = messagevalue_;
  messagevalue_ = NULL;
  return temp;
}
inline void managerProtocol::set_allocated_messagevalue(::com::rj::protos::manager::managerProtocol_messageValue* messagevalue) {
  delete messagevalue_;
  messagevalue_ = messagevalue;
  if (messagevalue) {
    set_has_messagevalue();
  } else {
    clear_has_messagevalue();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace manager
}  // namespace protos
}  // namespace rj
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::manager::managerProtocol_messageType>() {
  return ::com::rj::protos::manager::managerProtocol_messageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::rj::protos::manager::managerProtocol_messageTrans>() {
  return ::com::rj::protos::manager::managerProtocol_messageTrans_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_managerProto_2eproto__INCLUDED
